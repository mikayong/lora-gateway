cscope 15 $HOME/work/dragino-packages/lora-gateway/src -q 0000005386 0000817810
	@libloragw/inc/loragw_aux.h

17 #i‚de‡
_LORAGW_AUX_H


18 
	#_LORAGW_AUX_H


	)

23 
	~"c⁄fig.h
"

35 
	#TAKE_N_BITS_FROM
(
b
, 
p
, 
n
Ë(((bË>> (p)Ë& ((1 << (n)Ë- 1))

	)

44 
waô_ms
(
t
);

	@libloragw/inc/loragw_fpga.h

19 #i‚de‡
_LORAGW_FPGA_REG_H


20 
	#_LORAGW_FPGA_REG_H


	)

25 
	~<°döt.h
>

26 
	~<°dboﬁ.h
>

31 
	#LGW_REG_SUCCESS
 0

	)

32 
	#LGW_REG_ERROR
 -1

	)

34 
	#LGW_MIN_NOTCH_FREQ
 126000U

	)

35 
	#LGW_MAX_NOTCH_FREQ
 250000U

	)

36 
	#LGW_DEFAULT_NOTCH_FREQ
 129000U

	)

44 
	#LGW_FPGA_SOFT_RESET
 0

	)

45 
	#LGW_FPGA_FEATURE
 1

	)

46 
	#LGW_FPGA_LBT_INITIAL_FREQ
 2

	)

47 
	#LGW_FPGA_VERSION
 3

	)

48 
	#LGW_FPGA_STATUS
 4

	)

49 
	#LGW_FPGA_CTRL_FEATURE_START
 5

	)

50 
	#LGW_FPGA_CTRL_RADIO_RESET
 6

	)

51 
	#LGW_FPGA_CTRL_INPUT_SYNC_I
 7

	)

52 
	#LGW_FPGA_CTRL_INPUT_SYNC_Q
 8

	)

53 
	#LGW_FPGA_CTRL_OUTPUT_SYNC
 9

	)

54 
	#LGW_FPGA_CTRL_INVERT_IQ
 10

	)

55 
	#LGW_FPGA_CTRL_ACCESS_HISTO_MEM
 11

	)

56 
	#LGW_FPGA_CTRL_CLEAR_HISTO_MEM
 12

	)

57 
	#LGW_FPGA_HISTO_RAM_ADDR
 13

	)

58 
	#LGW_FPGA_HISTO_RAM_DATA
 14

	)

59 
	#LGW_FPGA_HISTO_NB_READ
 15

	)

60 
	#LGW_FPGA_LBT_TIMESTAMP_CH
 16

	)

61 
	#LGW_FPGA_LBT_TIMESTAMP_SELECT_CH
 17

	)

62 
	#LGW_FPGA_LBT_CH0_FREQ_OFFSET
 18

	)

63 
	#LGW_FPGA_LBT_CH1_FREQ_OFFSET
 19

	)

64 
	#LGW_FPGA_LBT_CH2_FREQ_OFFSET
 20

	)

65 
	#LGW_FPGA_LBT_CH3_FREQ_OFFSET
 21

	)

66 
	#LGW_FPGA_LBT_CH4_FREQ_OFFSET
 22

	)

67 
	#LGW_FPGA_LBT_CH5_FREQ_OFFSET
 23

	)

68 
	#LGW_FPGA_LBT_CH6_FREQ_OFFSET
 24

	)

69 
	#LGW_FPGA_LBT_CH7_FREQ_OFFSET
 25

	)

70 
	#LGW_FPGA_SCAN_FREQ_OFFSET
 26

	)

71 
	#LGW_FPGA_LBT_SCAN_TIME_CH0
 27

	)

72 
	#LGW_FPGA_LBT_SCAN_TIME_CH1
 28

	)

73 
	#LGW_FPGA_LBT_SCAN_TIME_CH2
 29

	)

74 
	#LGW_FPGA_LBT_SCAN_TIME_CH3
 30

	)

75 
	#LGW_FPGA_LBT_SCAN_TIME_CH4
 31

	)

76 
	#LGW_FPGA_LBT_SCAN_TIME_CH5
 32

	)

77 
	#LGW_FPGA_LBT_SCAN_TIME_CH6
 33

	)

78 
	#LGW_FPGA_LBT_SCAN_TIME_CH7
 34

	)

79 
	#LGW_FPGA_RSSI_TARGET
 35

	)

80 
	#LGW_FPGA_HISTO_SCAN_FREQ
 36

	)

81 
	#LGW_FPGA_NOTCH_FREQ_OFFSET
 37

	)

82 
	#LGW_FPGA_TOTALREGS
 38

	)

91 
lgw_Âga_gë_tx_nŸch_dñay
();

98 
lgw_Âga_c⁄figuª
(
uöt32_t
 
tx_nŸch_‰eq
);

106 
lgw_Âga_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
);

114 
lgw_Âga_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
);

123 
lgw_Âga_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
);

132 
lgw_Âga_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
);

	@libloragw/inc/loragw_gps.h

19 #i‚de‡
_LORAGW_GPS_H


20 
	#_LORAGW_GPS_H


	)

25 
	#_GNU_SOURCE


	)

26 
	~<°döt.h
>

27 
	~<time.h
>

28 
	~<ãrmios.h
>

29 
	~<uni°d.h
>

31 
	~"c⁄fig.h
"

40 
	såef
 {

41 
time_t
 
	msy°ime
;

42 
uöt32_t
 
	mcou¡_us
;

43 
time•ec
 
	mutc
;

44 
time•ec
 
	mgps
;

45 
	mxèl_îr
;

52 
	sco‹d_s
 {

53 
	mœt
;

54 
	ml⁄
;

55 
	mÆt
;

62 
	egps_msg
 {

63 
	mUNKNOWN
,

64 
	mIGNORED
,

65 
	mINVALID
,

66 
	mINCOMPLETE
,

68 
	mNMEA_RMC
,

69 
	mNMEA_GGA
,

70 
	mNMEA_GNS
,

71 
	mNMEA_ZDA
,

73 
	mNMEA_GBS
,

74 
	mNMEA_GST
,

75 
	mNMEA_GSA
,

76 
	mNMEA_GSV
,

78 
	mNMEA_GLL
,

79 
	mNMEA_TXT
,

80 
	mNMEA_VTG
,

82 
	mUBX_NAV_TIMEGPS
,

83 
	mUBX_NAV_TIMEUTC


89 
	#LGW_GPS_SUCCESS
 0

	)

90 
	#LGW_GPS_ERROR
 -1

	)

92 
	#LGW_GPS_MIN_MSG_SIZE
 (8)

	)

93 
	#LGW_GPS_UBX_SYNC_CHAR
 (0xB5)

	)

94 
	#LGW_GPS_NMEA_SYNC_CHAR
 (0x24)

	)

108 
lgw_gps_íabÀ
(* 
ây_∑th
, * 
gps_Ámûly
, 
•ìd_t
 
èrgë_bøã
, * 
fd_±r
);

116 
lgw_gps_dißbÀ
(
fd
);

130 
gps_msg
 
lgw_∑r£_nmó
(c⁄° * 
£rül_buff
, 
buff_size
);

145 
gps_msg
 
lgw_∑r£_ubx
(c⁄° * 
£rül_buff
, 
size_t
 
buff_size
, size_à*
msg_size
);

162 
lgw_gps_gë
(
time•ec
 *
utc
, time•e¯*
gps_time
, 
co‹d_s
 *
loc
, co‹d_†*
îr
);

175 
lgw_gps_sync
(
åef
 *
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 
utc
, time•e¯
gps_time
);

189 
lgw_˙t2utc
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
* 
utc
);

203 
lgw_utc2˙t
(
åef
 
ªf
,
time•ec
 
utc
, 
uöt32_t
* 
cou¡_us
);

217 
lgw_˙t2gps
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
* 
gps_time
);

231 
lgw_gps2˙t
(
åef
 
ªf
, 
time•ec
 
gps_time
, 
uöt32_t
* 
cou¡_us
);

	@libloragw/inc/loragw_hal.h

17 #i‚de‡
_LORAGW_HAL_H


18 
	#_LORAGW_HAL_H


	)

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

26 
	~"c⁄fig.h
"

31 
	#IS_LORA_BW
(
bw
Ë((bw =
BW_125KHZ
Ë|| (bw =
BW_250KHZ
Ë|| (bw =
BW_500KHZ
))

	)

32 
	#IS_LORA_STD_DR
(
dr
Ë((d∏=
DR_LORA_SF7
Ë|| (d∏=
DR_LORA_SF8
Ë|| (d∏=
DR_LORA_SF9
Ë|| (d∏=
DR_LORA_SF10
Ë|| (d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))

	)

33 
	#IS_LORA_MULTI_DR
(
dr
Ë((d∏& ~
DR_LORA_MULTI
Ë=0Ë

	)

34 
	#IS_LORA_CR
(
¸
Ë((¸ =
CR_LORA_4_5
Ë|| (¸ =
CR_LORA_4_6
Ë|| (¸ =
CR_LORA_4_7
Ë|| (¸ =
CR_LORA_4_8
))

	)

36 
	#IS_FSK_BW
(
bw
Ë((bw >1Ë&& (bw <7))

	)

37 
	#IS_FSK_DR
(
dr
Ë((d∏>
DR_FSK_MIN
Ë&& (d∏<
DR_FSK_MAX
))

	)

39 
	#IS_TX_MODE
(
mode
Ë((modê=
IMMEDIATE
Ë|| (modê=
TIMESTAMPED
Ë|| (modê=
ON_GPS
))

	)

45 
	#LGW_HAL_SUCCESS
 0

	)

46 
	#LGW_HAL_ERROR
 -1

	)

47 
	#LGW_LBT_ISSUE
 1

	)

50 
	#LGW_XTAL_FREQU
 32000000

	)

51 
	#LGW_RF_CHAIN_NB
 2

	)

52 
	#LGW_RF_RX_BANDWIDTH
 {1000000, 1000000}

	)

55 
	#IF_UNDEFINED
 0

	)

56 
	#IF_LORA_STD
 0x10

	)

57 
	#IF_LORA_MULTI
 0x11

	)

58 
	#IF_FSK_STD
 0x20

	)

62 
	#LGW_IF_CHAIN_NB
 10

	)

63 
	#LGW_PKT_FIFO_SIZE
 16

	)

64 
	#LGW_DATABUFF_SIZE
 1024

	)

65 
	#LGW_REF_BW
 125000

	)

66 
	#LGW_MULTI_NB
 8

	)

67 
	#LGW_IFMODEM_CONFIG
 {\

68 
IF_LORA_MULTI
, \

69 
IF_LORA_MULTI
, \

70 
IF_LORA_MULTI
, \

71 
IF_LORA_MULTI
, \

72 
IF_LORA_MULTI
, \

73 
IF_LORA_MULTI
, \

74 
IF_LORA_MULTI
, \

75 
IF_LORA_MULTI
, \

76 
IF_LORA_STD
, \

77 
IF_FSK_STD
 }

	)

81 
	#MOD_UNDEFINED
 0

	)

82 
	#MOD_LORA
 0x10

	)

83 
	#MOD_FSK
 0x20

	)

87 
	#BW_UNDEFINED
 0

	)

88 
	#BW_500KHZ
 0x01

	)

89 
	#BW_250KHZ
 0x02

	)

90 
	#BW_125KHZ
 0x03

	)

91 
	#BW_62K5HZ
 0x04

	)

92 
	#BW_31K2HZ
 0x05

	)

93 
	#BW_15K6HZ
 0x06

	)

94 
	#BW_7K8HZ
 0x07

	)

98 
	#DR_UNDEFINED
 0

	)

99 
	#DR_LORA_SF7
 0x02

	)

100 
	#DR_LORA_SF8
 0x04

	)

101 
	#DR_LORA_SF9
 0x08

	)

102 
	#DR_LORA_SF10
 0x10

	)

103 
	#DR_LORA_SF11
 0x20

	)

104 
	#DR_LORA_SF12
 0x40

	)

105 
	#DR_LORA_MULTI
 0x7E

	)

107 
	#DR_FSK_MIN
 500

	)

108 
	#DR_FSK_MAX
 250000

	)

112 
	#CR_UNDEFINED
 0

	)

113 
	#CR_LORA_4_5
 0x01

	)

114 
	#CR_LORA_4_6
 0x02

	)

115 
	#CR_LORA_4_7
 0x03

	)

116 
	#CR_LORA_4_8
 0x04

	)

120 
	#STAT_UNDEFINED
 0x00

	)

121 
	#STAT_NO_CRC
 0x01

	)

122 
	#STAT_CRC_BAD
 0x11

	)

123 
	#STAT_CRC_OK
 0x10

	)

126 
	#IMMEDIATE
 0

	)

127 
	#TIMESTAMPED
 1

	)

128 
	#ON_GPS
 2

	)

134 
	#TX_STATUS
 1

	)

135 
	#RX_STATUS
 2

	)

139 
	#TX_STATUS_UNKNOWN
 0

	)

140 
	#TX_OFF
 1

	)

141 
	#TX_FREE
 2

	)

142 
	#TX_SCHEDULED
 3

	)

143 
	#TX_EMITTING
 4

	)

147 
	#RX_STATUS_UNKNOWN
 0

	)

148 
	#RX_OFF
 1

	)

149 
	#RX_ON
 2

	)

150 
	#RX_SUSPENDED
 3

	)

153 
	#TX_GAIN_LUT_SIZE_MAX
 16

	)

156 
	#LBT_CHANNEL_FREQ_NB
 8

	)

165 
	elgw_ødio_ty≥_e
 {

166 
	mLGW_RADIO_TYPE_NONE
,

167 
	mLGW_RADIO_TYPE_SX1255
,

168 
	mLGW_RADIO_TYPE_SX1257
,

169 
	mLGW_RADIO_TYPE_SX1272
,

170 
	mLGW_RADIO_TYPE_SX1276


177 
	slgw_c⁄f_bﬂrd_s
 {

178 
boﬁ
 
	ml‹aw™_public
;

179 
uöt8_t
 
	m˛k§c
;

186 
	slgw_c⁄f_lbt_ch™_s
 {

187 
uöt32_t
 
	m‰eq_hz
;

188 
uöt16_t
 
	msˇn_time_us
;

195 
	slgw_c⁄f_lbt_s
 {

196 
boﬁ
 
	míabÀ
;

197 
öt8_t
 
	mrssi_èrgë
;

198 
uöt8_t
 
	mnb_ch™√l
;

199 
lgw_c⁄f_lbt_ch™_s
 
	mch™√ls
[
LBT_CHANNEL_FREQ_NB
];

200 
öt8_t
 
	mrssi_off£t
;

207 
	slgw_c⁄f_rxrf_s
 {

208 
boﬁ
 
	míabÀ
;

209 
uöt32_t
 
	m‰eq_hz
;

210 
	mrssi_off£t
;

211 
lgw_ødio_ty≥_e
 
	mty≥
;

212 
boﬁ
 
	mtx_íabÀ
;

213 
uöt32_t
 
	mtx_nŸch_‰eq
;

220 
	slgw_c⁄f_rxif_s
 {

221 
boﬁ
 
	míabÀ
;

222 
uöt8_t
 
	mrf_chaö
;

223 
öt32_t
 
	m‰eq_hz
;

224 
uöt8_t
 
	mb™dwidth
;

225 
uöt32_t
 
	md©¨©e
;

226 
uöt8_t
 
	msync_w‹d_size
;

227 
uöt64_t
 
	msync_w‹d
;

234 
	slgw_pkt_rx_s
 {

235 
uöt32_t
 
	m‰eq_hz
;

236 
uöt8_t
 
	mif_chaö
;

237 
uöt8_t
 
	m°©us
;

238 
uöt32_t
 
	mcou¡_us
;

239 
uöt8_t
 
	mrf_chaö
;

240 
uöt8_t
 
	mmoduœti⁄
;

241 
uöt8_t
 
	mb™dwidth
;

242 
uöt32_t
 
	md©¨©e
;

243 
uöt8_t
 
	mcodî©e
;

244 
	mrssi
;

245 
	m¢r
;

246 
	m¢r_mö
;

247 
	m¢r_max
;

248 
uöt16_t
 
	m¸c
;

249 
uöt16_t
 
	msize
;

250 
uöt8_t
 
	m∑ylﬂd
[256];

257 
	slgw_pkt_tx_s
 {

258 
uöt32_t
 
	m‰eq_hz
;

259 
uöt8_t
 
	mtx_mode
;

260 
uöt32_t
 
	mcou¡_us
;

261 
uöt8_t
 
	mrf_chaö
;

262 
öt8_t
 
	mrf_powî
;

263 
uöt8_t
 
	mmoduœti⁄
;

264 
uöt8_t
 
	mb™dwidth
;

265 
uöt32_t
 
	md©¨©e
;

266 
uöt8_t
 
	mcodî©e
;

267 
boﬁ
 
	mövît_pﬁ
;

268 
uöt8_t
 
	mf_dev
;

269 
uöt16_t
 
	m¥ómbÀ
;

270 
boﬁ
 
	mno_¸c
;

271 
boﬁ
 
	mno_hódî
;

272 
uöt16_t
 
	msize
;

273 
uöt8_t
 
	m∑ylﬂd
[256];

280 
	slgw_tx_gaö_s
 {

281 
uöt8_t
 
	mdig_gaö
;

282 
uöt8_t
 
	m∑_gaö
;

283 
uöt8_t
 
	mdac_gaö
;

284 
uöt8_t
 
	mmix_gaö
;

285 
öt8_t
 
	mrf_powî
;

292 
	slgw_tx_gaö_lut_s
 {

293 
lgw_tx_gaö_s
 
	mlut
[
TX_GAIN_LUT_SIZE_MAX
];

294 
uöt8_t
 
	msize
;

305 
lgw_bﬂrd_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 
c⁄f
);

312 
lgw_lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 
c⁄f
);

320 
lgw_rxrf_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 
c⁄f
);

328 
lgw_rxif_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 
c⁄f
);

335 
lgw_txgaö_£tc⁄f
(
lgw_tx_gaö_lut_s
 *
c⁄f
);

341 
lgw_°¨t
();

347 
lgw_°›
();

355 
lgw_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
);

381 
lgw_£nd
(
lgw_pkt_tx_s
 
pkt_d©a
);

389 
lgw_°©us
(
uöt8_t
 
£À˘
, uöt8_à*
code
);

395 
lgw_ab‹t_tx
();

402 
lgw_gë_åig˙t
(
uöt32_t
* 
åig_˙t_us
);

408 c⁄° * 
lgw_vîsi⁄_öfo
();

415 
uöt32_t
 
lgw_time_⁄_aú
(
lgw_pkt_tx_s
 *
∑ckë
);

	@libloragw/inc/loragw_lbt.h

16 #i‚de‡
_LORAGW_LBT_H


17 
	#_LORAGW_LBT_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

25 
	~"l‹agw_hÆ.h
"

30 
	#LGW_LBT_SUCCESS
 0

	)

31 
	#LGW_LBT_ERROR
 -1

	)

41 
lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 * 
c⁄f
);

47 
lbt_£tup
();

53 
lbt_°¨t
();

61 
lbt_is_ch™√l_‰ì
(
lgw_pkt_tx_s
 * 
pkt_d©a
, 
uöt16_t
 
tx_°¨t_dñay
, 
boﬁ
 * 
tx_Ælowed
);

67 
boﬁ
 
lbt_is_íabÀd
();

	@libloragw/inc/loragw_radio.h

16 #i‚de‡
_LORAGW_RADIO_H


17 
	#_LORAGW_RADIO_H


	)

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

28 
	#LGW_REG_SUCCESS
 0

	)

29 
	#LGW_REG_ERROR
 -1

	)

31 
	#SX125x_32MHz_FRAC
 15625

	)

36 
	elgw_sx127x_rxbw_e
 {

37 
	mLGW_SX127X_RXBW_2K6_HZ
,

38 
	mLGW_SX127X_RXBW_3K1_HZ
,

39 
	mLGW_SX127X_RXBW_3K9_HZ
,

40 
	mLGW_SX127X_RXBW_5K2_HZ
,

41 
	mLGW_SX127X_RXBW_6K3_HZ
,

42 
	mLGW_SX127X_RXBW_7K8_HZ
,

43 
	mLGW_SX127X_RXBW_10K4_HZ
,

44 
	mLGW_SX127X_RXBW_12K5_HZ
,

45 
	mLGW_SX127X_RXBW_15K6_HZ
,

46 
	mLGW_SX127X_RXBW_20K8_HZ
,

47 
	mLGW_SX127X_RXBW_25K_HZ
,

48 
	mLGW_SX127X_RXBW_31K3_HZ
,

49 
	mLGW_SX127X_RXBW_41K7_HZ
,

50 
	mLGW_SX127X_RXBW_50K_HZ
,

51 
	mLGW_SX127X_RXBW_62K5_HZ
,

52 
	mLGW_SX127X_RXBW_83K3_HZ
,

53 
	mLGW_SX127X_RXBW_100K_HZ
,

54 
	mLGW_SX127X_RXBW_125K_HZ
,

55 
	mLGW_SX127X_RXBW_166K7_HZ
,

56 
	mLGW_SX127X_RXBW_200K_HZ
,

57 
	mLGW_SX127X_RXBW_250K_HZ


63 
lgw_£tup_sx125x
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
);

65 
lgw_£tup_sx127x
(
uöt32_t
 
‰equícy
, 
uöt8_t
 
moduœti⁄
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
);

67 
lgw_sx127x_ªg_w
(
uöt8_t
 
addªss
, uöt8_à
ªg_vÆue
);

69 
lgw_sx127x_ªg_r
(
uöt8_t
 
addªss
, uöt8_à*
ªg_vÆue
);

	@libloragw/inc/loragw_reg.h

20 #i‚de‡
_LORAGW_REG_H


21 
	#_LORAGW_REG_H


	)

26 
	~<°döt.h
>

27 
	~<°dboﬁ.h
>

29 
	~"c⁄fig.h
"

34 
	slgw_ªg_s
 {

35 
öt8_t
 
	m∑ge
;

36 
uöt8_t
 
	maddr
;

37 
uöt8_t
 
	moffs
;

38 
boﬁ
 
	msign
;

39 
uöt8_t
 
	mÀng
;

40 
boﬁ
 
	mrd⁄
;

41 
öt32_t
 
	mdÊt
;

47 
ªg_w_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 
ªg_vÆue
);

48 
ªg_r_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 *
ªg_vÆue
);

53 
	#LGW_REG_SUCCESS
 0

	)

54 
	#LGW_REG_ERROR
 -1

	)

63 
	#LGW_PAGE_REG
 0

	)

64 
	#LGW_SOFT_RESET
 1

	)

65 
	#LGW_VERSION
 2

	)

66 
	#LGW_RX_DATA_BUF_ADDR
 3

	)

67 
	#LGW_RX_DATA_BUF_DATA
 4

	)

68 
	#LGW_TX_DATA_BUF_ADDR
 5

	)

69 
	#LGW_TX_DATA_BUF_DATA
 6

	)

70 
	#LGW_CAPTURE_RAM_ADDR
 7

	)

71 
	#LGW_CAPTURE_RAM_DATA
 8

	)

72 
	#LGW_MCU_PROM_ADDR
 9

	)

73 
	#LGW_MCU_PROM_DATA
 10

	)

74 
	#LGW_RX_PACKET_DATA_FIFO_NUM_STORED
 11

	)

75 
	#LGW_RX_PACKET_DATA_FIFO_ADDR_POINTER
 12

	)

76 
	#LGW_RX_PACKET_DATA_FIFO_STATUS
 13

	)

77 
	#LGW_RX_PACKET_DATA_FIFO_PAYLOAD_SIZE
 14

	)

78 
	#LGW_MBWSSF_MODEM_ENABLE
 15

	)

79 
	#LGW_CONCENTRATOR_MODEM_ENABLE
 16

	)

80 
	#LGW_FSK_MODEM_ENABLE
 17

	)

81 
	#LGW_GLOBAL_EN
 18

	)

82 
	#LGW_CLK32M_EN
 19

	)

83 
	#LGW_CLKHS_EN
 20

	)

84 
	#LGW_START_BIST0
 21

	)

85 
	#LGW_START_BIST1
 22

	)

86 
	#LGW_CLEAR_BIST0
 23

	)

87 
	#LGW_CLEAR_BIST1
 24

	)

88 
	#LGW_BIST0_FINISHED
 25

	)

89 
	#LGW_BIST1_FINISHED
 26

	)

90 
	#LGW_MCU_AGC_PROG_RAM_BIST_STATUS
 27

	)

91 
	#LGW_MCU_ARB_PROG_RAM_BIST_STATUS
 28

	)

92 
	#LGW_CAPTURE_RAM_BIST_STATUS
 29

	)

93 
	#LGW_CHAN_FIR_RAM0_BIST_STATUS
 30

	)

94 
	#LGW_CHAN_FIR_RAM1_BIST_STATUS
 31

	)

95 
	#LGW_CORR0_RAM_BIST_STATUS
 32

	)

96 
	#LGW_CORR1_RAM_BIST_STATUS
 33

	)

97 
	#LGW_CORR2_RAM_BIST_STATUS
 34

	)

98 
	#LGW_CORR3_RAM_BIST_STATUS
 35

	)

99 
	#LGW_CORR4_RAM_BIST_STATUS
 36

	)

100 
	#LGW_CORR5_RAM_BIST_STATUS
 37

	)

101 
	#LGW_CORR6_RAM_BIST_STATUS
 38

	)

102 
	#LGW_CORR7_RAM_BIST_STATUS
 39

	)

103 
	#LGW_MODEM0_RAM0_BIST_STATUS
 40

	)

104 
	#LGW_MODEM1_RAM0_BIST_STATUS
 41

	)

105 
	#LGW_MODEM2_RAM0_BIST_STATUS
 42

	)

106 
	#LGW_MODEM3_RAM0_BIST_STATUS
 43

	)

107 
	#LGW_MODEM4_RAM0_BIST_STATUS
 44

	)

108 
	#LGW_MODEM5_RAM0_BIST_STATUS
 45

	)

109 
	#LGW_MODEM6_RAM0_BIST_STATUS
 46

	)

110 
	#LGW_MODEM7_RAM0_BIST_STATUS
 47

	)

111 
	#LGW_MODEM0_RAM1_BIST_STATUS
 48

	)

112 
	#LGW_MODEM1_RAM1_BIST_STATUS
 49

	)

113 
	#LGW_MODEM2_RAM1_BIST_STATUS
 50

	)

114 
	#LGW_MODEM3_RAM1_BIST_STATUS
 51

	)

115 
	#LGW_MODEM4_RAM1_BIST_STATUS
 52

	)

116 
	#LGW_MODEM5_RAM1_BIST_STATUS
 53

	)

117 
	#LGW_MODEM6_RAM1_BIST_STATUS
 54

	)

118 
	#LGW_MODEM7_RAM1_BIST_STATUS
 55

	)

119 
	#LGW_MODEM0_RAM2_BIST_STATUS
 56

	)

120 
	#LGW_MODEM1_RAM2_BIST_STATUS
 57

	)

121 
	#LGW_MODEM2_RAM2_BIST_STATUS
 58

	)

122 
	#LGW_MODEM3_RAM2_BIST_STATUS
 59

	)

123 
	#LGW_MODEM4_RAM2_BIST_STATUS
 60

	)

124 
	#LGW_MODEM5_RAM2_BIST_STATUS
 61

	)

125 
	#LGW_MODEM6_RAM2_BIST_STATUS
 62

	)

126 
	#LGW_MODEM7_RAM2_BIST_STATUS
 63

	)

127 
	#LGW_MODEM_MBWSSF_RAM0_BIST_STATUS
 64

	)

128 
	#LGW_MODEM_MBWSSF_RAM1_BIST_STATUS
 65

	)

129 
	#LGW_MODEM_MBWSSF_RAM2_BIST_STATUS
 66

	)

130 
	#LGW_MCU_AGC_DATA_RAM_BIST0_STATUS
 67

	)

131 
	#LGW_MCU_AGC_DATA_RAM_BIST1_STATUS
 68

	)

132 
	#LGW_MCU_ARB_DATA_RAM_BIST0_STATUS
 69

	)

133 
	#LGW_MCU_ARB_DATA_RAM_BIST1_STATUS
 70

	)

134 
	#LGW_TX_TOP_RAM_BIST0_STATUS
 71

	)

135 
	#LGW_TX_TOP_RAM_BIST1_STATUS
 72

	)

136 
	#LGW_DATA_MNGT_RAM_BIST0_STATUS
 73

	)

137 
	#LGW_DATA_MNGT_RAM_BIST1_STATUS
 74

	)

138 
	#LGW_GPIO_SELECT_INPUT
 75

	)

139 
	#LGW_GPIO_SELECT_OUTPUT
 76

	)

140 
	#LGW_GPIO_MODE
 77

	)

141 
	#LGW_GPIO_PIN_REG_IN
 78

	)

142 
	#LGW_GPIO_PIN_REG_OUT
 79

	)

143 
	#LGW_MCU_AGC_STATUS
 80

	)

144 
	#LGW_MCU_ARB_STATUS
 81

	)

145 
	#LGW_CHIP_ID
 82

	)

146 
	#LGW_EMERGENCY_FORCE_HOST_CTRL
 83

	)

147 
	#LGW_RX_INVERT_IQ
 84

	)

148 
	#LGW_MODEM_INVERT_IQ
 85

	)

149 
	#LGW_MBWSSF_MODEM_INVERT_IQ
 86

	)

150 
	#LGW_RX_EDGE_SELECT
 87

	)

151 
	#LGW_MISC_RADIO_EN
 88

	)

152 
	#LGW_FSK_MODEM_INVERT_IQ
 89

	)

153 
	#LGW_FILTER_GAIN
 90

	)

154 
	#LGW_RADIO_SELECT
 91

	)

155 
	#LGW_IF_FREQ_0
 92

	)

156 
	#LGW_IF_FREQ_1
 93

	)

157 
	#LGW_IF_FREQ_2
 94

	)

158 
	#LGW_IF_FREQ_3
 95

	)

159 
	#LGW_IF_FREQ_4
 96

	)

160 
	#LGW_IF_FREQ_5
 97

	)

161 
	#LGW_IF_FREQ_6
 98

	)

162 
	#LGW_IF_FREQ_7
 99

	)

163 
	#LGW_IF_FREQ_8
 100

	)

164 
	#LGW_IF_FREQ_9
 101

	)

165 
	#LGW_CHANN_OVERRIDE_AGC_GAIN
 102

	)

166 
	#LGW_CHANN_AGC_GAIN
 103

	)

167 
	#LGW_CORR0_DETECT_EN
 104

	)

168 
	#LGW_CORR1_DETECT_EN
 105

	)

169 
	#LGW_CORR2_DETECT_EN
 106

	)

170 
	#LGW_CORR3_DETECT_EN
 107

	)

171 
	#LGW_CORR4_DETECT_EN
 108

	)

172 
	#LGW_CORR5_DETECT_EN
 109

	)

173 
	#LGW_CORR6_DETECT_EN
 110

	)

174 
	#LGW_CORR7_DETECT_EN
 111

	)

175 
	#LGW_CORR_SAME_PEAKS_OPTION_SF6
 112

	)

176 
	#LGW_CORR_SAME_PEAKS_OPTION_SF7
 113

	)

177 
	#LGW_CORR_SAME_PEAKS_OPTION_SF8
 114

	)

178 
	#LGW_CORR_SAME_PEAKS_OPTION_SF9
 115

	)

179 
	#LGW_CORR_SAME_PEAKS_OPTION_SF10
 116

	)

180 
	#LGW_CORR_SAME_PEAKS_OPTION_SF11
 117

	)

181 
	#LGW_CORR_SAME_PEAKS_OPTION_SF12
 118

	)

182 
	#LGW_CORR_SIG_NOISE_RATIO_SF6
 119

	)

183 
	#LGW_CORR_SIG_NOISE_RATIO_SF7
 120

	)

184 
	#LGW_CORR_SIG_NOISE_RATIO_SF8
 121

	)

185 
	#LGW_CORR_SIG_NOISE_RATIO_SF9
 122

	)

186 
	#LGW_CORR_SIG_NOISE_RATIO_SF10
 123

	)

187 
	#LGW_CORR_SIG_NOISE_RATIO_SF11
 124

	)

188 
	#LGW_CORR_SIG_NOISE_RATIO_SF12
 125

	)

189 
	#LGW_CORR_NUM_SAME_PEAK
 126

	)

190 
	#LGW_CORR_MAC_GAIN
 127

	)

191 
	#LGW_ADJUST_MODEM_START_OFFSET_RDX4
 128

	)

192 
	#LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
 129

	)

193 
	#LGW_DBG_CORR_SELECT_SF
 130

	)

194 
	#LGW_DBG_CORR_SELECT_CHANNEL
 131

	)

195 
	#LGW_DBG_DETECT_CPT
 132

	)

196 
	#LGW_DBG_SYMB_CPT
 133

	)

197 
	#LGW_CHIRP_INVERT_RX
 134

	)

198 
	#LGW_DC_NOTCH_EN
 135

	)

199 
	#LGW_IMPLICIT_CRC_EN
 136

	)

200 
	#LGW_IMPLICIT_CODING_RATE
 137

	)

201 
	#LGW_IMPLICIT_PAYLOAD_LENGHT
 138

	)

202 
	#LGW_FREQ_TO_TIME_INVERT
 139

	)

203 
	#LGW_FREQ_TO_TIME_DRIFT
 140

	)

204 
	#LGW_PAYLOAD_FINE_TIMING_GAIN
 141

	)

205 
	#LGW_PREAMBLE_FINE_TIMING_GAIN
 142

	)

206 
	#LGW_TRACKING_INTEGRAL
 143

	)

207 
	#LGW_FRAME_SYNCH_PEAK1_POS
 144

	)

208 
	#LGW_FRAME_SYNCH_PEAK2_POS
 145

	)

209 
	#LGW_PREAMBLE_SYMB1_NB
 146

	)

210 
	#LGW_FRAME_SYNCH_GAIN
 147

	)

211 
	#LGW_SYNCH_DETECT_TH
 148

	)

212 
	#LGW_LLR_SCALE
 149

	)

213 
	#LGW_SNR_AVG_CST
 150

	)

214 
	#LGW_PPM_OFFSET
 151

	)

215 
	#LGW_MAX_PAYLOAD_LEN
 152

	)

216 
	#LGW_ONLY_CRC_EN
 153

	)

217 
	#LGW_ZERO_PAD
 154

	)

218 
	#LGW_DEC_GAIN_OFFSET
 155

	)

219 
	#LGW_CHAN_GAIN_OFFSET
 156

	)

220 
	#LGW_FORCE_HOST_RADIO_CTRL
 157

	)

221 
	#LGW_FORCE_HOST_FE_CTRL
 158

	)

222 
	#LGW_FORCE_DEC_FILTER_GAIN
 159

	)

223 
	#LGW_MCU_RST_0
 160

	)

224 
	#LGW_MCU_RST_1
 161

	)

225 
	#LGW_MCU_SELECT_MUX_0
 162

	)

226 
	#LGW_MCU_SELECT_MUX_1
 163

	)

227 
	#LGW_MCU_CORRUPTION_DETECTED_0
 164

	)

228 
	#LGW_MCU_CORRUPTION_DETECTED_1
 165

	)

229 
	#LGW_MCU_SELECT_EDGE_0
 166

	)

230 
	#LGW_MCU_SELECT_EDGE_1
 167

	)

231 
	#LGW_CHANN_SELECT_RSSI
 168

	)

232 
	#LGW_RSSI_BB_DEFAULT_VALUE
 169

	)

233 
	#LGW_RSSI_DEC_DEFAULT_VALUE
 170

	)

234 
	#LGW_RSSI_CHANN_DEFAULT_VALUE
 171

	)

235 
	#LGW_RSSI_BB_FILTER_ALPHA
 172

	)

236 
	#LGW_RSSI_DEC_FILTER_ALPHA
 173

	)

237 
	#LGW_RSSI_CHANN_FILTER_ALPHA
 174

	)

238 
	#LGW_IQ_MISMATCH_A_AMP_COEFF
 175

	)

239 
	#LGW_IQ_MISMATCH_A_PHI_COEFF
 176

	)

240 
	#LGW_IQ_MISMATCH_B_AMP_COEFF
 177

	)

241 
	#LGW_IQ_MISMATCH_B_SEL_I
 178

	)

242 
	#LGW_IQ_MISMATCH_B_PHI_COEFF
 179

	)

243 
	#LGW_TX_TRIG_IMMEDIATE
 180

	)

244 
	#LGW_TX_TRIG_DELAYED
 181

	)

245 
	#LGW_TX_TRIG_GPS
 182

	)

246 
	#LGW_TX_START_DELAY
 183

	)

247 
	#LGW_TX_FRAME_SYNCH_PEAK1_POS
 184

	)

248 
	#LGW_TX_FRAME_SYNCH_PEAK2_POS
 185

	)

249 
	#LGW_TX_RAMP_DURATION
 186

	)

250 
	#LGW_TX_OFFSET_I
 187

	)

251 
	#LGW_TX_OFFSET_Q
 188

	)

252 
	#LGW_TX_MODE
 189

	)

253 
	#LGW_TX_ZERO_PAD
 190

	)

254 
	#LGW_TX_EDGE_SELECT
 191

	)

255 
	#LGW_TX_EDGE_SELECT_TOP
 192

	)

256 
	#LGW_TX_GAIN
 193

	)

257 
	#LGW_TX_CHIRP_LOW_PASS
 194

	)

258 
	#LGW_TX_FCC_WIDEBAND
 195

	)

259 
	#LGW_TX_SWAP_IQ
 196

	)

260 
	#LGW_MBWSSF_IMPLICIT_HEADER
 197

	)

261 
	#LGW_MBWSSF_IMPLICIT_CRC_EN
 198

	)

262 
	#LGW_MBWSSF_IMPLICIT_CODING_RATE
 199

	)

263 
	#LGW_MBWSSF_IMPLICIT_PAYLOAD_LENGHT
 200

	)

264 
	#LGW_MBWSSF_AGC_FREEZE_ON_DETECT
 201

	)

265 
	#LGW_MBWSSF_FRAME_SYNCH_PEAK1_POS
 202

	)

266 
	#LGW_MBWSSF_FRAME_SYNCH_PEAK2_POS
 203

	)

267 
	#LGW_MBWSSF_PREAMBLE_SYMB1_NB
 204

	)

268 
	#LGW_MBWSSF_FRAME_SYNCH_GAIN
 205

	)

269 
	#LGW_MBWSSF_SYNCH_DETECT_TH
 206

	)

270 
	#LGW_MBWSSF_DETECT_MIN_SINGLE_PEAK
 207

	)

271 
	#LGW_MBWSSF_DETECT_TRIG_SAME_PEAK_NB
 208

	)

272 
	#LGW_MBWSSF_FREQ_TO_TIME_INVERT
 209

	)

273 
	#LGW_MBWSSF_FREQ_TO_TIME_DRIFT
 210

	)

274 
	#LGW_MBWSSF_PPM_CORRECTION
 211

	)

275 
	#LGW_MBWSSF_PAYLOAD_FINE_TIMING_GAIN
 212

	)

276 
	#LGW_MBWSSF_PREAMBLE_FINE_TIMING_GAIN
 213

	)

277 
	#LGW_MBWSSF_TRACKING_INTEGRAL
 214

	)

278 
	#LGW_MBWSSF_ZERO_PAD
 215

	)

279 
	#LGW_MBWSSF_MODEM_BW
 216

	)

280 
	#LGW_MBWSSF_RADIO_SELECT
 217

	)

281 
	#LGW_MBWSSF_RX_CHIRP_INVERT
 218

	)

282 
	#LGW_MBWSSF_LLR_SCALE
 219

	)

283 
	#LGW_MBWSSF_SNR_AVG_CST
 220

	)

284 
	#LGW_MBWSSF_PPM_OFFSET
 221

	)

285 
	#LGW_MBWSSF_RATE_SF
 222

	)

286 
	#LGW_MBWSSF_ONLY_CRC_EN
 223

	)

287 
	#LGW_MBWSSF_MAX_PAYLOAD_LEN
 224

	)

288 
	#LGW_TX_STATUS
 225

	)

289 
	#LGW_FSK_CH_BW_EXPO
 226

	)

290 
	#LGW_FSK_RSSI_LENGTH
 227

	)

291 
	#LGW_FSK_RX_INVERT
 228

	)

292 
	#LGW_FSK_PKT_MODE
 229

	)

293 
	#LGW_FSK_PSIZE
 230

	)

294 
	#LGW_FSK_CRC_EN
 231

	)

295 
	#LGW_FSK_DCFREE_ENC
 232

	)

296 
	#LGW_FSK_CRC_IBM
 233

	)

297 
	#LGW_FSK_ERROR_OSR_TOL
 234

	)

298 
	#LGW_FSK_RADIO_SELECT
 235

	)

299 
	#LGW_FSK_BR_RATIO
 236

	)

300 
	#LGW_FSK_REF_PATTERN_LSB
 237

	)

301 
	#LGW_FSK_REF_PATTERN_MSB
 238

	)

302 
	#LGW_FSK_PKT_LENGTH
 239

	)

303 
	#LGW_FSK_TX_GAUSSIAN_EN
 240

	)

304 
	#LGW_FSK_TX_GAUSSIAN_SELECT_BT
 241

	)

305 
	#LGW_FSK_TX_PATTERN_EN
 242

	)

306 
	#LGW_FSK_TX_PREAMBLE_SEQ
 243

	)

307 
	#LGW_FSK_TX_PSIZE
 244

	)

308 
	#LGW_FSK_NODE_ADRS
 245

	)

309 
	#LGW_FSK_BROADCAST
 246

	)

310 
	#LGW_FSK_AUTO_AFC_ON
 247

	)

311 
	#LGW_FSK_PATTERN_TIMEOUT_CFG
 248

	)

312 
	#LGW_SPI_RADIO_A__DATA
 249

	)

313 
	#LGW_SPI_RADIO_A__DATA_READBACK
 250

	)

314 
	#LGW_SPI_RADIO_A__ADDR
 251

	)

315 
	#LGW_SPI_RADIO_A__CS
 252

	)

316 
	#LGW_SPI_RADIO_B__DATA
 253

	)

317 
	#LGW_SPI_RADIO_B__DATA_READBACK
 254

	)

318 
	#LGW_SPI_RADIO_B__ADDR
 255

	)

319 
	#LGW_SPI_RADIO_B__CS
 256

	)

320 
	#LGW_RADIO_A_EN
 257

	)

321 
	#LGW_RADIO_B_EN
 258

	)

322 
	#LGW_RADIO_RST
 259

	)

323 
	#LGW_LNA_A_EN
 260

	)

324 
	#LGW_PA_A_EN
 261

	)

325 
	#LGW_LNA_B_EN
 262

	)

326 
	#LGW_PA_B_EN
 263

	)

327 
	#LGW_PA_GAIN
 264

	)

328 
	#LGW_LNA_A_CTRL_LUT
 265

	)

329 
	#LGW_PA_A_CTRL_LUT
 266

	)

330 
	#LGW_LNA_B_CTRL_LUT
 267

	)

331 
	#LGW_PA_B_CTRL_LUT
 268

	)

332 
	#LGW_CAPTURE_SOURCE
 269

	)

333 
	#LGW_CAPTURE_START
 270

	)

334 
	#LGW_CAPTURE_FORCE_TRIGGER
 271

	)

335 
	#LGW_CAPTURE_WRAP
 272

	)

336 
	#LGW_CAPTURE_PERIOD
 273

	)

337 
	#LGW_MODEM_STATUS
 274

	)

338 
	#LGW_VALID_HEADER_COUNTER_0
 275

	)

339 
	#LGW_VALID_PACKET_COUNTER_0
 276

	)

340 
	#LGW_VALID_HEADER_COUNTER_MBWSSF
 277

	)

341 
	#LGW_VALID_HEADER_COUNTER_FSK
 278

	)

342 
	#LGW_VALID_PACKET_COUNTER_MBWSSF
 279

	)

343 
	#LGW_VALID_PACKET_COUNTER_FSK
 280

	)

344 
	#LGW_CHANN_RSSI
 281

	)

345 
	#LGW_BB_RSSI
 282

	)

346 
	#LGW_DEC_RSSI
 283

	)

347 
	#LGW_DBG_MCU_DATA
 284

	)

348 
	#LGW_DBG_ARB_MCU_RAM_DATA
 285

	)

349 
	#LGW_DBG_AGC_MCU_RAM_DATA
 286

	)

350 
	#LGW_NEXT_PACKET_CNT
 287

	)

351 
	#LGW_ADDR_CAPTURE_COUNT
 288

	)

352 
	#LGW_TIMESTAMP
 289

	)

353 
	#LGW_DBG_CHANN0_GAIN
 290

	)

354 
	#LGW_DBG_CHANN1_GAIN
 291

	)

355 
	#LGW_DBG_CHANN2_GAIN
 292

	)

356 
	#LGW_DBG_CHANN3_GAIN
 293

	)

357 
	#LGW_DBG_CHANN4_GAIN
 294

	)

358 
	#LGW_DBG_CHANN5_GAIN
 295

	)

359 
	#LGW_DBG_CHANN6_GAIN
 296

	)

360 
	#LGW_DBG_CHANN7_GAIN
 297

	)

361 
	#LGW_DBG_DEC_FILT_GAIN
 298

	)

362 
	#LGW_SPI_DATA_FIFO_PTR
 299

	)

363 
	#LGW_PACKET_DATA_FIFO_PTR
 300

	)

364 
	#LGW_DBG_ARB_MCU_RAM_ADDR
 301

	)

365 
	#LGW_DBG_AGC_MCU_RAM_ADDR
 302

	)

366 
	#LGW_SPI_MASTER_CHIP_SELECT_POLARITY
 303

	)

367 
	#LGW_SPI_MASTER_CPOL
 304

	)

368 
	#LGW_SPI_MASTER_CPHA
 305

	)

369 
	#LGW_SIG_GEN_ANALYSER_MUX_SEL
 306

	)

370 
	#LGW_SIG_GEN_EN
 307

	)

371 
	#LGW_SIG_ANALYSER_EN
 308

	)

372 
	#LGW_SIG_ANALYSER_AVG_LEN
 309

	)

373 
	#LGW_SIG_ANALYSER_PRECISION
 310

	)

374 
	#LGW_SIG_ANALYSER_VALID_OUT
 311

	)

375 
	#LGW_SIG_GEN_FREQ
 312

	)

376 
	#LGW_SIG_ANALYSER_FREQ
 313

	)

377 
	#LGW_SIG_ANALYSER_I_OUT
 314

	)

378 
	#LGW_SIG_ANALYSER_Q_OUT
 315

	)

379 
	#LGW_GPS_EN
 316

	)

380 
	#LGW_GPS_POL
 317

	)

381 
	#LGW_SW_TEST_REG1
 318

	)

382 
	#LGW_SW_TEST_REG2
 319

	)

383 
	#LGW_SW_TEST_REG3
 320

	)

384 
	#LGW_DATA_MNGT_STATUS
 321

	)

385 
	#LGW_DATA_MNGT_CPT_FRAME_ALLOCATED
 322

	)

386 
	#LGW_DATA_MNGT_CPT_FRAME_FINISHED
 323

	)

387 
	#LGW_DATA_MNGT_CPT_FRAME_READEN
 324

	)

388 
	#LGW_TX_TRIG_ALL
 325

	)

390 
	#LGW_TOTALREGS
 326

	)

403 
lgw_c⁄√˘
(
boﬁ
 
•i_⁄ly
, 
uöt32_t
 
tx_nŸch_‰eq
);

409 
lgw_disc⁄√˘
();

415 
lgw_so·_ª£t
();

422 
lgw_ªg_check
(
FILE
 *
f
);

430 
lgw_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
);

438 
lgw_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
);

447 
lgw_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
);

456 
lgw_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
);

	@libloragw/inc/loragw_spi.h

21 #i‚de‡
_LORAGW_SPI_H


22 
	#_LORAGW_SPI_H


	)

27 
	~<°döt.h
>

29 
	~"c⁄fig.h
"

34 
	#LGW_SPI_SUCCESS
 0

	)

35 
	#LGW_SPI_ERROR
 -1

	)

36 
	#LGW_BURST_CHUNK
 1024

	)

38 
	#LGW_SPI_MUX_MODE0
 0x0

	)

39 
	#LGW_SPI_MUX_MODE1
 0x1

	)

41 
	#LGW_SPI_MUX_TARGET_SX1301
 0x0

	)

42 
	#LGW_SPI_MUX_TARGET_FPGA
 0x1

	)

43 
	#LGW_SPI_MUX_TARGET_EEPROM
 0x2

	)

44 
	#LGW_SPI_MUX_TARGET_SX127X
 0x3

	)

55 
lgw_•i_›í
(**
•i_èrgë_±r
);

63 
lgw_•i_˛o£
(*
•i_èrgë
);

72 
lgw_•i_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
);

81 
lgw_•i_r
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
);

91 
lgw_•i_wb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

101 
lgw_•i_rb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
, 
uöt16_t
 
size
);

	@libloragw/inc/loragw_sx125x.h

15 #i‚de‡
__SX125X_REGS_H__


16 
	#__SX125X_REGS_H__


	)

32 
	#SX125x_TX_DAC_CLK_SEL
 1

	)

33 
	#SX125x_TX_DAC_GAIN
 2

	)

34 
	#SX125x_TX_MIX_GAIN
 14

	)

35 
	#SX125x_TX_PLL_BW
 1

	)

36 
	#SX125x_TX_ANA_BW
 0

	)

37 
	#SX125x_TX_DAC_BW
 5

	)

38 
	#SX125x_RX_LNA_GAIN
 1

	)

39 
	#SX125x_RX_BB_GAIN
 12

	)

40 
	#SX125x_LNA_ZIN
 1

	)

41 
	#SX125x_RX_ADC_BW
 7

	)

42 
	#SX125x_RX_ADC_TRIM
 6

	)

43 
	#SX125x_RX_BB_BW
 0

	)

44 
	#SX125x_RX_PLL_BW
 0

	)

45 
	#SX125x_ADC_TEMP
 0

	)

46 
	#SX125x_XOSC_GM_STARTUP
 13

	)

47 
	#SX125x_XOSC_DISABLE
 2

	)

	@libloragw/inc/loragw_sx1272_fsk.h

15 #i‚de‡
_LORAGW_SX1272_REGS_FSK_H


16 
	#_LORAGW_SX1272_REGS_FSK_H


	)

23 
	#SX1272_REG_FIFO
 0x00

	)

25 
	#SX1272_REG_OPMODE
 0x01

	)

26 
	#SX1272_REG_BITRATEMSB
 0x02

	)

27 
	#SX1272_REG_BITRATELSB
 0x03

	)

28 
	#SX1272_REG_FDEVMSB
 0x04

	)

29 
	#SX1272_REG_FDEVLSB
 0x05

	)

30 
	#SX1272_REG_FRFMSB
 0x06

	)

31 
	#SX1272_REG_FRFMID
 0x07

	)

32 
	#SX1272_REG_FRFLSB
 0x08

	)

34 
	#SX1272_REG_PACONFIG
 0x09

	)

35 
	#SX1272_REG_PARAMP
 0x0A

	)

36 
	#SX1272_REG_OCP
 0x0B

	)

38 
	#SX1272_REG_LNA
 0x0C

	)

39 
	#SX1272_REG_RXCONFIG
 0x0D

	)

40 
	#SX1272_REG_RSSICONFIG
 0x0E

	)

41 
	#SX1272_REG_RSSICOLLISION
 0x0F

	)

42 
	#SX1272_REG_RSSITHRESH
 0x10

	)

43 
	#SX1272_REG_RSSIVALUE
 0x11

	)

44 
	#SX1272_REG_RXBW
 0x12

	)

45 
	#SX1272_REG_AFCBW
 0x13

	)

46 
	#SX1272_REG_OOKPEAK
 0x14

	)

47 
	#SX1272_REG_OOKFIX
 0x15

	)

48 
	#SX1272_REG_OOKAVG
 0x16

	)

49 
	#SX1272_REG_RES17
 0x17

	)

50 
	#SX1272_REG_RES18
 0x18

	)

51 
	#SX1272_REG_RES19
 0x19

	)

52 
	#SX1272_REG_AFCFEI
 0x1A

	)

53 
	#SX1272_REG_AFCMSB
 0x1B

	)

54 
	#SX1272_REG_AFCLSB
 0x1C

	)

55 
	#SX1272_REG_FEIMSB
 0x1D

	)

56 
	#SX1272_REG_FEILSB
 0x1E

	)

57 
	#SX1272_REG_PREAMBLEDETECT
 0x1F

	)

58 
	#SX1272_REG_RXTIMEOUT1
 0x20

	)

59 
	#SX1272_REG_RXTIMEOUT2
 0x21

	)

60 
	#SX1272_REG_RXTIMEOUT3
 0x22

	)

61 
	#SX1272_REG_RXDELAY
 0x23

	)

63 
	#SX1272_REG_OSC
 0x24

	)

65 
	#SX1272_REG_PREAMBLEMSB
 0x25

	)

66 
	#SX1272_REG_PREAMBLELSB
 0x26

	)

67 
	#SX1272_REG_SYNCCONFIG
 0x27

	)

68 
	#SX1272_REG_SYNCVALUE1
 0x28

	)

69 
	#SX1272_REG_SYNCVALUE2
 0x29

	)

70 
	#SX1272_REG_SYNCVALUE3
 0x2A

	)

71 
	#SX1272_REG_SYNCVALUE4
 0x2B

	)

72 
	#SX1272_REG_SYNCVALUE5
 0x2C

	)

73 
	#SX1272_REG_SYNCVALUE6
 0x2D

	)

74 
	#SX1272_REG_SYNCVALUE7
 0x2E

	)

75 
	#SX1272_REG_SYNCVALUE8
 0x2F

	)

76 
	#SX1272_REG_PACKETCONFIG1
 0x30

	)

77 
	#SX1272_REG_PACKETCONFIG2
 0x31

	)

78 
	#SX1272_REG_PAYLOADLENGTH
 0x32

	)

79 
	#SX1272_REG_NODEADRS
 0x33

	)

80 
	#SX1272_REG_BROADCASTADRS
 0x34

	)

81 
	#SX1272_REG_FIFOTHRESH
 0x35

	)

83 
	#SX1272_REG_SEQCONFIG1
 0x36

	)

84 
	#SX1272_REG_SEQCONFIG2
 0x37

	)

85 
	#SX1272_REG_TIMERRESOL
 0x38

	)

86 
	#SX1272_REG_TIMER1COEF
 0x39

	)

87 
	#SX1272_REG_TIMER2COEF
 0x3A

	)

89 
	#SX1272_REG_IMAGECAL
 0x3B

	)

90 
	#SX1272_REG_TEMP
 0x3C

	)

91 
	#SX1272_REG_LOWBAT
 0x3D

	)

93 
	#SX1272_REG_IRQFLAGS1
 0x3E

	)

94 
	#SX1272_REG_IRQFLAGS2
 0x3F

	)

96 
	#SX1272_REG_DIOMAPPING1
 0x40

	)

97 
	#SX1272_REG_DIOMAPPING2
 0x41

	)

99 
	#SX1272_REG_VERSION
 0x42

	)

101 
	#SX1272_REG_AGCREF
 0x43

	)

102 
	#SX1272_REG_AGCTHRESH1
 0x44

	)

103 
	#SX1272_REG_AGCTHRESH2
 0x45

	)

104 
	#SX1272_REG_AGCTHRESH3
 0x46

	)

105 
	#SX1272_REG_PLLHOP
 0x4B

	)

106 
	#SX1272_REG_TCXO
 0x58

	)

107 
	#SX1272_REG_PADAC
 0x5A

	)

108 
	#SX1272_REG_PLL
 0x5C

	)

109 
	#SX1272_REG_PLLLOWPN
 0x5E

	)

110 
	#SX1272_REG_FORMERTEMP
 0x6C

	)

111 
	#SX1272_REG_BITRATEFRAC
 0x70

	)

	@libloragw/inc/loragw_sx1272_lora.h

15 #i‚de‡
_LORAGW_SX1272_REGS_LORA_H


16 
	#_LORAGW_SX1272_REGS_LORA_H


	)

23 
	#SX1272_REG_LR_FIFO
 0x00

	)

25 
	#SX1272_REG_LR_OPMODE
 0x01

	)

26 
	#SX1272_REG_LR_FRFMSB
 0x06

	)

27 
	#SX1272_REG_LR_FRFMID
 0x07

	)

28 
	#SX1272_REG_LR_FRFLSB
 0x08

	)

30 
	#SX1272_REG_LR_PACONFIG
 0x09

	)

31 
	#SX1272_REG_LR_PARAMP
 0x0A

	)

32 
	#SX1272_REG_LR_OCP
 0x0B

	)

34 
	#SX1272_REG_LR_LNA
 0x0C

	)

36 
	#SX1272_REG_LR_FIFOADDRPTR
 0x0D

	)

37 
	#SX1272_REG_LR_FIFOTXBASEADDR
 0x0E

	)

38 
	#SX1272_REG_LR_FIFORXBASEADDR
 0x0F

	)

39 
	#SX1272_REG_LR_FIFORXCURRENTADDR
 0x10

	)

40 
	#SX1272_REG_LR_IRQFLAGSMASK
 0x11

	)

41 
	#SX1272_REG_LR_IRQFLAGS
 0x12

	)

42 
	#SX1272_REG_LR_RXNBBYTES
 0x13

	)

43 
	#SX1272_REG_LR_RXHEADERCNTVALUEMSB
 0x14

	)

44 
	#SX1272_REG_LR_RXHEADERCNTVALUELSB
 0x15

	)

45 
	#SX1272_REG_LR_RXPACKETCNTVALUEMSB
 0x16

	)

46 
	#SX1272_REG_LR_RXPACKETCNTVALUELSB
 0x17

	)

47 
	#SX1272_REG_LR_MODEMSTAT
 0x18

	)

48 
	#SX1272_REG_LR_PKTSNRVALUE
 0x19

	)

49 
	#SX1272_REG_LR_PKTRSSIVALUE
 0x1A

	)

50 
	#SX1272_REG_LR_RSSIVALUE
 0x1B

	)

51 
	#SX1272_REG_LR_HOPCHANNEL
 0x1C

	)

52 
	#SX1272_REG_LR_MODEMCONFIG1
 0x1D

	)

53 
	#SX1272_REG_LR_MODEMCONFIG2
 0x1E

	)

54 
	#SX1272_REG_LR_SYMBTIMEOUTLSB
 0x1F

	)

55 
	#SX1272_REG_LR_PREAMBLEMSB
 0x20

	)

56 
	#SX1272_REG_LR_PREAMBLELSB
 0x21

	)

57 
	#SX1272_REG_LR_PAYLOADLENGTH
 0x22

	)

58 
	#SX1272_REG_LR_PAYLOADMAXLENGTH
 0x23

	)

59 
	#SX1272_REG_LR_HOPPERIOD
 0x24

	)

60 
	#SX1272_REG_LR_FIFORXBYTEADDR
 0x25

	)

61 
	#SX1272_REG_LR_FEIMSB
 0x28

	)

62 
	#SX1272_REG_LR_FEIMID
 0x29

	)

63 
	#SX1272_REG_LR_FEILSB
 0x2A

	)

64 
	#SX1272_REG_LR_RSSIWIDEBAND
 0x2C

	)

65 
	#SX1272_REG_LR_DETECTOPTIMIZE
 0x31

	)

66 
	#SX1272_REG_LR_INVERTIQ
 0x33

	)

67 
	#SX1272_REG_LR_DETECTIONTHRESHOLD
 0x37

	)

68 
	#SX1272_REG_LR_SYNCWORD
 0x39

	)

69 
	#SX1272_REG_LR_INVERTIQ2
 0x3B

	)

73 
	#SX1272_REG_LR_DIOMAPPING1
 0x40

	)

74 
	#SX1272_REG_LR_DIOMAPPING2
 0x41

	)

76 
	#SX1272_REG_LR_VERSION
 0x42

	)

78 
	#SX1272_REG_LR_AGCREF
 0x43

	)

79 
	#SX1272_REG_LR_AGCTHRESH1
 0x44

	)

80 
	#SX1272_REG_LR_AGCTHRESH2
 0x45

	)

81 
	#SX1272_REG_LR_AGCTHRESH3
 0x46

	)

82 
	#SX1272_REG_LR_PLLHOP
 0x4B

	)

83 
	#SX1272_REG_LR_TCXO
 0x58

	)

84 
	#SX1272_REG_LR_PADAC
 0x5A

	)

85 
	#SX1272_REG_LR_PLL
 0x5C

	)

86 
	#SX1272_REG_LR_PLLLOWPN
 0x5E

	)

87 
	#SX1272_REG_LR_FORMERTEMP
 0x6C

	)

	@libloragw/inc/loragw_sx1276_fsk.h

15 #i‚de‡
_LORAGW_SX1276_REGS_FSK_H


16 
	#_LORAGW_SX1276_REGS_FSK_H


	)

23 
	#SX1276_REG_FIFO
 0x00

	)

25 
	#SX1276_REG_OPMODE
 0x01

	)

26 
	#SX1276_REG_BITRATEMSB
 0x02

	)

27 
	#SX1276_REG_BITRATELSB
 0x03

	)

28 
	#SX1276_REG_FDEVMSB
 0x04

	)

29 
	#SX1276_REG_FDEVLSB
 0x05

	)

30 
	#SX1276_REG_FRFMSB
 0x06

	)

31 
	#SX1276_REG_FRFMID
 0x07

	)

32 
	#SX1276_REG_FRFLSB
 0x08

	)

34 
	#SX1276_REG_PACONFIG
 0x09

	)

35 
	#SX1276_REG_PARAMP
 0x0A

	)

36 
	#SX1276_REG_OCP
 0x0B

	)

38 
	#SX1276_REG_LNA
 0x0C

	)

39 
	#SX1276_REG_RXCONFIG
 0x0D

	)

40 
	#SX1276_REG_RSSICONFIG
 0x0E

	)

41 
	#SX1276_REG_RSSICOLLISION
 0x0F

	)

42 
	#SX1276_REG_RSSITHRESH
 0x10

	)

43 
	#SX1276_REG_RSSIVALUE
 0x11

	)

44 
	#SX1276_REG_RXBW
 0x12

	)

45 
	#SX1276_REG_AFCBW
 0x13

	)

46 
	#SX1276_REG_OOKPEAK
 0x14

	)

47 
	#SX1276_REG_OOKFIX
 0x15

	)

48 
	#SX1276_REG_OOKAVG
 0x16

	)

49 
	#SX1276_REG_RES17
 0x17

	)

50 
	#SX1276_REG_RES18
 0x18

	)

51 
	#SX1276_REG_RES19
 0x19

	)

52 
	#SX1276_REG_AFCFEI
 0x1A

	)

53 
	#SX1276_REG_AFCMSB
 0x1B

	)

54 
	#SX1276_REG_AFCLSB
 0x1C

	)

55 
	#SX1276_REG_FEIMSB
 0x1D

	)

56 
	#SX1276_REG_FEILSB
 0x1E

	)

57 
	#SX1276_REG_PREAMBLEDETECT
 0x1F

	)

58 
	#SX1276_REG_RXTIMEOUT1
 0x20

	)

59 
	#SX1276_REG_RXTIMEOUT2
 0x21

	)

60 
	#SX1276_REG_RXTIMEOUT3
 0x22

	)

61 
	#SX1276_REG_RXDELAY
 0x23

	)

63 
	#SX1276_REG_OSC
 0x24

	)

65 
	#SX1276_REG_PREAMBLEMSB
 0x25

	)

66 
	#SX1276_REG_PREAMBLELSB
 0x26

	)

67 
	#SX1276_REG_SYNCCONFIG
 0x27

	)

68 
	#SX1276_REG_SYNCVALUE1
 0x28

	)

69 
	#SX1276_REG_SYNCVALUE2
 0x29

	)

70 
	#SX1276_REG_SYNCVALUE3
 0x2A

	)

71 
	#SX1276_REG_SYNCVALUE4
 0x2B

	)

72 
	#SX1276_REG_SYNCVALUE5
 0x2C

	)

73 
	#SX1276_REG_SYNCVALUE6
 0x2D

	)

74 
	#SX1276_REG_SYNCVALUE7
 0x2E

	)

75 
	#SX1276_REG_SYNCVALUE8
 0x2F

	)

76 
	#SX1276_REG_PACKETCONFIG1
 0x30

	)

77 
	#SX1276_REG_PACKETCONFIG2
 0x31

	)

78 
	#SX1276_REG_PAYLOADLENGTH
 0x32

	)

79 
	#SX1276_REG_NODEADRS
 0x33

	)

80 
	#SX1276_REG_BROADCASTADRS
 0x34

	)

81 
	#SX1276_REG_FIFOTHRESH
 0x35

	)

83 
	#SX1276_REG_SEQCONFIG1
 0x36

	)

84 
	#SX1276_REG_SEQCONFIG2
 0x37

	)

85 
	#SX1276_REG_TIMERRESOL
 0x38

	)

86 
	#SX1276_REG_TIMER1COEF
 0x39

	)

87 
	#SX1276_REG_TIMER2COEF
 0x3A

	)

89 
	#SX1276_REG_IMAGECAL
 0x3B

	)

90 
	#SX1276_REG_TEMP
 0x3C

	)

91 
	#SX1276_REG_LOWBAT
 0x3D

	)

93 
	#SX1276_REG_IRQFLAGS1
 0x3E

	)

94 
	#SX1276_REG_IRQFLAGS2
 0x3F

	)

96 
	#SX1276_REG_DIOMAPPING1
 0x40

	)

97 
	#SX1276_REG_DIOMAPPING2
 0x41

	)

99 
	#SX1276_REG_VERSION
 0x42

	)

101 
	#SX1276_REG_PLLHOP
 0x44

	)

102 
	#SX1276_REG_TCXO
 0x4B

	)

103 
	#SX1276_REG_PADAC
 0x4D

	)

104 
	#SX1276_REG_FORMERTEMP
 0x5B

	)

105 
	#SX1276_REG_BITRATEFRAC
 0x5D

	)

106 
	#SX1276_REG_AGCREF
 0x61

	)

107 
	#SX1276_REG_AGCTHRESH1
 0x62

	)

108 
	#SX1276_REG_AGCTHRESH2
 0x63

	)

109 
	#SX1276_REG_AGCTHRESH3
 0x64

	)

110 
	#SX1276_REG_PLL
 0x70

	)

	@libloragw/inc/loragw_sx1276_lora.h

15 #i‚de‡
_LORAGW_SX1276_REGS_LORA_H


16 
	#_LORAGW_SX1276_REGS_LORA_H


	)

23 
	#SX1276_REG_LR_FIFO
 0x00

	)

25 
	#SX1276_REG_LR_OPMODE
 0x01

	)

26 
	#SX1276_REG_LR_FRFMSB
 0x06

	)

27 
	#SX1276_REG_LR_FRFMID
 0x07

	)

28 
	#SX1276_REG_LR_FRFLSB
 0x08

	)

30 
	#SX1276_REG_LR_PACONFIG
 0x09

	)

31 
	#SX1276_REG_LR_PARAMP
 0x0A

	)

32 
	#SX1276_REG_LR_OCP
 0x0B

	)

34 
	#SX1276_REG_LR_LNA
 0x0C

	)

36 
	#SX1276_REG_LR_FIFOADDRPTR
 0x0D

	)

37 
	#SX1276_REG_LR_FIFOTXBASEADDR
 0x0E

	)

38 
	#SX1276_REG_LR_FIFORXBASEADDR
 0x0F

	)

39 
	#SX1276_REG_LR_FIFORXCURRENTADDR
 0x10

	)

40 
	#SX1276_REG_LR_IRQFLAGSMASK
 0x11

	)

41 
	#SX1276_REG_LR_IRQFLAGS
 0x12

	)

42 
	#SX1276_REG_LR_RXNBBYTES
 0x13

	)

43 
	#SX1276_REG_LR_RXHEADERCNTVALUEMSB
 0x14

	)

44 
	#SX1276_REG_LR_RXHEADERCNTVALUELSB
 0x15

	)

45 
	#SX1276_REG_LR_RXPACKETCNTVALUEMSB
 0x16

	)

46 
	#SX1276_REG_LR_RXPACKETCNTVALUELSB
 0x17

	)

47 
	#SX1276_REG_LR_MODEMSTAT
 0x18

	)

48 
	#SX1276_REG_LR_PKTSNRVALUE
 0x19

	)

49 
	#SX1276_REG_LR_PKTRSSIVALUE
 0x1A

	)

50 
	#SX1276_REG_LR_RSSIVALUE
 0x1B

	)

51 
	#SX1276_REG_LR_HOPCHANNEL
 0x1C

	)

52 
	#SX1276_REG_LR_MODEMCONFIG1
 0x1D

	)

53 
	#SX1276_REG_LR_MODEMCONFIG2
 0x1E

	)

54 
	#SX1276_REG_LR_SYMBTIMEOUTLSB
 0x1F

	)

55 
	#SX1276_REG_LR_PREAMBLEMSB
 0x20

	)

56 
	#SX1276_REG_LR_PREAMBLELSB
 0x21

	)

57 
	#SX1276_REG_LR_PAYLOADLENGTH
 0x22

	)

58 
	#SX1276_REG_LR_PAYLOADMAXLENGTH
 0x23

	)

59 
	#SX1276_REG_LR_HOPPERIOD
 0x24

	)

60 
	#SX1276_REG_LR_FIFORXBYTEADDR
 0x25

	)

61 
	#SX1276_REG_LR_MODEMCONFIG3
 0x26

	)

62 
	#SX1276_REG_LR_FEIMSB
 0x28

	)

63 
	#SX1276_REG_LR_FEIMID
 0x29

	)

64 
	#SX1276_REG_LR_FEILSB
 0x2A

	)

65 
	#SX1276_REG_LR_RSSIWIDEBAND
 0x2C

	)

66 
	#SX1276_REG_LR_TEST2F
 0x2F

	)

67 
	#SX1276_REG_LR_TEST30
 0x30

	)

68 
	#SX1276_REG_LR_DETECTOPTIMIZE
 0x31

	)

69 
	#SX1276_REG_LR_INVERTIQ
 0x33

	)

70 
	#SX1276_REG_LR_TEST36
 0x36

	)

71 
	#SX1276_REG_LR_DETECTIONTHRESHOLD
 0x37

	)

72 
	#SX1276_REG_LR_SYNCWORD
 0x39

	)

73 
	#SX1276_REG_LR_TEST3A
 0x3A

	)

74 
	#SX1276_REG_LR_INVERTIQ2
 0x3B

	)

78 
	#SX1276_REG_LR_DIOMAPPING1
 0x40

	)

79 
	#SX1276_REG_LR_DIOMAPPING2
 0x41

	)

81 
	#SX1276_REG_LR_VERSION
 0x42

	)

83 
	#SX1276_REG_LR_PLLHOP
 0x44

	)

84 
	#SX1276_REG_LR_TCXO
 0x4B

	)

85 
	#SX1276_REG_LR_PADAC
 0x4D

	)

86 
	#SX1276_REG_LR_FORMERTEMP
 0x5B

	)

87 
	#SX1276_REG_LR_BITRATEFRAC
 0x5D

	)

88 
	#SX1276_REG_LR_AGCREF
 0x61

	)

89 
	#SX1276_REG_LR_AGCTHRESH1
 0x62

	)

90 
	#SX1276_REG_LR_AGCTHRESH2
 0x63

	)

91 
	#SX1276_REG_LR_AGCTHRESH3
 0x64

	)

92 
	#SX1276_REG_LR_PLL
 0x70

	)

	@libloragw/src/loragw_aux.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°dio.h
>

28 
	~<time.h
>

33 #i‡
DEBUG_AUX
 == 1

34 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

35 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

37 
	#DEBUG_MSG
(
°r
)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

45 
	$waô_ms
(
a
) {

46 
time•ec
 
dly
;

47 
time•ec
 
ªm
;

49 
dly
.
tv_£c
 = 
a
 / 1000;

50 
dly
.
tv_n£c
 = (()
a
 % 1000) * 1000000;

52 
	`DEBUG_PRINTF
("NOTE dly: %ld se¯%ldÇs\n", 
dly
.
tv_£c
, dly.
tv_n£c
);

54 if((
dly
.
tv_£c
 > 0Ë|| ((dly.tv_£¯=0Ë&& (dly.
tv_n£c
 > 100000))) {

55 
	`˛ock_«no¶ìp
(
CLOCK_MONOTONIC
, 0, &
dly
, &
ªm
);

56 
	`DEBUG_PRINTF
("NOTEÑemaö: %ld se¯%ldÇs\n", 
ªm
.
tv_£c
,Ñem.
tv_n£c
);

59 
	}
}

	@libloragw/src/loragw_fpga.c

22 
	~<°döt.h
>

23 
	~<°dboﬁ.h
>

24 
	~<°dio.h
>

26 
	~"l‹agw_•i.h
"

27 
	~"l‹agw_aux.h
"

28 
	~"l‹agw_hÆ.h
"

29 
	~"l‹agw_ªg.h
"

30 
	~"l‹agw_Âga.h
"

35 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

36 #i‡
DEBUG_REG
 == 1

37 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

38 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

39 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

41 
	#DEBUG_MSG
(
°r
)

	)

42 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

43 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

55 c⁄° 
lgw_ªg_s
 
	gÂga_ªgs
[
LGW_FPGA_TOTALREGS
] = {

99 *
lgw_•i_èrgë
;

100 
uöt8_t
 
lgw_•i_mux_mode
;

104 
boﬁ
 
	gtx_nŸch_suµ‹t
 = 
Ál£
;

105 
uöt8_t
 
	gtx_nŸch_off£t
;

116 
	$lgw_Âga_gë_tx_nŸch_dñay
() {

117 
tx_nŸch_dñay
;

119 i‡(
tx_nŸch_suµ‹t
 =
Ál£
) {

124 
tx_nŸch_dñay
 = (31.25 * ((64 + 
tx_nŸch_off£t
) / 2)) / 1E3;

126  
tx_nŸch_dñay
;

127 
	}
}

131 
	$lgw_Âga_c⁄figuª
(
uöt32_t
 
tx_nŸch_‰eq
) {

132 
x
;

133 
öt32_t
 
vÆ
;

134 
boﬁ
 
•e˘øl_sˇn_suµ‹t
, 
lbt_suµ‹t
;

137 i‡((
tx_nŸch_‰eq
 < 
LGW_MIN_NOTCH_FREQ
Ë|| (tx_nŸch_‰eq > 
LGW_MAX_NOTCH_FREQ
)) {

138 
	`DEBUG_PRINTF
("WARNING: FPGA TXÇŸch fªquícy i†ouào‡øngê(%u - [%u..%u]), sëtög iàtÿdeÁu… (%u)\n", 
tx_nŸch_‰eq
, 
LGW_MIN_NOTCH_FREQ
, 
LGW_MAX_NOTCH_FREQ
, 
LGW_DEFAULT_NOTCH_FREQ
);

139 
tx_nŸch_‰eq
 = 
LGW_DEFAULT_NOTCH_FREQ
;

143 
	`¥ötf
("INFO: FPGA supported features:");

144 
	`lgw_Âga_ªg_r
(
LGW_FPGA_FEATURE
, &
vÆ
);

145 
tx_nŸch_suµ‹t
 = 
	`TAKE_N_BITS_FROM
((
uöt8_t
)
vÆ
, 0, 1);

146 i‡(
tx_nŸch_suµ‹t
 =
åue
) {

147 
	`¥ötf
(" [TX filter] ");

149 
•e˘øl_sˇn_suµ‹t
 = 
	`TAKE_N_BITS_FROM
((
uöt8_t
)
vÆ
, 1, 1);

150 i‡(
•e˘øl_sˇn_suµ‹t
 =
åue
) {

151 
	`¥ötf
(" [Spectral Scan] ");

153 
lbt_suµ‹t
 = 
	`TAKE_N_BITS_FROM
((
uöt8_t
)
vÆ
, 2, 1);

154 i‡(
lbt_suµ‹t
 =
åue
) {

155 
	`¥ötf
(" [LBT] ");

157 
	`¥ötf
("\n");

159 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_INPUT_SYNC_I
, 1);

160 
x
 |
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_INPUT_SYNC_Q
, 1);

161 
x
 |
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_OUTPUT_SYNC
, 0);

162 i‡(
x
 !
LGW_REG_SUCCESS
) {

163 
	`DEBUG_MSG
("ERROR: FailedÅo configure FPGA TX synchro\n");

164  
LGW_REG_ERROR
;

168 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_INVERT_IQ
, 1);

169 i‡(
x
 !
LGW_REG_SUCCESS
) {

170 
	`DEBUG_MSG
("ERROR: FailedÅo configure FPGAÖolarity\n");

171  
LGW_REG_ERROR
;

175 i‡(
tx_nŸch_suµ‹t
 =
åue
) {

176 
tx_nŸch_off£t
 = (32E6 / (2*
tx_nŸch_‰eq
)) - 64;

177 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_NOTCH_FREQ_OFFSET
, (
öt32_t
)
tx_nŸch_off£t
);

178 i‡(
x
 !
LGW_REG_SUCCESS
) {

179 
	`DEBUG_MSG
("ERROR: FailedÅo configure FPGA TXÇotch filter\n");

180  
LGW_REG_ERROR
;

184 
x
 = 
	`lgw_Âga_ªg_r
(
LGW_FPGA_NOTCH_FREQ_OFFSET
, &
vÆ
);

185 i‡(
x
 !
LGW_REG_SUCCESS
) {

186 
	`DEBUG_MSG
("ERROR: FailedÅoÑead FPGA TXÇotch frequency\n");

187  
LGW_REG_ERROR
;

189 i‡(
vÆ
 !
tx_nŸch_off£t
) {

190 
	`DEBUG_MSG
("WARNING: TXÇotch filter frequency isÇotÖrogrammable (check your FPGA image)\n");

192 
	`DEBUG_PRINTF
("INFO: TXÇŸch fûã∏‰equícy sëÅÿ%u (%i)\n", 
tx_nŸch_‰eq
, 
tx_nŸch_off£t
);

196  
LGW_REG_SUCCESS
;

197 
	}
}

202 
	$lgw_Âga_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
) {

203 
•i_°©
 = 
LGW_SPI_SUCCESS
;

204 
lgw_ªg_s
 
r
;

207 i‡(
ªgi°î_id
 >
LGW_FPGA_TOTALREGS
) {

208 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

209  
LGW_REG_ERROR
;

213 i‡(
lgw_•i_èrgë
 =
NULL
) {

214 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

215  
LGW_REG_ERROR
;

219 
r
 = 
Âga_ªgs
[
ªgi°î_id
];

222 i‡(
r
.
rd⁄
 == 1){

223 
	`DEBUG_MSG
("ERROR: TRYING TO WRITE A READ-ONLY REGISTER\n");

224  
LGW_REG_ERROR
;

227 
•i_°©
 +
	`ªg_w_Æign32
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_MODE1
, 
LGW_SPI_MUX_TARGET_FPGA
, 
r
, 
ªg_vÆue
);

229 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

230 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER WRITE\n");

231  
LGW_REG_ERROR
;

233  
LGW_REG_SUCCESS
;

235 
	}
}

240 
	$lgw_Âga_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
) {

241 
•i_°©
 = 
LGW_SPI_SUCCESS
;

242 
lgw_ªg_s
 
r
;

245 
	`CHECK_NULL
(
ªg_vÆue
);

246 i‡(
ªgi°î_id
 >
LGW_FPGA_TOTALREGS
) {

247 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

248  
LGW_REG_ERROR
;

252 i‡(
lgw_•i_èrgë
 =
NULL
) {

253 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

254  
LGW_REG_ERROR
;

258 
r
 = 
Âga_ªgs
[
ªgi°î_id
];

260 
•i_°©
 +
	`ªg_r_Æign32
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_MODE1
, 
LGW_SPI_MUX_TARGET_FPGA
, 
r
, 
ªg_vÆue
);

262 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

263 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER WRITE\n");

264  
LGW_REG_ERROR
;

266  
LGW_REG_SUCCESS
;

268 
	}
}

273 
	$lgw_Âga_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

274 
•i_°©
 = 
LGW_SPI_SUCCESS
;

275 
lgw_ªg_s
 
r
;

278 
	`CHECK_NULL
(
d©a
);

279 i‡(
size
 == 0) {

280 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

281  
LGW_REG_ERROR
;

283 i‡(
ªgi°î_id
 >
LGW_FPGA_TOTALREGS
) {

284 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

285  
LGW_REG_ERROR
;

289 i‡(
lgw_•i_èrgë
 =
NULL
) {

290 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

291  
LGW_REG_ERROR
;

295 
r
 = 
Âga_ªgs
[
ªgi°î_id
];

298 i‡(
r
.
rd⁄
 == 1){

299 
	`DEBUG_MSG
("ERROR: TRYING TO BURST WRITE A READ-ONLY REGISTER\n");

300  
LGW_REG_ERROR
;

304 
•i_°©
 +
	`lgw_•i_wb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_MODE1
, 
LGW_SPI_MUX_TARGET_FPGA
, 
r
.
addr
, 
d©a
, 
size
);

306 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

307 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST WRITE\n");

308  
LGW_REG_ERROR
;

310  
LGW_REG_SUCCESS
;

312 
	}
}

317 
	$lgw_Âga_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

318 
•i_°©
 = 
LGW_SPI_SUCCESS
;

319 
lgw_ªg_s
 
r
;

322 
	`CHECK_NULL
(
d©a
);

323 i‡(
size
 == 0) {

324 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

325  
LGW_REG_ERROR
;

327 i‡(
ªgi°î_id
 >
LGW_FPGA_TOTALREGS
) {

328 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

329  
LGW_REG_ERROR
;

333 i‡(
lgw_•i_èrgë
 =
NULL
) {

334 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

335  
LGW_REG_ERROR
;

339 
r
 = 
Âga_ªgs
[
ªgi°î_id
];

342 
•i_°©
 +
	`lgw_•i_rb
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_MODE1
, 
LGW_SPI_MUX_TARGET_FPGA
, 
r
.
addr
, 
d©a
, 
size
);

344 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

345 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST READ\n");

346  
LGW_REG_ERROR
;

348  
LGW_REG_SUCCESS
;

350 
	}
}

	@libloragw/src/loragw_gps.c

22 
	#_GNU_SOURCE


	)

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

28 
	~<time.h
>

29 
	~<f˙é.h
>

30 
	~<ãrmios.h
>

31 
	~<m©h.h
>

33 
	~<°dlib.h
>

35 
	~"l‹agw_gps.h
"

40 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

41 #i‡
DEBUG_GPS
 == 1

42 
	#DEBUG_MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgs)

	)

43 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

44 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_GPS_ERROR
;}

	)

46 
	#DEBUG_MSG
(
¨gs
...)

	)

47 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_GPS_ERROR
;}

	)

50 
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "@ %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

55 
	#TS_CPS
 1E6

	)

56 
	#PLUS_10PPM
 1.00001

	)

57 
	#MINUS_10PPM
 0.99999

	)

58 
	#DEFAULT_BAUDRATE
 
B9600


	)

60 
	#UBX_MSG_NAVTIMEGPS_LEN
 16

	)

67 
	ggps_yó
 = 0;

68 
	ggps_m⁄
 = 0;

69 
	ggps_day
 = 0;

70 
	ggps_hou
 = 0;

71 
	ggps_mö
 = 0;

72 
	ggps_£c
 = 0;

73 
	ggps_‰a
 = 0.0;

74 
boﬁ
 
	ggps_time_ok
 = 
Ál£
;

75 
öt16_t
 
	ggps_wìk
 = 0;

76 
uöt32_t
 
	ggps_iTOW
 = 0;

77 
öt32_t
 
	ggps_fTOW
 = 0;

79 
	ggps_dœ
 = 0;

80 
	ggps_mœ
 = 0.0;

81 
	ggps_ﬁa
 = 0;

82 
	ggps_dlo
 = 0;

83 
	ggps_mlo
 = 0.0;

84 
	ggps_ﬁo
 = 0;

85 
	ggps_Æt
 = 0;

86 
boﬁ
 
	ggps_pos_ok
 = 
Ál£
;

88 
	ggps_mod
 = 'N';

89 
	ggps_ßt
 = 0;

91 
ãrmios
 
	gây›t_ª°‹e
;

96 
nmó_checksum
(c⁄° *
nmó_°rög
, 
buff_size
, *
checksum
);

98 
nibbÀ_to_hexch¨
(
uöt8_t
 
a
);

100 
boﬁ
 
vÆid©e_nmó_checksum
(c⁄° *
£rül_buff
, 
buff_size
);

102 
boﬁ
 
m©ch_œbñ
(c⁄° *
s
, *
œbñ
, 
size
, 
wûdˇrd
);

104 
°r_ch›
(*
s
, 
buff_size
, 
£∑øt‹
, *
idx_¨y
, 
max_idx
);

116 
	$nmó_checksum
(c⁄° *
nmó_°rög
, 
buff_size
, *
checksum
) {

117 
i
 = 0;

118 
uöt8_t
 
check_num
 = 0;

121 i‡((
nmó_°rög
 =
NULL
Ë|| (
checksum
 =NULLË|| (
buff_size
 <= 1)) {

122 
	`DEBUG_MSG
("InvalidÖarameters forÇmea_checksum\n");

127 i‡(
nmó_°rög
[
i
] == '$') {

128 
i
 += 1;

132 
nmó_°rög
[
i
] != '*') {

133 
check_num
 ^
nmó_°rög
[
i
];

134 
i
 += 1;

135 i‡(
i
 >
buff_size
) {

136 
	`DEBUG_MSG
("MaximumÜengthÑeached forÇmea_checksum\n");

142 
checksum
[0] = 
	`nibbÀ_to_hexch¨
(
check_num
 / 16);

143 
checksum
[1] = 
	`nibbÀ_to_hexch¨
(
check_num
 % 16);

145  
i
 + 1;

146 
	}
}

150 
	$nibbÀ_to_hexch¨
(
uöt8_t
 
a
) {

151 i‡(
a
 < 10) {

152  '0' + 
a
;

153 } i‡(
a
 < 16) {

154  'A' + (
a
-10);

158 
	}
}

167 
boﬁ
 
	$vÆid©e_nmó_checksum
(c⁄° *
£rül_buff
, 
buff_size
) {

168 
checksum_ödex
;

169 
checksum
[2];

171 
checksum_ödex
 = 
	`nmó_checksum
(
£rül_buff
, 
buff_size
, 
checksum
);

174 i‡(
checksum_ödex
 < 0) {

175 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO PARSE NMEA SENTENCE\n");

176  
Ál£
;

180 i‡(
checksum_ödex
 >(
buff_size
 - 2)) {

181 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO READ NMEA SENTENCE CHECKSUM\n");

182  
Ál£
;

186 i‡((
£rül_buff
[
checksum_ödex
] =
checksum
[0]) && (serial_buff[checksum_index+1] == checksum[1])) {

187  
åue
;

189 
	`DEBUG_MSG
("ERROR: NMEA CHECKSUM %c%¯DOESN'T MATCH VERIFICATION CHECKSUM %c%c\n", 
£rül_buff
[
checksum_ödex
], sîül_buff[checksum_ödex+1], 
checksum
[0], checksum[1]);

190  
Ál£
;

192 
	}
}

200 
boﬁ
 
	$m©ch_œbñ
(c⁄° *
s
, *
œbñ
, 
size
, 
wûdˇrd
) {

201 
i
;

203 
i
=0; i < 
size
; i++) {

204 i‡(
œbñ
[
i
] =
wûdˇrd
) ;

205 i‡(
œbñ
[
i
] !
s
[i]Ë 
Ál£
;

207  
åue
;

208 
	}
}

221 
	$°r_ch›
(*
s
, 
buff_size
, 
£∑øt‹
, *
idx_¨y
, 
max_idx
) {

222 
i
 = 0;

223 
j
 = 0;

225 i‡((
s
 =
NULL
Ë|| (
buff_size
 < 0Ë|| (
£∑øt‹
 =0Ë|| (
idx_¨y
 =NULLË|| (
max_idx
 < 0)) {

229 i‡((
buff_size
 =0Ë|| (
max_idx
 == 0)) {

233 
s
[
buff_size
 - 1] = 0;

234 
idx_¨y
[
j
] = 0;

235 
j
 += 1;

237 
s
[
i
] != 0) {

238 i‡(
s
[
i
] =
£∑øt‹
) {

239 
s
[
i
] = 0;

240 i‡(
j
 >
max_idx
) {

241  
j
;

243 
idx_¨y
[
j
] = 
i
+1;

244 ++
j
;

246 ++
i
;

248  
j
;

249 
	}
}

254 
	$lgw_gps_íabÀ
(*
ây_∑th
, *
gps_Ámûy
, 
•ìd_t
 
èrgë_bøã
, *
fd_±r
) {

255 
i
;

256 
ãrmios
 
ây›t
;

257 
gps_ây_dev
;

258 
uöt8_t
 
ubx_cmd_timegps
[
UBX_MSG_NAVTIMEGPS_LEN
] = {

264 
ssize_t
 
num_wrôãn
;

267 
	`CHECK_NULL
(
ây_∑th
);

268 
	`CHECK_NULL
(
fd_±r
);

271 
gps_ây_dev
 = 
	`›í
(
ây_∑th
, 
O_RDWR
 | 
O_NOCTTY
);

272 i‡(
gps_ây_dev
 <= 0) {

273 
	`DEBUG_MSG
("ERROR: TTY PORT FAIL TO OPEN, CHECK PATH AND ACCESS RIGHTS\n");

274  
LGW_GPS_ERROR
;

276 *
fd_±r
 = 
gps_ây_dev
;

279 i‡(
gps_Ámûy
 =
NULL
) {

280 
	`DEBUG_MSG
("WARNING:Åhis version of GPS module mayÇot be supported\n");

281 } i‡(
	`°∫cmp
(
gps_Ámûy
, "ubx7", 4) != 0) {

287 
	`DEBUG_MSG
("WARNING:Åhis version of GPS module mayÇot be supported\n");

291 i‡(
èrgë_bøã
 != 0) {

292 
	`DEBUG_MSG
("WARNING:Åarget_brateÖarameter ignored forÇow\n");

296 
i
 = 
	`tcgë©å
(
gps_ây_dev
, &
ây›t
);

297 i‡(
i
 != 0) {

298 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO GET TTY PORT CONFIGURATION\n");

299  
LGW_GPS_ERROR
;

303 
	`mem˝y
(&
ây›t_ª°‹e
, &
ây›t
, Åtyopt);

306 
	`cf£ti•ìd
(&
ây›t
, 
DEFAULT_BAUDRATE
);

307 
	`cf£to•ìd
(&
ây›t
, 
DEFAULT_BAUDRATE
);

317 
ây›t
.
c_cÊag
 |
CLOCAL
;

318 
ây›t
.
c_cÊag
 |
CREAD
;

319 
ây›t
.
c_cÊag
 |
CS8
;

320 
ây›t
.
c_cÊag
 &~
PARENB
;

321 
ây›t
.
c_cÊag
 &~
CSTOPB
;

323 
ây›t
.
c_iÊag
 |
IGNPAR
;

324 
ây›t
.
c_iÊag
 &~
ICRNL
;

325 
ây›t
.
c_iÊag
 &~
IGNCR
;

326 
ây›t
.
c_iÊag
 &~
IXON
;

327 
ây›t
.
c_iÊag
 &~
IXOFF
;

329 
ây›t
.
c_oÊag
 = 0;

331 
ây›t
.
c_lÊag
 &~
ICANON
;

332 
ây›t
.
c_lÊag
 &~
ISIG
;

333 
ây›t
.
c_lÊag
 &~
IEXTEN
;

334 
ây›t
.
c_lÊag
 &~
ECHO
;

335 
ây›t
.
c_lÊag
 &~
ECHOE
;

336 
ây›t
.
c_lÊag
 &~
ECHOK
;

340 
ây›t
.
c_cc
[
VMIN
] = 
LGW_GPS_MIN_MSG_SIZE
;

341 
ây›t
.
c_cc
[
VTIME
] = 0;

344 
i
 = 
	`tc£èâr
(
gps_ây_dev
, 
TCSANOW
, &
ây›t
);

345 i‡(
i
 != 0){

346 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO UPDATE TTY PORT CONFIGURATION\n");

347  
LGW_GPS_ERROR
;

349 
	`tcÊush
(
gps_ây_dev
, 
TCIOFLUSH
);

353 
num_wrôãn
 = 
	`wrôe
 (
gps_ây_dev
, 
ubx_cmd_timegps
, 
UBX_MSG_NAVTIMEGPS_LEN
);

354 i‡(
num_wrôãn
 !
UBX_MSG_NAVTIMEGPS_LEN
) {

355 
	`DEBUG_MSG
("ERROR: FaûedÅÿwrôê⁄ sîü»p‹à(wrôãn=%d)\n", (Ë
num_wrôãn
);

359 
	`tz£t
();

362 
gps_time_ok
 = 
Ál£
;

363 
gps_pos_ok
 = 
Ál£
;

364 
gps_mod
 = 'N';

366  
LGW_GPS_SUCCESS
;

367 
	}
}

371 
	$lgw_gps_dißbÀ
(
fd
) {

372 
i
;

375 
i
 = 
	`tc£èâr
(
fd
, 
TCSANOW
, &
ây›t_ª°‹e
);

376 i‡(
i
 != 0){

377 
	`DEBUG_MSG
("ERROR: IMPOSSIBLE TO RESTORE TTY PORT CONFIGURATION\n");

378  
LGW_GPS_ERROR
;

380 
	`tcÊush
(
fd
, 
TCIOFLUSH
);

382 
i
 = 
	`˛o£
(
fd
);

383 i‡(
i
 <= 0) {

384 
	`DEBUG_MSG
("ERROR: TTY PORT FAIL TO CLOSE\n");

385  
LGW_GPS_ERROR
;

388  
LGW_GPS_SUCCESS
;

389 
	}
}

393 
gps_msg
 
	$lgw_∑r£_ubx
(c⁄° *
£rül_buff
, 
size_t
 
buff_size
, size_à*
msg_size
) {

394 
boﬁ
 
vÆid
 = 0;

395 
∑ylﬂd_Àngth
;

396 
uöt8_t
 
ck_a
, 
ck_b
;

397 
uöt8_t
 
ck_a_rcv
, 
ck_b_rcv
;

398 
i
;

400 *
msg_size
 = 0;

403 i‡(
£rül_buff
 =
NULL
) {

404  
IGNORED
;

406 i‡(
buff_size
 < 8) {

407 
	`DEBUG_MSG
("ERROR: TOO SHORT TO BE A VALID UBX MESSAGE\n");

408  
IGNORED
;

412 
	`DEBUG_MSG
("Note:Öarsing UBX frame> ");

413 
i
=0; i<
buff_size
; i++) {

414 
	`DEBUG_MSG
("%02x ", 
£rül_buff
[
i
]);

416 
	`DEBUG_MSG
("\n");

419 i‡((
£rül_buff
[0] == ()0xB5) && (serial_buff[1] == ()0x62)) {

422 
∑ylﬂd_Àngth
 = (
uöt8_t
)
£rül_buff
[4];

423 
∑ylﬂd_Àngth
 |(
uöt8_t
)
£rül_buff
[5] << 8;

424 *
msg_size
 = 6 + 
∑ylﬂd_Àngth
 + 2;

427 if(*
msg_size
 <
buff_size
) {

429 
ck_a_rcv
 = 
£rül_buff
[*
msg_size
-2];

430 
ck_b_rcv
 = 
£rül_buff
[*
msg_size
-1];

432 
ck_a
 = 0; 
ck_b
 = 0;

433 
i
=0; i<(4 + 
∑ylﬂd_Àngth
); i++) {

434 
ck_a
 = ck_®+ 
£rül_buff
[
i
+2];

435 
ck_b
 = ck_b + 
ck_a
;

439 i‡((
ck_a
 =
ck_a_rcv
Ë&& (
ck_b
 =
ck_b_rcv
)) {

441 i‡((
£rül_buff
[2] == 0x01) && (serial_buff[3] == 0x20)) {

443 
vÆid
 = 
£rül_buff
[17] & 0x3;

444 i‡(
vÆid
) {

447 
gps_iTOW
 = (
uöt8_t
)
£rül_buff
[6];

448 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[7] << 8;

449 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[8] << 16;

450 
gps_iTOW
 |(
uöt8_t
)
£rül_buff
[9] << 24;

452 
gps_fTOW
 = (
uöt8_t
)
£rül_buff
[10];

453 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[11] << 8;

454 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[12] << 16;

455 
gps_fTOW
 |(
uöt8_t
)
£rül_buff
[13] << 24;

457 
gps_wìk
 = (
uöt8_t
)
£rül_buff
[14];

458 
gps_wìk
 |(
uöt8_t
)
£rül_buff
[15] << 8;

460 
gps_time_ok
 = 
åue
;

464 
ubx_gps_hou
 = 0;

465 
ubx_gps_mö
 = 0;

466 
ubx_gps_£c
 = 0;

469 
ubx_gps_£c
 = (
gps_iTOW
 / 1000) % 60;

470 
ubx_gps_mö
 = (
gps_iTOW
 / 1000 / 60) % 60;

471 
ubx_gps_hou
 = (
gps_iTOW
 / 1000 / 60 / 60) % 24;

472 
	`¥ötf
(" GPSÅimê%02d:%02d:%02d\n", 
ubx_gps_hou
, 
ubx_gps_mö
, 
ubx_gps_£c
);

476 
gps_time_ok
 = 
Ál£
;

479  
UBX_NAV_TIMEGPS
;

480 } i‡((
£rül_buff
[2] == 0x05) && (serial_buff[3] == 0x00)) {

481 
	`DEBUG_MSG
("NOTE: UBX ACK-NAKÑeceived\n");

482  
IGNORED
;

483 } i‡((
£rül_buff
[2] == 0x05) && (serial_buff[3] == 0x01)) {

484 
	`DEBUG_MSG
("NOTE: UBX ACK-ACKÑeceived\n");

485  
IGNORED
;

487 
	`DEBUG_MSG
("ERROR: UBX mesßgêi†nŸ suµ‹ãd (%02x %02x)\n", 
£rül_buff
[2], serial_buff[3]);

488  
IGNORED
;

491 
	`DEBUG_MSG
("ERROR: UBX message is corrupted, checksum failed\n");

492  
INVALID
;

495 
	`DEBUG_MSG
("ERROR: UBX message incomplete\n");

496  
INCOMPLETE
;

500  
IGNORED
;

502 
	}
}

506 
gps_msg
 
	$lgw_∑r£_nmó
(c⁄° *
£rül_buff
, 
buff_size
) {

507 
i
, 
j
, 
k
;

508 
°r_ödex
[30];

509 
nb_fõlds
;

510 
∑r£r_buf
[256];

513 i‡(
£rül_buff
 =
NULL
) {

514  
UNKNOWN
;

517 if(
buff_size
 > ()((
∑r£r_buf
) - 1)) {

518 
	`DEBUG_MSG
("Note: input stringÅo big forÖarsing\n");

519  
INVALID
;

523 i‡(
buff_size
 < 8) {

524 
	`DEBUG_MSG
("ERROR: TOO SHORT TO BE A VALID NMEA SENTENCE\n");

525  
UNKNOWN
;

526 } i‡(!
	`vÆid©e_nmó_checksum
(
£rül_buff
, 
buff_size
)) {

527 
	`DEBUG_MSG
("Warning: invalid NMEA sentence (bad checksum)\n");

528  
INVALID
;

529 } i‡(
	`m©ch_œbñ
(
£rül_buff
, "$G?RMC", 6, '?')) {

535 
	`mem˝y
(
∑r£r_buf
, 
£rül_buff
, 
buff_size
);

536 
∑r£r_buf
[
buff_size
] = '\0';

537 
nb_fõlds
 = 
	`°r_ch›
(
∑r£r_buf
, 
buff_size
, ',', 
°r_ödex
, 
	`ARRAY_SIZE
(str_index));

538 i‡(
nb_fõlds
 != 13) {

539 
	`DEBUG_MSG
("Warning: invalid RMC sentence (number of fields)\n");

540  
IGNORED
;

543 
gps_mod
 = *(
∑r£r_buf
 + 
°r_ödex
[12]);

544 i‡((
gps_mod
 != 'N') && (gps_mod != 'A') && (gps_mod != 'D')) {

545 
gps_mod
 = 'N';

548 
i
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[1], "%2hd%2hd%2hd%4f", &
gps_hou
, &
gps_mö
, &
gps_£c
, &
gps_‰a
);

549 
j
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[9], "%2hd%2hd%2hd", &
gps_day
, &
gps_m⁄
, &
gps_yó
);

550 i‡((
i
 =4Ë&& (
j
 == 3)) {

551 i‡((
gps_mod
 == 'A') || (gps_mod == 'D')) {

552 
gps_time_ok
 = 
åue
;

553 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚, GPSÜocked, d©e: 20%02d-%02d-%02dT%02d:%02d:%06.3fZ\n", 
gps_yó
, 
gps_m⁄
, 
gps_day
, 
gps_hou
, 
gps_mö
, 
gps_‰a
 + ()
gps_£c
);

555 
gps_time_ok
 = 
Ál£
;

556 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚,ÇÿßãŒôêfix,É°im©ed d©e: 20%02d-%02d-%02dT%02d:%02d:%06.3fZ\n", 
gps_yó
, 
gps_m⁄
, 
gps_day
, 
gps_hou
, 
gps_mö
, 
gps_‰a
 + ()
gps_£c
);

560 
gps_time_ok
 = 
Ál£
;

561 
	`DEBUG_MSG
("NŸe: VÆid RMC síãn˚, modê%c,Çÿd©e\n", 
gps_mod
);

563  
NMEA_RMC
;

564 } i‡(
	`m©ch_œbñ
(
£rül_buff
, "$G?GGA", 6, '?')) {

569 
	`mem˝y
(
∑r£r_buf
, 
£rül_buff
, 
buff_size
);

570 
∑r£r_buf
[
buff_size
] = '\0';

571 
nb_fõlds
 = 
	`°r_ch›
(
∑r£r_buf
, 
buff_size
, ',', 
°r_ödex
, 
	`ARRAY_SIZE
(str_index));

572 i‡(
nb_fõlds
 != 15) {

573 
	`DEBUG_MSG
("Warning: invalid GGA sentence (number of fields)\n");

574  
IGNORED
;

577 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[7], "%hd", &
gps_ßt
);

579 
i
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[2], "%2hd%10lf", &
gps_dœ
, &
gps_mœ
);

580 
gps_ﬁa
 = *(
∑r£r_buf
 + 
°r_ödex
[3]);

581 
j
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[4], "%3hd%10lf", &
gps_dlo
, &
gps_mlo
);

582 
gps_ﬁo
 = *(
∑r£r_buf
 + 
°r_ödex
[5]);

583 
k
 = 
	`ssˇnf
(
∑r£r_buf
 + 
°r_ödex
[9], "%hd", &
gps_Æt
);

584 i‡((
i
 =2Ë&& (
j
 =2Ë&& (
k
 =1Ë&& ((
gps_ﬁa
=='N')||(gps_ﬁa=='S')Ë&& ((
gps_ﬁo
=='E')||(gps_olo=='W'))) {

585 
gps_pos_ok
 = 
åue
;

586 
	`DEBUG_MSG
("NŸe: VÆid GGA síãn˚, %d s©,Ü© %02ddeg %06.3fmö %c,Ü⁄ %03ddeg%06.3fmö %c,á… %d\n", 
gps_ßt
, 
gps_dœ
, 
gps_mœ
, 
gps_ﬁa
, 
gps_dlo
, 
gps_mlo
, 
gps_ﬁo
, 
gps_Æt
);

589 
gps_pos_ok
 = 
Ál£
;

590 
	`DEBUG_MSG
("NŸe: VÆid GGA síãn˚, %d s©,Çÿco‹dö©es\n", 
gps_ßt
);

592  
NMEA_GGA
;

594 
	`DEBUG_MSG
("Note: ignored NMEA sentence\n");

595  
IGNORED
;

597 
	}
}

601 
	$lgw_gps_gë
(
time•ec
 *
utc
, time•e¯*
gps_time
, 
co‹d_s
 *
loc
, co‹d_†*
îr
) {

602 
tm
 
x
;

603 
time_t
 
y
;

604 
öç¨t
, 
‰a˘∑π
;

606 i‡(
utc
 !
NULL
) {

607 i‡(!
gps_time_ok
) {

608 
	`DEBUG_MSG
("ERROR: NO VALID TIME TO RETURN\n");

609  
LGW_GPS_ERROR
;

611 
	`mem£t
(&
x
, 0, (x));

612 i‡(
gps_yó
 < 100) {

613 
x
.
tm_yór
 = 
gps_yó
 + 100;

615 
x
.
tm_yór
 = 
gps_yó
 - 1900;

617 
x
.
tm_m⁄
 = 
gps_m⁄
 - 1;

618 
x
.
tm_mday
 = 
gps_day
;

619 
x
.
tm_hour
 = 
gps_hou
;

620 
x
.
tm_mö
 = 
gps_mö
;

621 
x
.
tm_£c
 = 
gps_£c
;

622 
y
 = 
	`mktime
(&
x
Ë- 
timez⁄e
;

623 i‡(
y
 =(
time_t
)(-1)) {

624 
	`DEBUG_MSG
("ERROR: FAILED TO CONVERT BROKEN-DOWN TIME\n");

625  
LGW_GPS_ERROR
;

627 
utc
->
tv_£c
 = 
y
;

628 
utc
->
tv_n£c
 = (
öt32_t
)(
gps_‰a
 * 1e9);

630 i‡(
gps_time
 !
NULL
) {

631 i‡(!
gps_time_ok
) {

632 
	`DEBUG_MSG
("ERROR: NO VALID TIME TO RETURN\n");

633  
LGW_GPS_ERROR
;

635 
‰a˘∑π
 = 
	`modf
((()
gps_iTOW
 / 1E3Ë+ (()
gps_fTOW
 / 1E9), &
öç¨t
);

637 
gps_time
->
tv_£c
 = (
time_t
)
öç¨t
;

639 
gps_time
->
tv_£c
 +(
time_t
)
gps_wìk
 * 604800;

641 
gps_time
->
tv_n£c
 = ()(
‰a˘∑π
 * 1E9);

643 i‡(
loc
 !
NULL
) {

644 i‡(!
gps_pos_ok
) {

645 
	`DEBUG_MSG
("ERROR: NO VALID POSITION TO RETURN\n");

646  
LGW_GPS_ERROR
;

648 
loc
->
œt
 = (()
gps_dœ
 + (
gps_mœ
/60.0)Ë* ((
gps_ﬁa
 == 'N')?1.0:-1.0);

649 
loc
->
l⁄
 = (()
gps_dlo
 + (
gps_mlo
/60.0)Ë* ((
gps_ﬁo
 == 'E')?1.0:-1.0);

650 
loc
->
Æt
 = 
gps_Æt
;

652 i‡(
îr
 !
NULL
) {

653 
	`DEBUG_MSG
("Warning:ÜocalizationÉrrorÖrocessingÇot implemented yet\n");

654 
îr
->
œt
 = 0.0;

655 
îr
->
l⁄
 = 0.0;

656 
îr
->
Æt
 = 0;

659  
LGW_GPS_SUCCESS
;

660 
	}
}

664 
	$lgw_gps_sync
(
åef
 *
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 
utc
, time•e¯
gps_time
) {

665 
˙t_diff
;

666 
utc_diff
;

667 
¶›e
;

669 
boﬁ
 
abî_n0
;

670 
boﬁ
 
abî_mö1
 = 
Ál£
;

671 
boﬁ
 
abî_mö2
 = 
Ál£
;

673 
	`CHECK_NULL
(
ªf
);

677 
˙t_diff
 = ()(
cou¡_us
 - 
ªf
->cou¡_usË/ ()(
TS_CPS
);

678 
utc_diff
 = ()(
utc
.
tv_£c
 - (
ªf
->utc).tv_£cË+ (1E-9 * ()(utc.
tv_n£c
 - (ref->utc).tv_nsec));

681 i‡(
utc_diff
 != 0) {

682 
¶›e
 = 
˙t_diff
/
utc_diff
;

683 i‡((
¶›e
 > 
PLUS_10PPM
Ë|| (¶›ê< 
MINUS_10PPM
)) {

684 
	`DEBUG_MSG
("Warning: correctionÑangeÉxceeded\n");

685 
abî_n0
 = 
åue
;

687 
abî_n0
 = 
Ál£
;

690 
	`DEBUG_MSG
("Warning:áberrant UTC value for synchronization\n");

691 
abî_n0
 = 
åue
;

695 i‡(
abî_n0
 =
Ál£
) {

697 
ªf
->
sy°ime
 = 
	`time
(
NULL
);

698 
ªf
->
cou¡_us
 = count_us;

699 
ªf
->
utc
.
tv_£c
 = utc.tv_sec;

700 
ªf
->
utc
.
tv_n£c
 = utc.tv_nsec;

701 
ªf
->
gps
.
tv_£c
 = 
gps_time
.tv_sec;

702 
ªf
->
gps
.
tv_n£c
 = 
gps_time
.tv_nsec;

703 
ªf
->
xèl_îr
 = 
¶›e
;

704 
abî_mö2
 = 
abî_mö1
;

705 
abî_mö1
 = 
abî_n0
;

706  
LGW_GPS_SUCCESS
;

707 } i‡(
abî_n0
 && 
abî_mö1
 && 
abî_mö2
) {

709 
ªf
->
sy°ime
 = 
	`time
(
NULL
);

710 
ªf
->
cou¡_us
 = count_us;

711 
ªf
->
utc
.
tv_£c
 = utc.tv_sec;

712 
ªf
->
utc
.
tv_n£c
 = utc.tv_nsec;

713 
ªf
->
gps
.
tv_£c
 = 
gps_time
.tv_sec;

714 
ªf
->
gps
.
tv_n£c
 = 
gps_time
.tv_nsec;

716 i‡((
ªf
->
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf->xèl_î∏< 
MINUS_10PPM
)) {

717 
ªf
->
xèl_îr
 = 1.0;

719 
	`DEBUG_MSG
("Warning: 3 successiveáberrant syncáttempts, syncÑeset\n");

720 
abî_mö2
 = 
abî_mö1
;

721 
abî_mö1
 = 
abî_n0
;

722  
LGW_GPS_SUCCESS
;

725 
abî_mö2
 = 
abî_mö1
;

726 
abî_mö1
 = 
abî_n0
;

727  
LGW_GPS_ERROR
;

730  
LGW_GPS_SUCCESS
;

731 
	}
}

735 
	$lgw_˙t2utc
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 *
utc
) {

736 
dñè_£c
;

737 
öç¨t
, 
‰a˘∑π
;

738 
tmp
;

740 
	`CHECK_NULL
(
utc
);

741 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

742 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR CNT -> UTC CONVERSION\n");

743  
LGW_GPS_ERROR
;

747 
dñè_£c
 = ()(
cou¡_us
 - 
ªf
.cou¡_usË/ (
TS_CPS
 *Ñef.
xèl_îr
);

750 
‰a˘∑π
 = 
	`modf
 (
dñè_£c
 , &
öç¨t
);

751 
tmp
 = 
ªf
.
utc
.
tv_n£c
 + ()(
‰a˘∑π
 * 1E9);

752 i‡(
tmp
 < ()1E9) {

753 
utc
->
tv_£c
 = 
ªf
.utc.tv_£¯+ (
time_t
)
öç¨t
;

754 
utc
->
tv_n£c
 = 
tmp
;

756 
utc
->
tv_£c
 = 
ªf
.utc.tv_£¯+ (
time_t
)
öç¨t
 + 1;

757 
utc
->
tv_n£c
 = 
tmp
 - ()1E9;

760  
LGW_GPS_SUCCESS
;

761 
	}
}

765 
	$lgw_utc2˙t
(
åef
 
ªf
, 
time•ec
 
utc
, 
uöt32_t
 *
cou¡_us
) {

766 
dñè_£c
;

768 
	`CHECK_NULL
(
cou¡_us
);

769 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

770 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR UTC -> CNT CONVERSION\n");

771  
LGW_GPS_ERROR
;

775 
dñè_£c
 = ()(
utc
.
tv_£c
 - 
ªf
.utc.tv_sec);

776 
dñè_£c
 +1E-9 * ()(
utc
.
tv_n£c
 - 
ªf
.utc.tv_nsec);

779 *
cou¡_us
 = 
ªf
.cou¡_u†+ (
uöt32_t
)(
dñè_£c
 * 
TS_CPS
 *Ñef.
xèl_îr
);

781  
LGW_GPS_SUCCESS
;

782 
	}
}

786 
	$lgw_˙t2gps
(
åef
 
ªf
, 
uöt32_t
 
cou¡_us
, 
time•ec
 *
gps_time
) {

787 
dñè_£c
;

788 
öç¨t
, 
‰a˘∑π
;

789 
tmp
;

791 
	`CHECK_NULL
(
gps_time
);

792 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

793 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR CNT -> GPS CONVERSION\n");

794  
LGW_GPS_ERROR
;

798 
dñè_£c
 = ()(
cou¡_us
 - 
ªf
.cou¡_usË/ (
TS_CPS
 *Ñef.
xèl_îr
);

801 
‰a˘∑π
 = 
	`modf
 (
dñè_£c
 , &
öç¨t
);

802 
tmp
 = 
ªf
.
gps
.
tv_n£c
 + ()(
‰a˘∑π
 * 1E9);

803 i‡(
tmp
 < ()1E9) {

804 
gps_time
->
tv_£c
 = 
ªf
.
gps
.tv_£¯+ (
time_t
)
öç¨t
;

805 
gps_time
->
tv_n£c
 = 
tmp
;

807 
gps_time
->
tv_£c
 = 
ªf
.
gps
.tv_£¯+ (
time_t
)
öç¨t
 + 1;

808 
gps_time
->
tv_n£c
 = 
tmp
 - ()1E9;

811  
LGW_GPS_SUCCESS
;

812 
	}
}

816 
	$lgw_gps2˙t
(
åef
 
ªf
, 
time•ec
 
gps_time
, 
uöt32_t
 *
cou¡_us
) {

817 
dñè_£c
;

819 
	`CHECK_NULL
(
cou¡_us
);

820 i‡((
ªf
.
sy°ime
 =0Ë|| (ªf.
xèl_îr
 > 
PLUS_10PPM
Ë|| (ªf.xèl_î∏< 
MINUS_10PPM
)) {

821 
	`DEBUG_MSG
("ERROR: INVALID REFERENCE FOR GPS -> CNT CONVERSION\n");

822  
LGW_GPS_ERROR
;

826 
dñè_£c
 = ()(
gps_time
.
tv_£c
 - 
ªf
.
gps
.tv_sec);

827 
dñè_£c
 +1E-9 * ()(
gps_time
.
tv_n£c
 - 
ªf
.
gps
.tv_nsec);

830 *
cou¡_us
 = 
ªf
.cou¡_u†+ (
uöt32_t
)(
dñè_£c
 * 
TS_CPS
 *Ñef.
xèl_îr
);

832  
LGW_GPS_SUCCESS
;

833 
	}
}

	@libloragw/src/loragw_hal.c

20 
	~<°döt.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<m©h.h
>

26 
	~"l‹agw_ªg.h
"

27 
	~"l‹agw_hÆ.h
"

28 
	~"l‹agw_aux.h
"

29 
	~"l‹agw_•i.h
"

30 
	~"l‹agw_ødio.h
"

31 
	~"l‹agw_Âga.h
"

32 
	~"l‹agw_lbt.h
"

37 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

38 #i‡
DEBUG_HAL
 == 1

39 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

41 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a<b;++aË
	`Ârötf
(
°dîr
,"%x.",c[a]);Ârötf(°dîr,"íd\n")

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_HAL_ERROR
;}

	)

44 
	#DEBUG_MSG
(
°r
)

	)

45 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

46 
	#DEBUG_ARRAY
(
a
,
b
,
c
Ëa=0;a!=0;){}

	)

47 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_HAL_ERROR
;}

	)

50 
	#IF_HZ_TO_REG
(
f
Ë(‡<< 5)/15625

	)

51 
	#SET_PPM_ON
(
bw
,
dr
Ë(((bw =
BW_125KHZ
Ë&& ((d∏=
DR_LORA_SF11
Ë|| (d∏=
DR_LORA_SF12
))Ë|| ((bw =
BW_250KHZ
Ë&& (d∏=DR_LORA_SF12)))

	)

52 
	#TRACE
(Ë
	`Ârötf
(
°dîr
, "@ %†%d\n", 
__FUNCTION__
, 
__LINE__
);

	)

57 
	#MCU_ARB
 0

	)

58 
	#MCU_AGC
 1

	)

59 
	#MCU_ARB_FW_BYTE
 8192

	)

60 
	#MCU_AGC_FW_BYTE
 8192

	)

61 
	#FW_VERSION_ADDR
 0x20

	)

62 
	#FW_VERSION_CAL
 2

	)

63 
	#FW_VERSION_AGC
 4

	)

64 
	#FW_VERSION_ARB
 1

	)

66 
	#TX_METADATA_NB
 16

	)

67 
	#RX_METADATA_NB
 16

	)

69 
	#AGC_CMD_WAIT
 16

	)

70 
	#AGC_CMD_ABORT
 17

	)

72 
	#MIN_LORA_PREAMBLE
 6

	)

73 
	#STD_LORA_PREAMBLE
 8

	)

74 
	#MIN_FSK_PREAMBLE
 3

	)

75 
	#STD_FSK_PREAMBLE
 5

	)

77 
	#RSSI_MULTI_BIAS
 -35

	)

78 
	#RSSI_FSK_POLY_0
 60

	)

79 
	#RSSI_FSK_POLY_1
 1.5351

	)

80 
	#RSSI_FSK_POLY_2
 0.003

	)

84 
	#LGW_RF_RX_BANDWIDTH_125KHZ
 925000

	)

85 
	#LGW_RF_RX_BANDWIDTH_250KHZ
 1000000

	)

86 
	#LGW_RF_RX_BANDWIDTH_500KHZ
 1100000

	)

88 
	#TX_START_DELAY_DEFAULT
 1497

	)

91 c⁄° 
uöt8_t
 
	gifmod_c⁄fig
[
LGW_IF_CHAIN_NB
] = 
LGW_IFMODEM_CONFIG
;

94 c⁄° 
	glgw_vîsi⁄_°rög
[] = "Vîsi⁄: " 
LIBLORAGW_VERSION
 ";";

99 
	~"¨b_fw.v¨
"

100 
	~"agc_fw.v¨
"

101 
	~"ˇl_fw.v¨
"

112 
boﬁ
 
	glgw_is_°¨ãd
;

114 
boﬁ
 
	grf_íabÀ
[
LGW_RF_CHAIN_NB
];

115 
uöt32_t
 
	grf_rx_‰eq
[
LGW_RF_CHAIN_NB
];

116 
	grf_rssi_off£t
[
LGW_RF_CHAIN_NB
];

117 
boﬁ
 
	grf_tx_íabÀ
[
LGW_RF_CHAIN_NB
];

118 
uöt32_t
 
	grf_tx_nŸch_‰eq
[
LGW_RF_CHAIN_NB
];

119 
lgw_ødio_ty≥_e
 
	grf_ødio_ty≥
[
LGW_RF_CHAIN_NB
];

121 
boﬁ
 
	gif_íabÀ
[
LGW_IF_CHAIN_NB
];

122 
boﬁ
 
	gif_rf_chaö
[
LGW_IF_CHAIN_NB
];

123 
öt32_t
 
	gif_‰eq
[
LGW_IF_CHAIN_NB
];

125 
uöt8_t
 
	gl‹a_mu…i_sfmask
[
LGW_MULTI_NB
];

127 
uöt8_t
 
	gl‹a_rx_bw
;

128 
uöt8_t
 
	gl‹a_rx_sf
;

129 
boﬁ
 
	gl‹a_rx_µm_off£t
;

131 
uöt8_t
 
	gfsk_rx_bw
;

132 
uöt32_t
 
	gfsk_rx_dr
;

133 
uöt8_t
 
	gfsk_sync_w‹d_size
 = 3;

134 
uöt64_t
 
	gfsk_sync_w‹d
= 0xC194C1;

136 
boﬁ
 
	gl‹aw™_public
 = 
Ál£
;

137 
uöt8_t
 
	grf_˛kout
 = 0;

139 
lgw_tx_gaö_lut_s
 
	gtxgaö_lut
 = {

140 .
size
 = 2,

141 .
	glut
[0] = {

142 .
dig_gaö
 = 0,

143 .
	g∑_gaö
 = 2,

144 .
	gdac_gaö
 = 3,

145 .
	gmix_gaö
 = 10,

146 .
	grf_powî
 = 14

148 .
	glut
[1] = {

149 .
dig_gaö
 = 0,

150 .
	g∑_gaö
 = 3,

151 .
	gdac_gaö
 = 3,

152 .
	gmix_gaö
 = 14,

153 .
	grf_powî
 = 27

157 
öt8_t
 
	gˇl_off£t_a_i
[8];

158 
öt8_t
 
	gˇl_off£t_a_q
[8];

159 
öt8_t
 
	gˇl_off£t_b_i
[8];

160 
öt8_t
 
	gˇl_off£t_b_q
[8];

165 
lﬂd_fúmw¨e
(
uöt8_t
 
èrgë
, uöt8_à*
fúmw¨e
, 
uöt16_t
 
size
);

167 
lgw_c⁄°™t_adju°
();

169 
öt32_t
 
lgw_sf_gëvÆ
(
x
);

170 
öt32_t
 
lgw_bw_gëvÆ
(
x
);

176 
	$lﬂd_fúmw¨e
(
uöt8_t
 
èrgë
, uöt8_à*
fúmw¨e
, 
uöt16_t
 
size
) {

177 
ªg_r°
;

178 
ªg_£l
;

179 
uöt8_t
 
fw_check
[8192];

180 
öt32_t
 
dummy
;

183 
	`CHECK_NULL
(
fúmw¨e
);

184 i‡(
èrgë
 =
MCU_ARB
) {

185 i‡(
size
 !
MCU_ARB_FW_BYTE
) {

186 
	`DEBUG_MSG
("ERROR: NOT A VALID SIZE FOR MCU ARG FIRMWARE\n");

189 
ªg_r°
 = 
LGW_MCU_RST_0
;

190 
ªg_£l
 = 
LGW_MCU_SELECT_MUX_0
;

191 }i‡(
èrgë
 =
MCU_AGC
) {

192 i‡(
size
 !
MCU_AGC_FW_BYTE
) {

193 
	`DEBUG_MSG
("ERROR: NOT A VALID SIZE FOR MCU AGC FIRMWARE\n");

196 
ªg_r°
 = 
LGW_MCU_RST_1
;

197 
ªg_£l
 = 
LGW_MCU_SELECT_MUX_1
;

199 
	`DEBUG_MSG
("ERROR: NOT A VALID TARGET FOR LOADING FIRMWARE\n");

204 
	`lgw_ªg_w
(
ªg_r°
, 1);

207 
	`lgw_ªg_w
(
ªg_£l
, 0);

208 
	`lgw_ªg_w
(
LGW_MCU_PROM_ADDR
, 0);

211 
	`lgw_ªg_wb
(
LGW_MCU_PROM_DATA
, 
fúmw¨e
, 
size
);

214 
	`lgw_ªg_r
–
LGW_MCU_PROM_DATA
, &
dummy
 );

215 
	`lgw_ªg_rb
–
LGW_MCU_PROM_DATA
, 
fw_check
, 
size
 );

216 i‡(
	`memcmp
(
fúmw¨e
, 
fw_check
, 
size
) != 0) {

217 
	`¥ötf
 ("ERROR: FaûedÅÿlﬂd fw %d\n", ()
èrgë
);

222 
	`lgw_ªg_w
(
ªg_£l
, 1);

225 
	}
}

229 
	$lgw_c⁄°™t_adju°
() {

238 
	`lgw_ªg_w
(
LGW_RSSI_BB_FILTER_ALPHA
,6);

239 
	`lgw_ªg_w
(
LGW_RSSI_DEC_FILTER_ALPHA
,7);

240 
	`lgw_ªg_w
(
LGW_RSSI_CHANN_FILTER_ALPHA
,7);

241 
	`lgw_ªg_w
(
LGW_RSSI_BB_DEFAULT_VALUE
,23);

242 
	`lgw_ªg_w
(
LGW_RSSI_CHANN_DEFAULT_VALUE
,85);

243 
	`lgw_ªg_w
(
LGW_RSSI_DEC_DEFAULT_VALUE
,66);

244 
	`lgw_ªg_w
(
LGW_DEC_GAIN_OFFSET
,7);

245 
	`lgw_ªg_w
(
LGW_CHAN_GAIN_OFFSET
,6);

272 
	`lgw_ªg_w
(
LGW_SNR_AVG_CST
,3);

273 i‡(
l‹aw™_public
) {

274 
	`lgw_ªg_w
(
LGW_FRAME_SYNCH_PEAK1_POS
,3);

275 
	`lgw_ªg_w
(
LGW_FRAME_SYNCH_PEAK2_POS
,4);

277 
	`lgw_ªg_w
(
LGW_FRAME_SYNCH_PEAK1_POS
,1);

278 
	`lgw_ªg_w
(
LGW_FRAME_SYNCH_PEAK2_POS
,2);

295 i‡(
l‹aw™_public
) {

296 
	`lgw_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK1_POS
,3);

297 
	`lgw_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK2_POS
,4);

299 
	`lgw_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK1_POS
,1);

300 
	`lgw_ªg_w
(
LGW_MBWSSF_FRAME_SYNCH_PEAK2_POS
,2);

309 
	`lgw_ªg_w
(
LGW_ADJUST_MODEM_START_OFFSET_RDX4
, 1);

310 
	`lgw_ªg_w
(
LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
, 4094);

311 
	`lgw_ªg_w
(
LGW_CORR_MAC_GAIN
, 7);

314 
	`lgw_ªg_w
(
LGW_FSK_RX_INVERT
,1);

315 
	`lgw_ªg_w
(
LGW_FSK_MODEM_INVERT_IQ
,1);

318 
	`lgw_ªg_w
(
LGW_FSK_RSSI_LENGTH
,4);

319 
	`lgw_ªg_w
(
LGW_FSK_PKT_MODE
,1);

320 
	`lgw_ªg_w
(
LGW_FSK_CRC_EN
,1);

321 
	`lgw_ªg_w
(
LGW_FSK_DCFREE_ENC
,2);

323 
	`lgw_ªg_w
(
LGW_FSK_ERROR_OSR_TOL
,10);

324 
	`lgw_ªg_w
(
LGW_FSK_PKT_LENGTH
,255);

328 
	`lgw_ªg_w
(
LGW_FSK_PATTERN_TIMEOUT_CFG
,128);

331 
	`lgw_ªg_w
(
LGW_TX_START_DELAY
, 
TX_START_DELAY_DEFAULT
);

335 
	`lgw_ªg_w
(
LGW_TX_SWAP_IQ
,1);

336 i‡(
l‹aw™_public
) {

337 
	`lgw_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK1_POS
,3);

338 
	`lgw_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK2_POS
,4);

340 
	`lgw_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK1_POS
,1);

341 
	`lgw_ªg_w
(
LGW_TX_FRAME_SYNCH_PEAK2_POS
,2);

346 
	`lgw_ªg_w
(
LGW_FSK_TX_GAUSSIAN_SELECT_BT
,2);

351 
	}
}

355 
öt32_t
 
	$lgw_bw_gëvÆ
(
x
) {

356 
x
) {

357 
BW_500KHZ
:  500000;

358 
BW_250KHZ
:  250000;

359 
BW_125KHZ
:  125000;

360 
BW_62K5HZ
:  62500;

361 
BW_31K2HZ
:  31200;

362 
BW_15K6HZ
:  15600;

363 
BW_7K8HZ
 :  7800;

366 
	}
}

370 
öt32_t
 
	$lgw_sf_gëvÆ
(
x
) {

371 
x
) {

372 
DR_LORA_SF7
:  7;

373 
DR_LORA_SF8
:  8;

374 
DR_LORA_SF9
:  9;

375 
DR_LORA_SF10
:  10;

376 
DR_LORA_SF11
:  11;

377 
DR_LORA_SF12
:  12;

380 
	}
}

384 
uöt16_t
 
	$lgw_gë_tx_°¨t_dñay
(
boﬁ
 
tx_nŸch_íabÀ
, 
uöt8_t
 
bw
) {

385 
nŸch_dñay_us
 = 0.0;

386 
bw_dñay_us
 = 0.0;

387 
tx_°¨t_dñay
;

390 i‡(
tx_nŸch_íabÀ
) {

391 
nŸch_dñay_us
 = 
	`lgw_Âga_gë_tx_nŸch_dñay
();

395 
bw
) {

396 
BW_125KHZ
:

397 
bw_dñay_us
 = 1.5;

399 
BW_500KHZ
:

405 
tx_°¨t_dñay
 = ()
TX_START_DELAY_DEFAULT
 - 
bw_dñay_us
 - 
nŸch_dñay_us
;

407 
	`¥ötf
("INFO:Åx_°¨t_dñay=%u (%fË- (%u, bw_dñay=%f,ÇŸch_dñay=%f)\n", (
uöt16_t
)
tx_°¨t_dñay
,Åx_°¨t_dñay, 
TX_START_DELAY_DEFAULT
, 
bw_dñay_us
, 
nŸch_dñay_us
);

409  (
uöt16_t
)
tx_°¨t_dñay
;

410 
	}
}

415 
	$lgw_bﬂrd_£tc⁄f
(
lgw_c⁄f_bﬂrd_s
 
c⁄f
) {

418 i‡(
lgw_is_°¨ãd
 =
åue
) {

419 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

420  
LGW_HAL_ERROR
;

424 
l‹aw™_public
 = 
c⁄f
.lorawan_public;

425 
rf_˛kout
 = 
c⁄f
.
˛k§c
;

427 
	`DEBUG_PRINTF
("NŸe: bﬂrd c⁄figuøti⁄;Ü‹aw™_public:%d, clk§c:%d\n", 
l‹aw™_public
, 
rf_˛kout
);

429  
LGW_HAL_SUCCESS
;

430 
	}
}

434 
	$lgw_lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 
c⁄f
) {

435 
x
;

438 i‡(
lgw_is_°¨ãd
 =
åue
) {

439 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

440  
LGW_HAL_ERROR
;

443 
x
 = 
	`lbt_£tc⁄f
(&
c⁄f
);

444 i‡(
x
 !
LGW_LBT_SUCCESS
) {

445 
	`DEBUG_MSG
("ERROR: FailedÅo configure concentrator for LBT\n");

446  
LGW_HAL_ERROR
;

449  
LGW_HAL_SUCCESS
;

450 
	}
}

454 
	$lgw_rxrf_£tc⁄f
(
uöt8_t
 
rf_chaö
, 
lgw_c⁄f_rxrf_s
 
c⁄f
) {

457 i‡(
lgw_is_°¨ãd
 =
åue
) {

458 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

459  
LGW_HAL_ERROR
;

463 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

464 
	`DEBUG_MSG
("ERROR: NOT A VALID RF_CHAIN NUMBER\n");

465  
LGW_HAL_ERROR
;

469 i‡((
c⁄f
.
ty≥
 !
LGW_RADIO_TYPE_SX1255
Ë&& (c⁄f.ty≥ !
LGW_RADIO_TYPE_SX1257
)) {

470 
	`DEBUG_MSG
("ERROR: NOT A VALID RADIO TYPE\n");

471  
LGW_HAL_ERROR
;

475 i‡((
c⁄f
.
tx_íabÀ
 =
åue
Ë&& ((c⁄f.
tx_nŸch_‰eq
 < 
LGW_MIN_NOTCH_FREQ
Ë|| (c⁄f.tx_nŸch_‰eq > 
LGW_MAX_NOTCH_FREQ
))) {

476 
	`DEBUG_PRINTF
("WARNING: NOT A VALID TX NOTCH FILTER FREQUENCY [%u..%u]Hz\n", 
LGW_MIN_NOTCH_FREQ
, 
LGW_MAX_NOTCH_FREQ
);

477 
c⁄f
.
tx_nŸch_‰eq
 = 0;

481 
rf_íabÀ
[
rf_chaö
] = 
c⁄f
.
íabÀ
;

482 
rf_rx_‰eq
[
rf_chaö
] = 
c⁄f
.
‰eq_hz
;

483 
rf_rssi_off£t
[
rf_chaö
] = 
c⁄f
.
rssi_off£t
;

484 
rf_ødio_ty≥
[
rf_chaö
] = 
c⁄f
.
ty≥
;

485 
rf_tx_íabÀ
[
rf_chaö
] = 
c⁄f
.
tx_íabÀ
;

486 
rf_tx_nŸch_‰eq
[
rf_chaö
] = 
c⁄f
.
tx_nŸch_‰eq
;

488 
	`DEBUG_PRINTF
("NŸe:Ñf_chaö %d c⁄figuøti⁄;Én:%d fªq:%dÑssi_off£t:%‡ødio_ty≥:%dÅx_íabÀ:%dÅx_nŸch_‰eq:%u\n", 
rf_chaö
, 
rf_íabÀ
[rf_chaö], 
rf_rx_‰eq
[rf_chaö], 
rf_rssi_off£t
[rf_chaö], 
rf_ødio_ty≥
[rf_chaö], 
rf_tx_íabÀ
[rf_chaö], 
rf_tx_nŸch_‰eq
[rf_chain]);

490  
LGW_HAL_SUCCESS
;

491 
	}
}

495 
	$lgw_rxif_£tc⁄f
(
uöt8_t
 
if_chaö
, 
lgw_c⁄f_rxif_s
 
c⁄f
) {

496 
öt32_t
 
bw_hz
;

497 
uöt32_t
 
rf_rx_b™dwidth
;

500 i‡(
lgw_is_°¨ãd
 =
åue
) {

501 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS RUNNING, STOP IT BEFORE TOUCHING CONFIGURATION\n");

502  
LGW_HAL_ERROR
;

506 i‡(
if_chaö
 >
LGW_IF_CHAIN_NB
) {

507 
	`DEBUG_PRINTF
("ERROR: %d NOT A VALID IF_CHAIN NUMBER\n", 
if_chaö
);

508  
LGW_HAL_ERROR
;

512 i‡(
c⁄f
.
íabÀ
 =
Ál£
) {

513 
if_íabÀ
[
if_chaö
] = 
Ál£
;

514 
if_‰eq
[
if_chaö
] = 0;

515 
	`DEBUG_PRINTF
("NŸe: if_chaö %d dißbÀd\n", 
if_chaö
);

516  
LGW_HAL_SUCCESS
;

520 i‡(
ifmod_c⁄fig
[
if_chaö
] =
IF_UNDEFINED
) {

521 
	`DEBUG_PRINTF
("ERROR: IF CHAIN %d NOT CONFIGURABLE\n", 
if_chaö
);

523 i‡(
c⁄f
.
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

524 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN TO ASSOCIATE WITH A LORA_STD IF CHAIN\n");

525  
LGW_HAL_ERROR
;

528 
c⁄f
.
b™dwidth
) {

529 
BW_250KHZ
:

530 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_250KHZ
;

532 
BW_500KHZ
:

533 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_500KHZ
;

537 
rf_rx_b™dwidth
 = 
LGW_RF_RX_BANDWIDTH_125KHZ
;

540 
bw_hz
 = 
	`lgw_bw_gëvÆ
(
c⁄f
.
b™dwidth
);

541 i‡((
c⁄f
.
‰eq_hz
 + ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë> ((
öt32_t
)
rf_rx_b™dwidth
/2)) {

542 
	`DEBUG_PRINTF
("ERROR: IF FREQUENCY %d TOO HIGH\n", 
c⁄f
.
‰eq_hz
);

543  
LGW_HAL_ERROR
;

544 } i‡((
c⁄f
.
‰eq_hz
 - ((
bw_hz
==-1)?
LGW_REF_BW
:bw_hz)/2Ë< -((
öt32_t
)
rf_rx_b™dwidth
/2)) {

545 
	`DEBUG_PRINTF
("ERROR: IF FREQUENCY %d TOO LOW\n", 
c⁄f
.
‰eq_hz
);

546  
LGW_HAL_ERROR
;

551 
ifmod_c⁄fig
[
if_chaö
]) {

552 
IF_LORA_STD
:

554 i‡(
c⁄f
.
b™dwidth
 =
BW_UNDEFINED
) {

555 
c⁄f
.
b™dwidth
 = 
BW_250KHZ
;

557 i‡(
c⁄f
.
d©¨©e
 =
DR_UNDEFINED
) {

558 
c⁄f
.
d©¨©e
 = 
DR_LORA_SF9
;

561 i‡(!
	`IS_LORA_BW
(
c⁄f
.
b™dwidth
)) {

562 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA_STD IF CHAIN\n");

563  
LGW_HAL_ERROR
;

565 i‡(!
	`IS_LORA_STD_DR
(
c⁄f
.
d©¨©e
)) {

566 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY LORA_STD IF CHAIN\n");

567  
LGW_HAL_ERROR
;

570 
if_íabÀ
[
if_chaö
] = 
c⁄f
.
íabÀ
;

571 
if_rf_chaö
[
if_chaö
] = 
c⁄f
.
rf_chaö
;

572 
if_‰eq
[
if_chaö
] = 
c⁄f
.
‰eq_hz
;

573 
l‹a_rx_bw
 = 
c⁄f
.
b™dwidth
;

574 
l‹a_rx_sf
 = (
uöt8_t
)(
DR_LORA_MULTI
 & 
c⁄f
.
d©¨©e
);

575 i‡(
	`SET_PPM_ON
(
c⁄f
.
b™dwidth
, c⁄f.
d©¨©e
)) {

576 
l‹a_rx_µm_off£t
 = 
åue
;

578 
l‹a_rx_µm_off£t
 = 
Ál£
;

581 
	`DEBUG_PRINTF
("NŸe: LoR®'°d' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d\n", 
if_chaö
, 
if_íabÀ
[if_chaö], 
if_‰eq
[if_chaö], 
l‹a_rx_bw
, 
l‹a_rx_sf
);

584 
IF_LORA_MULTI
:

586 i‡(
c⁄f
.
b™dwidth
 =
BW_UNDEFINED
) {

587 
c⁄f
.
b™dwidth
 = 
BW_125KHZ
;

589 i‡(
c⁄f
.
d©¨©e
 =
DR_UNDEFINED
) {

590 
c⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

593 i‡(
c⁄f
.
b™dwidth
 !
BW_125KHZ
) {

594 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

595  
LGW_HAL_ERROR
;

597 i‡(!
	`IS_LORA_MULTI_DR
(
c⁄f
.
d©¨©e
)) {

598 
	`DEBUG_MSG
("ERROR: DATARATE(S) NOT SUPPORTED BY LORA_MULTI IF CHAIN\n");

599  
LGW_HAL_ERROR
;

602 
if_íabÀ
[
if_chaö
] = 
c⁄f
.
íabÀ
;

603 
if_rf_chaö
[
if_chaö
] = 
c⁄f
.
rf_chaö
;

604 
if_‰eq
[
if_chaö
] = 
c⁄f
.
‰eq_hz
;

605 
l‹a_mu…i_sfmask
[
if_chaö
] = (
uöt8_t
)(
DR_LORA_MULTI
 & 
c⁄f
.
d©¨©e
);

607 
	`DEBUG_PRINTF
("NŸe: LoR®'mu…i' if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d SF_mask:0x%02x\n", 
if_chaö
, 
if_íabÀ
[if_chaö], 
if_‰eq
[if_chaö], 
l‹a_mu…i_sfmask
[if_chain]);

610 
IF_FSK_STD
:

612 i‡(
c⁄f
.
b™dwidth
 =
BW_UNDEFINED
) {

613 
c⁄f
.
b™dwidth
 = 
BW_250KHZ
;

615 i‡(
c⁄f
.
d©¨©e
 =
DR_UNDEFINED
) {

616 
c⁄f
.
d©¨©e
 = 64000;

619 if(!
	`IS_FSK_BW
(
c⁄f
.
b™dwidth
)) {

620 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY FSK IF CHAIN\n");

621  
LGW_HAL_ERROR
;

623 if(!
	`IS_FSK_DR
(
c⁄f
.
d©¨©e
)) {

624 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

625  
LGW_HAL_ERROR
;

628 
if_íabÀ
[
if_chaö
] = 
c⁄f
.
íabÀ
;

629 
if_rf_chaö
[
if_chaö
] = 
c⁄f
.
rf_chaö
;

630 
if_‰eq
[
if_chaö
] = 
c⁄f
.
‰eq_hz
;

631 
fsk_rx_bw
 = 
c⁄f
.
b™dwidth
;

632 
fsk_rx_dr
 = 
c⁄f
.
d©¨©e
;

633 i‡(
c⁄f
.
sync_w‹d
 > 0) {

634 
fsk_sync_w‹d_size
 = 
c⁄f
.
sync_w‹d_size
;

635 
fsk_sync_w‹d
 = 
c⁄f
.
sync_w‹d
;

637 
	`DEBUG_PRINTF
("NŸe: FSK if_chaö %d c⁄figuøti⁄;Én:%d fªq:%d bw:%d dr:%d (%dÑó»drËsync:0x%0*ŒX\n", 
if_chaö
, 
if_íabÀ
[if_chaö], 
if_‰eq
[if_chaö], 
fsk_rx_bw
, 
fsk_rx_dr
, 
LGW_XTAL_FREQU
/(LGW_XTAL_FREQU/fsk_rx_dr), 2*
fsk_sync_w‹d_size
, 
fsk_sync_w‹d
);

641 
	`DEBUG_PRINTF
("ERROR: IF CHAIN %d TYPE NOT SUPPORTED\n", 
if_chaö
);

642  
LGW_HAL_ERROR
;

645  
LGW_HAL_SUCCESS
;

646 
	}
}

650 
	$lgw_txgaö_£tc⁄f
(
lgw_tx_gaö_lut_s
 *
c⁄f
) {

651 
i
;

654 i‡((
c⁄f
->
size
 < 1Ë|| (c⁄f->sizê> 
TX_GAIN_LUT_SIZE_MAX
)) {

655 
	`DEBUG_PRINTF
("ERROR: TX gaö LUT mu° havê©Üó° o√É¡ryánd maximum %dÉ¡rõs\n", 
TX_GAIN_LUT_SIZE_MAX
);

656  
LGW_HAL_ERROR
;

659 
txgaö_lut
.
size
 = 
c⁄f
->size;

661 
i
 = 0; i < 
txgaö_lut
.
size
; i++) {

663 i‡(
c⁄f
->
lut
[
i
].
dig_gaö
 > 3) {

664 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1301 digital gain must be between 0ánd 3\n");

665  
LGW_HAL_ERROR
;

667 i‡(
c⁄f
->
lut
[
i
].
dac_gaö
 != 3) {

668 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1257 DAC gains != 3áreÇot supported\n");

669  
LGW_HAL_ERROR
;

671 i‡(
c⁄f
->
lut
[
i
].
mix_gaö
 > 15) {

672 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1257 mixer gain mustÇotÉxceed 15\n");

673  
LGW_HAL_ERROR
;

674 } i‡(
c⁄f
->
lut
[
i
].
mix_gaö
 < 8) {

675 
	`DEBUG_MSG
("ERROR: TX gain LUT: SX1257 mixer gains < 8áreÇot supported\n");

676  
LGW_HAL_ERROR
;

678 i‡(
c⁄f
->
lut
[
i
].
∑_gaö
 > 3) {

679 
	`DEBUG_MSG
("ERROR: TX gain LUT: External PA gain mustÇotÉxceed 3\n");

680  
LGW_HAL_ERROR
;

684 
txgaö_lut
.
lut
[
i
].
dig_gaö
 = 
c⁄f
->lut[i].dig_gain;

685 
txgaö_lut
.
lut
[
i
].
dac_gaö
 = 
c⁄f
->lut[i].dac_gain;

686 
txgaö_lut
.
lut
[
i
].
mix_gaö
 = 
c⁄f
->lut[i].mix_gain;

687 
txgaö_lut
.
lut
[
i
].
∑_gaö
 = 
c⁄f
->lut[i].pa_gain;

688 
txgaö_lut
.
lut
[
i
].
rf_powî
 = 
c⁄f
->lut[i].rf_power;

691  
LGW_HAL_SUCCESS
;

692 
	}
}

696 
	$lgw_°¨t
() {

697 
i
, 
îr
;

698 
ªg_°©
;

699 
x
;

700 
uöt8_t
 
ødio_£À˘
;

701 
öt32_t
 
ªad_vÆ
;

702 
uöt8_t
 
lﬂd_vÆ
;

703 
uöt8_t
 
fw_vîsi⁄
;

704 
uöt8_t
 
ˇl_cmd
;

705 
uöt16_t
 
ˇl_time
;

706 
uöt8_t
 
ˇl_°©us
;

708 
uöt64_t
 
fsk_sync_w‹d_ªg
;

710 i‡(
lgw_is_°¨ãd
 =
åue
) {

711 
	`DEBUG_MSG
("Note: LoRa concentratorálready started,Ñestarting itÇow\n");

714 
ªg_°©
 = 
	`lgw_c⁄√˘
(
Ál£
, 
rf_tx_nŸch_‰eq
[
rf_tx_íabÀ
[1]?1:0]);

715 i‡(
ªg_°©
 =
LGW_REG_ERROR
) {

716 
	`DEBUG_MSG
("ERROR: FAIL TO CONNECT BOARD\n");

717  
LGW_HAL_ERROR
;

721 
	`lgw_so·_ª£t
();

724 
	`lgw_ªg_w
(
LGW_GLOBAL_EN
, 0);

725 
	`lgw_ªg_w
(
LGW_CLK32M_EN
, 0);

728 
	`lgw_ªg_w
(
LGW_RADIO_A_EN
,1);

729 
	`lgw_ªg_w
(
LGW_RADIO_B_EN
,1);

730 
	`waô_ms
(500);

731 
	`lgw_ªg_w
(
LGW_RADIO_RST
,1);

732 
	`waô_ms
(5);

733 
	`lgw_ªg_w
(
LGW_RADIO_RST
,0);

736 
îr
 = 
	`lgw_£tup_sx125x
(0, 
rf_˛kout
, 
rf_íabÀ
[0], 
rf_ødio_ty≥
[0], 
rf_rx_‰eq
[0]);

737 i‡(
îr
 != 0) {

738 
	`DEBUG_MSG
("ERROR: FailedÅo setup sx125xÑadio for RF chain 0\n");

739  
LGW_HAL_ERROR
;

741 
îr
 = 
	`lgw_£tup_sx125x
(1, 
rf_˛kout
, 
rf_íabÀ
[1], 
rf_ødio_ty≥
[1], 
rf_rx_‰eq
[1]);

742 i‡(
îr
 != 0) {

743 
	`DEBUG_MSG
("ERROR: FailedÅo setup sx125xÑadio for RF chain 0\n");

744  
LGW_HAL_ERROR
;

748 
	`lgw_ªg_w
(
LGW_GPIO_MODE
,31);

749 
	`lgw_ªg_w
(
LGW_GPIO_SELECT_OUTPUT
,2);

752 i‡(
	`lbt_is_íabÀd
(Ë=
åue
) {

753 
	`lgw_ªg_w
(
LGW_CLK32M_EN
, 1);

754 
i
 = 
	`lbt_£tup
();

755 i‡(
i
 !
LGW_LBT_SUCCESS
) {

756 
	`DEBUG_MSG
("ERROR:Übt_setup() didÇotÑeturn SUCCESS\n");

757  
LGW_HAL_ERROR
;

761 
	`lgw_ªg_w
(
LGW_CLK32M_EN
, 0);

762 
i
 = 
	`lbt_°¨t
();

763 i‡(
i
 !
LGW_LBT_SUCCESS
) {

764 
	`DEBUG_MSG
("ERROR:Übt_start() didÇotÑeturn SUCCESS\n");

765  
LGW_HAL_ERROR
;

770 
	`lgw_ªg_w
(
LGW_GLOBAL_EN
, 1);

771 
	`lgw_ªg_w
(
LGW_CLK32M_EN
, 1);

782 
ˇl_cmd
 = 0;

783 
ˇl_cmd
 |
rf_íabÀ
[0] ? 0x01 : 0x00;

784 
ˇl_cmd
 |
rf_íabÀ
[1] ? 0x02 : 0x00;

785 
ˇl_cmd
 |(
rf_íabÀ
[0] && 
rf_tx_íabÀ
[0]) ? 0x04 : 0x00;

786 
ˇl_cmd
 |(
rf_íabÀ
[1] && 
rf_tx_íabÀ
[1]) ? 0x08 : 0x00;

787 
ˇl_cmd
 |= 0x10;

789 
rf_ødio_ty≥
[0]) {

790 
LGW_RADIO_TYPE_SX1255
:

791 
ˇl_cmd
 |= 0x20;

793 
LGW_RADIO_TYPE_SX1257
:

794 
ˇl_cmd
 |= 0x00;

797 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
[0]);

801 
ˇl_cmd
 |= 0x00;

802 
ˇl_time
 = 2300;

805 
	`lﬂd_fúmw¨e
(
MCU_AGC
, 
ˇl_fúmw¨e
, 
MCU_AGC_FW_BYTE
);

806 
	`lgw_ªg_w
(
LGW_FORCE_HOST_RADIO_CTRL
, 0);

807 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
ˇl_cmd
);

808 
	`lgw_ªg_w
(
LGW_MCU_RST_1
, 0);

811 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

812 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

813 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

814 i‡(
fw_vîsi⁄
 !
FW_VERSION_CAL
) {

815 
	`¥ötf
("ERROR: Vîsi⁄ o‡ˇlibøti⁄ fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_CAL
);

819 
	`lgw_ªg_w
(
LGW_PAGE_REG
, 3);

820 
	`lgw_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
, 0);

823 
	`DEBUG_PRINTF
("NŸe: cÆibøti⁄ sèπed (time: %u ms)\n", 
ˇl_time
);

824 
	`waô_ms
(
ˇl_time
);

825 
	`lgw_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
, 1);

828 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

829 
ˇl_°©us
 = (
uöt8_t
)
ªad_vÆ
;

840 i‡((
ˇl_°©us
 & 0x81) != 0x81) {

841 
	`DEBUG_PRINTF
("ERROR: CALIBRATION FAILURE (STATUS = %u)\n", 
ˇl_°©us
);

842  
LGW_HAL_ERROR
;

844 
	`DEBUG_PRINTF
("NŸe: cÆibøti⁄ föished (°©u†%u)\n", 
ˇl_°©us
);

846 i‡(
rf_íabÀ
[0] && ((
ˇl_°©us
 & 0x02) == 0)) {

847 
	`DEBUG_MSG
("WARNING: calibration couldÇotáccessÑadio A\n");

849 i‡(
rf_íabÀ
[1] && ((
ˇl_°©us
 & 0x04) == 0)) {

850 
	`DEBUG_MSG
("WARNING: calibration couldÇotáccessÑadio B\n");

852 i‡(
rf_íabÀ
[0] && ((
ˇl_°©us
 & 0x08) == 0)) {

853 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio A for imageÑejection\n");

855 i‡(
rf_íabÀ
[1] && ((
ˇl_°©us
 & 0x10) == 0)) {

856 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio B for imageÑejection\n");

858 i‡(
rf_íabÀ
[0] && 
rf_tx_íabÀ
[0] && ((
ˇl_°©us
 & 0x20) == 0)) {

859 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio A for TX DC offset\n");

861 i‡(
rf_íabÀ
[1] && 
rf_tx_íabÀ
[1] && ((
ˇl_°©us
 & 0x40) == 0)) {

862 
	`DEBUG_MSG
("WARNING:Öroblem in calibration ofÑadio B for TX DC offset\n");

866 
i
=0; i<=7; ++i) {

867 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA0+
i
);

868 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

869 
ˇl_off£t_a_i
[
i
] = (
öt8_t
)
ªad_vÆ
;

870 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA8+
i
);

871 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

872 
ˇl_off£t_a_q
[
i
] = (
öt8_t
)
ªad_vÆ
;

873 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB0+
i
);

874 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

875 
ˇl_off£t_b_i
[
i
] = (
öt8_t
)
ªad_vÆ
;

876 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB8+
i
);

877 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

878 
ˇl_off£t_b_q
[
i
] = (
öt8_t
)
ªad_vÆ
;

882 
	`lgw_c⁄°™t_adju°
();

885 i‡(
rf_rx_‰eq
[0] == 0) {

886 
	`DEBUG_MSG
("ERROR: wrong configuration,Ñf_rx_freq[0] isÇot set\n");

887  
LGW_HAL_ERROR
;

891 
x
 = 4096000000 / (
rf_rx_‰eq
[0] >> 1);

892 
x
 = ( x > 63 ) ? 63 : x;

893 
	`lgw_ªg_w
(
LGW_FREQ_TO_TIME_DRIFT
, 
x
);

895 
x
 = 4096000000 / (
rf_rx_‰eq
[0] >> 3);

896 
x
 = ( x > 63 ) ? 63 : x;

897 
	`lgw_ªg_w
(
LGW_MBWSSF_FREQ_TO_TIME_DRIFT
, 
x
);

900 
ødio_£À˘
 = 0;

901 
i
=0; i<
LGW_MULTI_NB
; ++i) {

902 
ødio_£À˘
 +(
if_rf_chaö
[
i
] == 1 ? 1 << i : 0);

911 
	`lgw_ªg_w
(
LGW_IF_FREQ_0
, 
	`IF_HZ_TO_REG
(
if_‰eq
[0]));

912 
	`lgw_ªg_w
(
LGW_IF_FREQ_1
, 
	`IF_HZ_TO_REG
(
if_‰eq
[1]));

913 
	`lgw_ªg_w
(
LGW_IF_FREQ_2
, 
	`IF_HZ_TO_REG
(
if_‰eq
[2]));

914 
	`lgw_ªg_w
(
LGW_IF_FREQ_3
, 
	`IF_HZ_TO_REG
(
if_‰eq
[3]));

915 
	`lgw_ªg_w
(
LGW_IF_FREQ_4
, 
	`IF_HZ_TO_REG
(
if_‰eq
[4]));

916 
	`lgw_ªg_w
(
LGW_IF_FREQ_5
, 
	`IF_HZ_TO_REG
(
if_‰eq
[5]));

917 
	`lgw_ªg_w
(
LGW_IF_FREQ_6
, 
	`IF_HZ_TO_REG
(
if_‰eq
[6]));

918 
	`lgw_ªg_w
(
LGW_IF_FREQ_7
, 
	`IF_HZ_TO_REG
(
if_‰eq
[7]));

920 
	`lgw_ªg_w
(
LGW_CORR0_DETECT_EN
, (
if_íabÀ
[0] =
åue
Ë? 
l‹a_mu…i_sfmask
[0] : 0);

921 
	`lgw_ªg_w
(
LGW_CORR1_DETECT_EN
, (
if_íabÀ
[1] =
åue
Ë? 
l‹a_mu…i_sfmask
[1] : 0);

922 
	`lgw_ªg_w
(
LGW_CORR2_DETECT_EN
, (
if_íabÀ
[2] =
åue
Ë? 
l‹a_mu…i_sfmask
[2] : 0);

923 
	`lgw_ªg_w
(
LGW_CORR3_DETECT_EN
, (
if_íabÀ
[3] =
åue
Ë? 
l‹a_mu…i_sfmask
[3] : 0);

924 
	`lgw_ªg_w
(
LGW_CORR4_DETECT_EN
, (
if_íabÀ
[4] =
åue
Ë? 
l‹a_mu…i_sfmask
[4] : 0);

925 
	`lgw_ªg_w
(
LGW_CORR5_DETECT_EN
, (
if_íabÀ
[5] =
åue
Ë? 
l‹a_mu…i_sfmask
[5] : 0);

926 
	`lgw_ªg_w
(
LGW_CORR6_DETECT_EN
, (
if_íabÀ
[6] =
åue
Ë? 
l‹a_mu…i_sfmask
[6] : 0);

927 
	`lgw_ªg_w
(
LGW_CORR7_DETECT_EN
, (
if_íabÀ
[7] =
åue
Ë? 
l‹a_mu…i_sfmask
[7] : 0);

929 
	`lgw_ªg_w
(
LGW_PPM_OFFSET
, 0x60);

931 
	`lgw_ªg_w
(
LGW_CONCENTRATOR_MODEM_ENABLE
, 1);

934 
	`lgw_ªg_w
(
LGW_IF_FREQ_8
, 
	`IF_HZ_TO_REG
(
if_‰eq
[8]));

935 i‡(
if_íabÀ
[8] =
åue
) {

936 
	`lgw_ªg_w
(
LGW_MBWSSF_RADIO_SELECT
, 
if_rf_chaö
[8]);

937 
l‹a_rx_bw
) {

938 
BW_125KHZ
: 
	`lgw_ªg_w
(
LGW_MBWSSF_MODEM_BW
, 0); ;

939 
BW_250KHZ
: 
	`lgw_ªg_w
(
LGW_MBWSSF_MODEM_BW
, 1); ;

940 
BW_500KHZ
: 
	`lgw_ªg_w
(
LGW_MBWSSF_MODEM_BW
, 2); ;

942 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
l‹a_rx_bw
);

943  
LGW_HAL_ERROR
;

945 
l‹a_rx_sf
) {

946 
DR_LORA_SF7
: 
	`lgw_ªg_w
(
LGW_MBWSSF_RATE_SF
, 7); ;

947 
DR_LORA_SF8
: 
	`lgw_ªg_w
(
LGW_MBWSSF_RATE_SF
, 8); ;

948 
DR_LORA_SF9
: 
	`lgw_ªg_w
(
LGW_MBWSSF_RATE_SF
, 9); ;

949 
DR_LORA_SF10
: 
	`lgw_ªg_w
(
LGW_MBWSSF_RATE_SF
, 10); ;

950 
DR_LORA_SF11
: 
	`lgw_ªg_w
(
LGW_MBWSSF_RATE_SF
, 11); ;

951 
DR_LORA_SF12
: 
	`lgw_ªg_w
(
LGW_MBWSSF_RATE_SF
, 12); ;

953 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
l‹a_rx_sf
);

954  
LGW_HAL_ERROR
;

956 
	`lgw_ªg_w
(
LGW_MBWSSF_PPM_OFFSET
, 
l‹a_rx_µm_off£t
);

957 
	`lgw_ªg_w
(
LGW_MBWSSF_MODEM_ENABLE
, 1);

959 
	`lgw_ªg_w
(
LGW_MBWSSF_MODEM_ENABLE
, 0);

963 
	`lgw_ªg_w
(
LGW_IF_FREQ_9
, 
	`IF_HZ_TO_REG
(
if_‰eq
[9]));

964 
	`lgw_ªg_w
(
LGW_FSK_PSIZE
, 
fsk_sync_w‹d_size
-1);

965 
	`lgw_ªg_w
(
LGW_FSK_TX_PSIZE
, 
fsk_sync_w‹d_size
-1);

966 
fsk_sync_w‹d_ªg
 = 
fsk_sync_w‹d
 << (8 * (8 - 
fsk_sync_w‹d_size
));

967 
	`lgw_ªg_w
(
LGW_FSK_REF_PATTERN_LSB
, (
uöt32_t
)(0xFFFFFFFF & 
fsk_sync_w‹d_ªg
));

968 
	`lgw_ªg_w
(
LGW_FSK_REF_PATTERN_MSB
, (
uöt32_t
)(0xFFFFFFFF & (
fsk_sync_w‹d_ªg
 >> 32)));

969 i‡(
if_íabÀ
[9] =
åue
) {

970 
	`lgw_ªg_w
(
LGW_FSK_RADIO_SELECT
, 
if_rf_chaö
[9]);

971 
	`lgw_ªg_w
(
LGW_FSK_BR_RATIO
, 
LGW_XTAL_FREQU
/
fsk_rx_dr
);

972 
	`lgw_ªg_w
(
LGW_FSK_CH_BW_EXPO
, 
fsk_rx_bw
);

973 
	`lgw_ªg_w
(
LGW_FSK_MODEM_ENABLE
, 1);

975 
	`lgw_ªg_w
(
LGW_FSK_MODEM_ENABLE
, 0);

979 
	`lﬂd_fúmw¨e
(
MCU_ARB
, 
¨b_fúmw¨e
, 
MCU_ARB_FW_BYTE
);

980 
	`lﬂd_fúmw¨e
(
MCU_AGC
, 
agc_fúmw¨e
, 
MCU_AGC_FW_BYTE
);

983 
	`lgw_ªg_w
(
LGW_FORCE_HOST_RADIO_CTRL
, 0);

984 
	`lgw_ªg_w
(
LGW_FORCE_HOST_FE_CTRL
, 0);

985 
	`lgw_ªg_w
(
LGW_FORCE_DEC_FILTER_GAIN
, 0);

988 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 0);

989 
	`lgw_ªg_w
(
LGW_MCU_RST_0
, 0);

990 
	`lgw_ªg_w
(
LGW_MCU_RST_1
, 0);

993 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

994 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

995 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

996 i‡(
fw_vîsi⁄
 !
FW_VERSION_AGC
) {

997 
	`DEBUG_PRINTF
("ERROR: Vîsi⁄ o‡AGC fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_AGC
);

998  
LGW_HAL_ERROR
;

1000 
	`lgw_ªg_w
(
LGW_DBG_ARB_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

1001 
	`lgw_ªg_r
(
LGW_DBG_ARB_MCU_RAM_DATA
, &
ªad_vÆ
);

1002 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

1003 i‡(
fw_vîsi⁄
 !
FW_VERSION_ARB
) {

1004 
	`DEBUG_PRINTF
("ERROR: Vîsi⁄ o‡¨bôî fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_ARB
);

1005  
LGW_HAL_ERROR
;

1008 
	`DEBUG_MSG
("Info: Initialising AGC firmware...\n");

1009 
	`waô_ms
(1);

1011 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

1012 i‡(
ªad_vÆ
 != 0x10) {

1013 
	`DEBUG_PRINTF
("ERROR: AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

1014  
LGW_HAL_ERROR
;

1018 
i
 = 0; i < 
txgaö_lut
.
size
; ++i) {

1019 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

1020 
	`waô_ms
(1);

1021 
lﬂd_vÆ
 = 
txgaö_lut
.
lut
[
i
].
mix_gaö
 + (16 *Åxgaö_lut.lut[i].
dac_gaö
Ë+ (64 *Åxgaö_lut.lut[i].
∑_gaö
);

1022 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
lﬂd_vÆ
);

1023 
	`waô_ms
(1);

1024 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

1025 i‡(
ªad_vÆ
 !(0x30 + 
i
)) {

1026 
	`DEBUG_PRINTF
("ERROR: AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

1027  
LGW_HAL_ERROR
;

1031 i‡(
txgaö_lut
.
size
 < 
TX_GAIN_LUT_SIZE_MAX
) {

1032 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

1033 
	`waô_ms
(1);

1034 
lﬂd_vÆ
 = 
AGC_CMD_ABORT
;

1035 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
lﬂd_vÆ
);

1036 
	`waô_ms
(1);

1037 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

1038 i‡(
ªad_vÆ
 != 0x30) {

1039 
	`DEBUG_PRINTF
("ERROR: AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

1040  
LGW_HAL_ERROR
;

1045 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

1046 
	`waô_ms
(1);

1047 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 3);

1048 
	`waô_ms
(1);

1049 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

1050 i‡(
ªad_vÆ
 != 0x33) {

1051 
	`DEBUG_PRINTF
("ERROR: AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

1052  
LGW_HAL_ERROR
;

1056 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

1057 
	`waô_ms
(1);

1058 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 0);

1059 
	`waô_ms
(1);

1060 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

1061 i‡(
ªad_vÆ
 != 0x30) {

1062 
	`DEBUG_PRINTF
("ERROR: AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

1063  
LGW_HAL_ERROR
;

1067 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
AGC_CMD_WAIT
);

1068 
	`waô_ms
(1);

1069 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
, 
ødio_£À˘
);

1070 
	`waô_ms
(1);

1071 
	`DEBUG_MSG
("Info:Öutting back original RADIO_SELECT value\n");

1072 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

1073 i‡(
ªad_vÆ
 != 0x40) {

1074 
	`DEBUG_PRINTF
("ERROR: AGC FIRMWARE INITIALIZATION FAILURE, STATUS 0x%02X\n", (
uöt8_t
)
ªad_vÆ
);

1075  
LGW_HAL_ERROR
;

1079 
	`lgw_ªg_w
(
LGW_GPS_EN
, 1);

1082 i‡(
	`lbt_is_íabÀd
(Ë=
åue
) {

1083 
	`¥ötf
("INFO: Configuring LBT,Åhis mayÅake few seconds,Ölease wait...\n");

1084 
	`waô_ms
(8400);

1087 
lgw_is_°¨ãd
 = 
åue
;

1088  
LGW_HAL_SUCCESS
;

1089 
	}
}

1093 
	$lgw_°›
() {

1094 
	`lgw_so·_ª£t
();

1095 
	`lgw_disc⁄√˘
();

1097 
lgw_is_°¨ãd
 = 
Ál£
;

1098  
LGW_HAL_SUCCESS
;

1099 
	}
}

1103 
	$lgw_ª˚ive
(
uöt8_t
 
max_pkt
, 
lgw_pkt_rx_s
 *
pkt_d©a
) {

1104 
nb_pkt_„tch
;

1105 
lgw_pkt_rx_s
 *
p
;

1106 
uöt8_t
 
buff
[255+
RX_METADATA_NB
];

1107 
sz
;

1108 
ifmod
;

1109 
°©_fifo
;

1110 
uöt32_t
 
øw_time°amp
;

1111 
uöt32_t
 
dñay_x
, 
dñay_y
, 
dñay_z
;

1112 
uöt32_t
 
time°amp_c‹ª˘i⁄
;

1113 
uöt32_t
 
sf
, 
¸
, 
bw_pow
, 
¸c_í
, 
µm
;

1116 i‡(
lgw_is_°¨ãd
 =
Ál£
) {

1117 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS NOT RUNNING, START IT BEFORE RECEIVING\n");

1118  
LGW_HAL_ERROR
;

1122 i‡((
max_pkt
 <0Ë|| (max_pkà> 
LGW_PKT_FIFO_SIZE
)) {

1123 
	`DEBUG_PRINTF
("ERROR: %d = INVALID MAX NUMBER OF PACKETS TO FETCH\n", 
max_pkt
);

1124  
LGW_HAL_ERROR
;

1126 
	`CHECK_NULL
(
pkt_d©a
);

1129 
	`mem£t
 (
buff
, 0,  buff);

1132 
nb_pkt_„tch
 = 0;Çb_pkt_„tch < 
max_pkt
; ++nb_pkt_fetch) {

1135 
p
 = &
pkt_d©a
[
nb_pkt_„tch
];

1138 
	`lgw_ªg_rb
(
LGW_RX_PACKET_DATA_FIFO_NUM_STORED
, 
buff
, 5);

1145 i‡(
buff
[0] == 0) {

1150 i‡(
buff
[0] > 
LGW_PKT_FIFO_SIZE
) {

1151 
	`DEBUG_PRINTF
("WARNING: %u = INVALID NUMBER OF PACKETS TO FETCH, ABORTING\n", 
buff
[0]);

1155 
	`DEBUG_PRINTF
("FIFO c⁄ã¡: %x %x %x %x %x\n", 
buff
[0], buff[1], buff[2], buff[3], buff[4]);

1157 
p
->
size
 = 
buff
[4];

1158 
sz
 = 
p
->
size
;

1159 
°©_fifo
 = 
buff
[3];

1162 
	`lgw_ªg_rb
(
LGW_RX_DATA_BUF_DATA
, 
buff
, 
sz
+
RX_METADATA_NB
);

1165 
	`mem˝y
((*)
p
->
∑ylﬂd
, (*)
buff
, 
sz
);

1168 
p
->
if_chaö
 = 
buff
[
sz
+0];

1169 i‡(
p
->
if_chaö
 >
LGW_IF_CHAIN_NB
) {

1170 
	`DEBUG_PRINTF
("WARNING: %u NOT A VALID IF_CHAIN NUMBER, ABORTING\n", 
p
->
if_chaö
);

1173 
ifmod
 = 
ifmod_c⁄fig
[
p
->
if_chaö
];

1174 
	`DEBUG_PRINTF
("[%d %d]\n", 
p
->
if_chaö
, 
ifmod
);

1176 
p
->
rf_chaö
 = (
uöt8_t
)
if_rf_chaö
[p->
if_chaö
];

1177 
p
->
‰eq_hz
 = (
uöt32_t
)((
öt32_t
)
rf_rx_‰eq
[p->
rf_chaö
] + 
if_‰eq
[p->
if_chaö
]);

1178 
p
->
rssi
 = ()
buff
[
sz
+5] + 
rf_rssi_off£t
[p->
rf_chaö
];

1180 i‡((
ifmod
 =
IF_LORA_MULTI
Ë|| (ifmod =
IF_LORA_STD
)) {

1181 
	`DEBUG_MSG
("Note: LoRaÖacket\n");

1182 
°©_fifo
 & 0x07) {

1184 
p
->
°©us
 = 
STAT_CRC_OK
;

1185 
¸c_í
 = 1;

1188 
p
->
°©us
 = 
STAT_CRC_BAD
;

1189 
¸c_í
 = 1;

1192 
p
->
°©us
 = 
STAT_NO_CRC
;

1193 
¸c_í
 = 0;

1196 
p
->
°©us
 = 
STAT_UNDEFINED
;

1197 
¸c_í
 = 0;

1199 
p
->
moduœti⁄
 = 
MOD_LORA
;

1200 
p
->
¢r
 = (()((
öt8_t
)
buff
[
sz
+2]))/4;

1201 
p
->
¢r_mö
 = (()((
öt8_t
)
buff
[
sz
+3]))/4;

1202 
p
->
¢r_max
 = (()((
öt8_t
)
buff
[
sz
+4]))/4;

1203 i‡(
ifmod
 =
IF_LORA_MULTI
) {

1204 
p
->
b™dwidth
 = 
BW_125KHZ
;

1206 
p
->
b™dwidth
 = 
l‹a_rx_bw
;

1208 
sf
 = (
buff
[
sz
+1] >> 4) & 0x0F;

1209 
sf
) {

1210 7: 
p
->
d©¨©e
 = 
DR_LORA_SF7
; ;

1211 8: 
p
->
d©¨©e
 = 
DR_LORA_SF8
; ;

1212 9: 
p
->
d©¨©e
 = 
DR_LORA_SF9
; ;

1213 10: 
p
->
d©¨©e
 = 
DR_LORA_SF10
; ;

1214 11: 
p
->
d©¨©e
 = 
DR_LORA_SF11
; ;

1215 12: 
p
->
d©¨©e
 = 
DR_LORA_SF12
; ;

1216 : 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

1218 
¸
 = (
buff
[
sz
+1] >> 1) & 0x07;

1219 
¸
) {

1220 1: 
p
->
codî©e
 = 
CR_LORA_4_5
; ;

1221 2: 
p
->
codî©e
 = 
CR_LORA_4_6
; ;

1222 3: 
p
->
codî©e
 = 
CR_LORA_4_7
; ;

1223 4: 
p
->
codî©e
 = 
CR_LORA_4_8
; ;

1224 : 
p
->
codî©e
 = 
CR_UNDEFINED
;

1228 i‡(
	`SET_PPM_ON
(
p
->
b™dwidth
,p->
d©¨©e
)) {

1229 
µm
 = 1;

1231 
µm
 = 0;

1235 i‡(
ifmod
 =
IF_LORA_STD
) {

1236 
l‹a_rx_bw
) {

1237 
BW_125KHZ
:

1238 
dñay_x
 = 64;

1239 
bw_pow
 = 1;

1241 
BW_250KHZ
:

1242 
dñay_x
 = 32;

1243 
bw_pow
 = 2;

1245 
BW_500KHZ
:

1246 
dñay_x
 = 16;

1247 
bw_pow
 = 4;

1250 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
p
->
b™dwidth
);

1251 
dñay_x
 = 0;

1252 
bw_pow
 = 0;

1255 
dñay_x
 = 114;

1256 
bw_pow
 = 1;

1260 i‡((
sf
 >6Ë&& (s‡<12Ë&& (
bw_pow
 > 0)) {

1261 i‡((2*(
sz
 + 2*
¸c_í
Ë- (
sf
-7)) <= 0) {

1262 
dñay_y
 = ( ((1<<(
sf
-1)Ë* (sf+1)Ë+ (3 * (1<<(sf-4))ËË/ 
bw_pow
;

1263 
dñay_z
 = 32 * (2*(
sz
+2*
¸c_í
Ë+ 5Ë/ 
bw_pow
;

1265 
dñay_y
 = ( ((1<<(
sf
-1)Ë* (sf+1)Ë+ ((4 - 
µm
Ë* (1<<(sf-4))ËË/ 
bw_pow
;

1266 
dñay_z
 = (16 + 4*
¸
Ë* (((2*(
sz
+2*
¸c_í
)-
sf
+6Ë% (s‡- 2*
µm
)Ë+ 1Ë/ 
bw_pow
;

1268 
time°amp_c‹ª˘i⁄
 = 
dñay_x
 + 
dñay_y
 + 
dñay_z
;

1270 
time°amp_c‹ª˘i⁄
 = 0;

1271 
	`DEBUG_MSG
("WARNING: invalidÖacket,ÇoÅimestamp correction\n");

1275 i‡(
ifmod
 =
IF_LORA_MULTI
) {

1276 
p
->
rssi
 -
RSSI_MULTI_BIAS
;

1279 } i‡(
ifmod
 =
IF_FSK_STD
) {

1280 
	`DEBUG_MSG
("Note: FSKÖacket\n");

1281 
°©_fifo
 & 0x07) {

1283 
p
->
°©us
 = 
STAT_CRC_OK
;

1286 
p
->
°©us
 = 
STAT_CRC_BAD
;

1289 
p
->
°©us
 = 
STAT_NO_CRC
;

1292 
p
->
°©us
 = 
STAT_UNDEFINED
;

1295 
p
->
moduœti⁄
 = 
MOD_FSK
;

1296 
p
->
¢r
 = -128.0;

1297 
p
->
¢r_mö
 = -128.0;

1298 
p
->
¢r_max
 = -128.0;

1299 
p
->
b™dwidth
 = 
fsk_rx_bw
;

1300 
p
->
d©¨©e
 = 
fsk_rx_dr
;

1301 
p
->
codî©e
 = 
CR_UNDEFINED
;

1302 
time°amp_c‹ª˘i⁄
 = ((
uöt32_t
)680000 / 
fsk_rx_dr
) - 20;

1305 
p
->
rssi
 = 
RSSI_FSK_POLY_0
 + 
RSSI_FSK_POLY_1
 *Ö->rssò+ 
RSSI_FSK_POLY_2
 * 
	`pow
(p->rssi, 2);

1307 
	`DEBUG_MSG
("ERROR: UNEXPECTED PACKET ORIGIN\n");

1308 
p
->
°©us
 = 
STAT_UNDEFINED
;

1309 
p
->
moduœti⁄
 = 
MOD_UNDEFINED
;

1310 
p
->
rssi
 = -128.0;

1311 
p
->
¢r
 = -128.0;

1312 
p
->
¢r_mö
 = -128.0;

1313 
p
->
¢r_max
 = -128.0;

1314 
p
->
b™dwidth
 = 
BW_UNDEFINED
;

1315 
p
->
d©¨©e
 = 
DR_UNDEFINED
;

1316 
p
->
codî©e
 = 
CR_UNDEFINED
;

1317 
time°amp_c‹ª˘i⁄
 = 0;

1320 
øw_time°amp
 = (
uöt32_t
)
buff
[
sz
+6] + ((uint32_t)buff[sz+7] << 8) + ((uint32_t)buff[sz+8] << 16) + ((uint32_t)buff[sz+9] << 24);

1321 
p
->
cou¡_us
 = 
øw_time°amp
 - 
time°amp_c‹ª˘i⁄
;

1322 
p
->
¸c
 = (
uöt16_t
)
buff
[
sz
+10] + ((uint16_t)buff[sz+11] << 8);

1325 
	`lgw_ªg_w
(
LGW_RX_PACKET_DATA_FIFO_NUM_STORED
, 0);

1328  
nb_pkt_„tch
;

1329 
	}
}

1333 
	$lgw_£nd
(
lgw_pkt_tx_s
 
pkt_d©a
) {

1334 
i
, 
x
;

1335 
uöt8_t
 
buff
[256+
TX_METADATA_NB
];

1336 
uöt32_t
 
∑π_öt
 = 0;

1337 
uöt32_t
 
∑π_‰ac
 = 0;

1338 
uöt16_t
 
fsk_dr_div
;

1339 
å™s„r_size
 = 0;

1340 
∑ylﬂd_off£t
 = 0;

1341 
uöt8_t
 
pow_ödex
 = 0;

1342 
uöt8_t
 
èrgë_mix_gaö
 = 0;

1343 
uöt32_t
 
cou¡_åig
 = 0;

1344 
boﬁ
 
tx_Ælowed
 = 
Ál£
;

1345 
uöt16_t
 
tx_°¨t_dñay
;

1346 
boﬁ
 
tx_nŸch_íabÀ
 = 
Ál£
;

1349 i‡(
lgw_is_°¨ãd
 =
Ál£
) {

1350 
	`DEBUG_MSG
("ERROR: CONCENTRATOR IS NOT RUNNING, START IT BEFORE SENDING\n");

1351  
LGW_HAL_ERROR
;

1355 i‡(
pkt_d©a
.
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

1356 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN TO SEND PACKETS\n");

1357  
LGW_HAL_ERROR
;

1361 i‡(
rf_tx_íabÀ
[
pkt_d©a
.
rf_chaö
] =
Ál£
) {

1362 
	`DEBUG_MSG
("ERROR: SELECTED RF_CHAIN IS DISABLED FOR TX ON SELECTED BOARD\n");

1363  
LGW_HAL_ERROR
;

1365 i‡(
rf_íabÀ
[
pkt_d©a
.
rf_chaö
] =
Ál£
) {

1366 
	`DEBUG_MSG
("ERROR: SELECTED RF_CHAIN IS DISABLED\n");

1367  
LGW_HAL_ERROR
;

1369 i‡(!
	`IS_TX_MODE
(
pkt_d©a
.
tx_mode
)) {

1370 
	`DEBUG_MSG
("ERROR: TX_MODE NOT SUPPORTED\n");

1371  
LGW_HAL_ERROR
;

1373 i‡(
pkt_d©a
.
moduœti⁄
 =
MOD_LORA
) {

1374 i‡(!
	`IS_LORA_BW
(
pkt_d©a
.
b™dwidth
)) {

1375 
	`DEBUG_MSG
("ERROR: BANDWIDTH NOT SUPPORTED BY LORA TX\n");

1376  
LGW_HAL_ERROR
;

1378 i‡(!
	`IS_LORA_STD_DR
(
pkt_d©a
.
d©¨©e
)) {

1379 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY LORA TX\n");

1380  
LGW_HAL_ERROR
;

1382 i‡(!
	`IS_LORA_CR
(
pkt_d©a
.
codî©e
)) {

1383 
	`DEBUG_MSG
("ERROR: CODERATE NOT SUPPORTED BY LORA TX\n");

1384  
LGW_HAL_ERROR
;

1386 i‡(
pkt_d©a
.
size
 > 255) {

1387 
	`DEBUG_MSG
("ERROR: PAYLOAD LENGTH TOO BIG FOR LORA TX\n");

1388  
LGW_HAL_ERROR
;

1390 } i‡(
pkt_d©a
.
moduœti⁄
 =
MOD_FSK
) {

1391 if((
pkt_d©a
.
f_dev
 < 1) || (pkt_data.f_dev > 200)) {

1392 
	`DEBUG_MSG
("ERROR: TX FREQUENCY DEVIATION OUT OF ACCEPTABLE RANGE\n");

1393  
LGW_HAL_ERROR
;

1395 if(!
	`IS_FSK_DR
(
pkt_d©a
.
d©¨©e
)) {

1396 
	`DEBUG_MSG
("ERROR: DATARATE NOT SUPPORTED BY FSK IF CHAIN\n");

1397  
LGW_HAL_ERROR
;

1399 i‡(
pkt_d©a
.
size
 > 255) {

1400 
	`DEBUG_MSG
("ERROR: PAYLOAD LENGTH TOO BIG FOR FSK TX\n");

1401  
LGW_HAL_ERROR
;

1404 
	`DEBUG_MSG
("ERROR: INVALID TX MODULATION\n");

1405  
LGW_HAL_ERROR
;

1409 i‡((
pkt_d©a
.
moduœti⁄
 =
MOD_LORA
Ë&& (pkt_d©a.
b™dwidth
 =
BW_125KHZ
)) {

1410 
tx_nŸch_íabÀ
 = 
åue
;

1414 
tx_°¨t_dñay
 = 
	`lgw_gë_tx_°¨t_dñay
(
tx_nŸch_íabÀ
, 
pkt_d©a
.
b™dwidth
);

1417 
pow_ödex
 = 
txgaö_lut
.
size
-1;Öow_index > 0;Öow_index--) {

1418 i‡(
txgaö_lut
.
lut
[
pow_ödex
].
rf_powî
 <
pkt_d©a
.rf_power) {

1424 
èrgë_mix_gaö
 = 
txgaö_lut
.
lut
[
pow_ödex
].
mix_gaö
;

1425 i‡(
pkt_d©a
.
rf_chaö
 == 0) {

1426 
	`lgw_ªg_w
(
LGW_TX_OFFSET_I
, 
ˇl_off£t_a_i
[
èrgë_mix_gaö
 - 8]);

1427 
	`lgw_ªg_w
(
LGW_TX_OFFSET_Q
, 
ˇl_off£t_a_q
[
èrgë_mix_gaö
 - 8]);

1429 
	`lgw_ªg_w
(
LGW_TX_OFFSET_I
, 
ˇl_off£t_b_i
[
èrgë_mix_gaö
 - 8]);

1430 
	`lgw_ªg_w
(
LGW_TX_OFFSET_Q
, 
ˇl_off£t_b_q
[
èrgë_mix_gaö
 - 8]);

1434 
	`lgw_ªg_w
(
LGW_TX_GAIN
, 
txgaö_lut
.
lut
[
pow_ödex
].
dig_gaö
);

1437 
å™s„r_size
 = 
TX_METADATA_NB
 + 
pkt_d©a
.
size
;

1438 
∑ylﬂd_off£t
 = 
TX_METADATA_NB
;

1441 
rf_ødio_ty≥
[0]) {

1442 
LGW_RADIO_TYPE_SX1255
:

1443 
∑π_öt
 = 
pkt_d©a
.
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

1444 
∑π_‰ac
 = ((
pkt_d©a
.
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

1446 
LGW_RADIO_TYPE_SX1257
:

1447 
∑π_öt
 = 
pkt_d©a
.
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

1448 
∑π_‰ac
 = ((
pkt_d©a
.
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

1451 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
[0]);

1455 
buff
[0] = 0xFF & 
∑π_öt
;

1456 
buff
[1] = 0xFF & (
∑π_‰ac
 >> 8);

1457 
buff
[2] = 0xFF & 
∑π_‰ac
;

1461 i‡(
pkt_d©a
.
tx_mode
 =
TIMESTAMPED
)

1463 
cou¡_åig
 = 
pkt_d©a
.
cou¡_us
 - (
uöt32_t
)
tx_°¨t_dñay
;

1464 
buff
[3] = 0xFF & (
cou¡_åig
 >> 24);

1465 
buff
[4] = 0xFF & (
cou¡_åig
 >> 16);

1466 
buff
[5] = 0xFF & (
cou¡_åig
 >> 8);

1467 
buff
[6] = 0xFF & 
cou¡_åig
;

1471 i‡(
pkt_d©a
.
moduœti⁄
 =
MOD_LORA
) {

1473 
buff
[7] = (0x20 & (
pkt_d©a
.
rf_chaö
 << 5)Ë| (0x0F & 
pow_ödex
);

1475 
buff
[8] = 0;

1478 
pkt_d©a
.
d©¨©e
) {

1479 
DR_LORA_SF7
: 
buff
[9] = 7; ;

1480 
DR_LORA_SF8
: 
buff
[9] = 8; ;

1481 
DR_LORA_SF9
: 
buff
[9] = 9; ;

1482 
DR_LORA_SF10
: 
buff
[9] = 10; ;

1483 
DR_LORA_SF11
: 
buff
[9] = 11; ;

1484 
DR_LORA_SF12
: 
buff
[9] = 12; ;

1485 : 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
.
d©¨©e
);

1487 
pkt_d©a
.
codî©e
) {

1488 
CR_LORA_4_5
: 
buff
[9] |= 1 << 4; ;

1489 
CR_LORA_4_6
: 
buff
[9] |= 2 << 4; ;

1490 
CR_LORA_4_7
: 
buff
[9] |= 3 << 4; ;

1491 
CR_LORA_4_8
: 
buff
[9] |= 4 << 4; ;

1492 : 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
.
codî©e
);

1494 i‡(
pkt_d©a
.
no_¸c
 =
Ál£
) {

1495 
buff
[9] |= 0x80;

1497 
	`DEBUG_MSG
("Info:Öacket will be sent without CRC\n");

1501 
buff
[10] = 
pkt_d©a
.
size
;

1504 
pkt_d©a
.
b™dwidth
) {

1505 
BW_125KHZ
: 
buff
[11] = 0; ;

1506 
BW_250KHZ
: 
buff
[11] = 1; ;

1507 
BW_500KHZ
: 
buff
[11] = 2; ;

1508 : 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
.
b™dwidth
);

1510 i‡(
pkt_d©a
.
no_hódî
 =
åue
) {

1511 
buff
[11] |= 0x04;

1513 i‡(
	`SET_PPM_ON
(
pkt_d©a
.
b™dwidth
,pkt_d©a.
d©¨©e
)) {

1514 
buff
[11] |= 0x08;

1516 i‡(
pkt_d©a
.
övît_pﬁ
 =
åue
) {

1517 
buff
[11] |= 0x10;

1521 i‡(
pkt_d©a
.
¥ómbÀ
 == 0) {

1522 
pkt_d©a
.
¥ómbÀ
 = 
STD_LORA_PREAMBLE
;

1523 } i‡(
pkt_d©a
.
¥ómbÀ
 < 
MIN_LORA_PREAMBLE
) {

1524 
pkt_d©a
.
¥ómbÀ
 = 
MIN_LORA_PREAMBLE
;

1525 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum LoRaÖreamble size\n");

1527 
buff
[12] = 0xFF & (
pkt_d©a
.
¥ómbÀ
 >> 8);

1528 
buff
[13] = 0xFF & 
pkt_d©a
.
¥ómbÀ
;

1531 
buff
[14] = 0;

1532 
buff
[15] = 0;

1535 
buff
[0] &= 0x3F;

1536 i‡(
pkt_d©a
.
b™dwidth
 =
BW_500KHZ
) {

1537 
buff
[0] |= 0x80;

1541 i‡(
tx_nŸch_íabÀ
 =
åue
) {

1542 
	`DEBUG_MSG
("INFO: Enabling TXÇotch filter\n");

1543 
buff
[0] |= 0x40;

1545 } i‡(
pkt_d©a
.
moduœti⁄
 =
MOD_FSK
) {

1547 
buff
[7] = (0x20 & (
pkt_d©a
.
rf_chaö
 << 5)Ë| 0x10 | (0x0F & 
pow_ödex
);

1549 
buff
[8] = 0;

1552 
buff
[9] = 
pkt_d©a
.
f_dev
;

1555 
buff
[10] = 
pkt_d©a
.
size
;

1559 
buff
[11] = 0x01 | (
pkt_d©a
.
no_¸c
?0:0x02) | (0x02 << 2);

1562 i‡(
pkt_d©a
.
¥ómbÀ
 == 0) {

1563 
pkt_d©a
.
¥ómbÀ
 = 
STD_FSK_PREAMBLE
;

1564 } i‡(
pkt_d©a
.
¥ómbÀ
 < 
MIN_FSK_PREAMBLE
) {

1565 
pkt_d©a
.
¥ómbÀ
 = 
MIN_FSK_PREAMBLE
;

1566 
	`DEBUG_MSG
("Note:ÖreambleÜengthádjustedÅoÑespect minimum FSKÖreamble size\n");

1568 
buff
[12] = 0xFF & (
pkt_d©a
.
¥ómbÀ
 >> 8);

1569 
buff
[13] = 0xFF & 
pkt_d©a
.
¥ómbÀ
;

1572 
fsk_dr_div
 = (
uöt16_t
)((
uöt32_t
)
LGW_XTAL_FREQU
 / 
pkt_d©a
.
d©¨©e
);

1573 
buff
[14] = 0xFF & (
fsk_dr_div
 >> 8);

1574 
buff
[15] = 0xFF & 
fsk_dr_div
;

1577 
buff
[16] = 
pkt_d©a
.
size
;

1578 ++
å™s„r_size
;

1579 ++
∑ylﬂd_off£t
;

1582 
buff
[0] &= 0x7F;

1585 
	`DEBUG_MSG
("ERROR: INVALID TX MODULATION..\n");

1586  
LGW_HAL_ERROR
;

1590 
	`lgw_ªg_w
(
LGW_TX_START_DELAY
, 
tx_°¨t_dñay
);

1593 
	`mem˝y
((*)(
buff
 + 
∑ylﬂd_off£t
), (*)(
pkt_d©a
.
∑ylﬂd
),Ökt_d©a.
size
);

1596 
	`lgw_ab‹t_tx
();

1599 
	`lgw_ªg_w
(
LGW_TX_DATA_BUF_ADDR
, 0);

1600 
	`lgw_ªg_wb
(
LGW_TX_DATA_BUF_DATA
, 
buff
, 
å™s„r_size
);

1601 
	`DEBUG_ARRAY
(
i
, 
å™s„r_size
, 
buff
);

1603 
x
 = 
	`lbt_is_ch™√l_‰ì
(&
pkt_d©a
, 
tx_°¨t_dñay
, &
tx_Ælowed
);

1604 i‡(
x
 !
LGW_LBT_SUCCESS
) {

1605 
	`DEBUG_MSG
("ERROR: FailedÅo check channelávailability for TX\n");

1606  
LGW_HAL_ERROR
;

1608 i‡(
tx_Ælowed
 =
åue
) {

1609 
pkt_d©a
.
tx_mode
) {

1610 
IMMEDIATE
:

1611 
	`lgw_ªg_w
(
LGW_TX_TRIG_IMMEDIATE
, 1);

1614 
TIMESTAMPED
:

1615 
	`lgw_ªg_w
(
LGW_TX_TRIG_DELAYED
, 1);

1618 
ON_GPS
:

1619 
	`lgw_ªg_w
(
LGW_TX_TRIG_GPS
, 1);

1623 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
pkt_d©a
.
tx_mode
);

1624  
LGW_HAL_ERROR
;

1627 
	`DEBUG_MSG
("ERROR: Cannot sendÖacket, channel is busy (LBT)\n");

1628  
LGW_LBT_ISSUE
;

1631  
LGW_HAL_SUCCESS
;

1632 
	}
}

1636 
	$lgw_°©us
(
uöt8_t
 
£À˘
, uöt8_à*
code
) {

1637 
öt32_t
 
ªad_vÆue
;

1640 
	`CHECK_NULL
(
code
);

1642 i‡(
£À˘
 =
TX_STATUS
) {

1643 
	`lgw_ªg_r
(
LGW_TX_STATUS
, &
ªad_vÆue
);

1644 i‡(
lgw_is_°¨ãd
 =
Ál£
) {

1645 *
code
 = 
TX_OFF
;

1646 } i‡((
ªad_vÆue
 & 0x10) == 0) {

1647 *
code
 = 
TX_FREE
;

1648 } i‡((
ªad_vÆue
 & 0x60) != 0) {

1649 *
code
 = 
TX_EMITTING
;

1651 *
code
 = 
TX_SCHEDULED
;

1653  
LGW_HAL_SUCCESS
;

1655 } i‡(
£À˘
 =
RX_STATUS
) {

1656 *
code
 = 
RX_STATUS_UNKNOWN
;

1657  
LGW_HAL_SUCCESS
;

1660 
	`DEBUG_MSG
("ERROR: SELECTION INVALID, NO STATUS TO RETURN\n");

1661  
LGW_HAL_ERROR
;

1664 
	}
}

1668 
	$lgw_ab‹t_tx
() {

1669 
i
;

1671 
i
 = 
	`lgw_ªg_w
(
LGW_TX_TRIG_ALL
, 0);

1673 i‡(
i
 =
LGW_REG_SUCCESS
Ë 
LGW_HAL_SUCCESS
;

1674  
LGW_HAL_ERROR
;

1675 
	}
}

1679 
	$lgw_gë_åig˙t
(
uöt32_t
* 
åig_˙t_us
) {

1680 
i
;

1681 
öt32_t
 
vÆ
;

1683 
i
 = 
	`lgw_ªg_r
(
LGW_TIMESTAMP
, &
vÆ
);

1684 i‡(
i
 =
LGW_REG_SUCCESS
) {

1685 *
åig_˙t_us
 = (
uöt32_t
)
vÆ
;

1686  
LGW_HAL_SUCCESS
;

1688  
LGW_HAL_ERROR
;

1690 
	}
}

1694 c⁄° * 
	$lgw_vîsi⁄_öfo
() {

1695  
lgw_vîsi⁄_°rög
;

1696 
	}
}

1700 
uöt32_t
 
	$lgw_time_⁄_aú
(
lgw_pkt_tx_s
 *
∑ckë
) {

1701 
öt32_t
 
vÆ
;

1702 
uöt8_t
 
SF
, 
H
, 
DE
;

1703 
uöt16_t
 
BW
;

1704 
uöt32_t
 
∑ylﬂdSymbNb
, 
T∑ckë
;

1705 
Tsym
, 
T¥ómbÀ
, 
T∑ylﬂd
, 
Tfsk
;

1707 i‡(
∑ckë
 =
NULL
) {

1708 
	`DEBUG_MSG
("ERROR: FailedÅo computeÅime onáir, wrongÖarameter\n");

1712 i‡(
∑ckë
->
moduœti⁄
 =
MOD_LORA
) {

1714 
vÆ
 = 
	`lgw_bw_gëvÆ
(
∑ckë
->
b™dwidth
);

1715 i‡(
vÆ
 != -1) {

1716 
BW
 = (
uöt16_t
)(
vÆ
 / 1E3);

1718 
	`DEBUG_PRINTF
("ERROR: C™nŸ compuãÅimê⁄áú f‹Åhi†∑ckë, unsuµ‹ãd b™dwidth (0x%02X)\n", 
∑ckë
->
b™dwidth
);

1723 
vÆ
 = 
	`lgw_sf_gëvÆ
(
∑ckë
->
d©¨©e
);

1724 i‡(
vÆ
 != -1) {

1725 
SF
 = (
uöt8_t
)
vÆ
;

1727 
	`DEBUG_PRINTF
("ERROR: C™nŸ compuãÅimê⁄áú f‹Åhi†∑ckë, unsuµ‹ãd d©¨©ê(0x%02X)\n", 
∑ckë
->
d©¨©e
);

1732 
Tsym
 = 
	`pow
(2, 
SF
Ë/ 
BW
;

1735 
T¥ómbÀ
 = (()(
∑ckë
->
¥ómbÀ
Ë+ 4.25Ë* 
Tsym
;

1738 
H
 = (
∑ckë
->
no_hódî
==
Ál£
) ? 0 : 1;

1739 
DE
 = (
SF
 >= 11) ? 1 : 0;

1741 
∑ylﬂdSymbNb
 = 8 + (
	`˚û
(()(8*
∑ckë
->
size
 - 4*
SF
 + 28 + 16 - 20*
H
Ë/ ()(4*(SF - 2*
DE
))Ë* (∑ckë->
codî©e
));

1743 
T∑ylﬂd
 = 
∑ylﬂdSymbNb
 * 
Tsym
;

1746 
T∑ckë
 = 
T¥ómbÀ
 + 
T∑ylﬂd
;

1747 } i‡(
∑ckë
->
moduœti⁄
 =
MOD_FSK
) {

1755 
Tfsk
 = (8 * ()(
∑ckë
->
¥ómbÀ
 + 
fsk_sync_w‹d_size
 + 1 +Öackë->
size
 + (’ackë->
no_¸c
 =
åue
Ë? 0 : 2)Ë/ (Ìackë->
d©¨©e
) * 1E3;

1758 
T∑ckë
 = (
uöt32_t
)
Tfsk
 + 1;

1760 
T∑ckë
 = 0;

1761 
	`DEBUG_PRINTF
("ERROR: C™nŸ compuãÅimê⁄áú f‹Åhi†∑ckë, unsuµ‹ãd moduœti⁄ (0x%02X)\n", 
∑ckë
->
moduœti⁄
);

1764  
T∑ckë
;

1765 
	}
}

	@libloragw/src/loragw_lbt.c

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 
	~"l‹agw_ødio.h
"

26 
	~"l‹agw_aux.h
"

27 
	~"l‹agw_lbt.h
"

28 
	~"l‹agw_Âga.h
"

33 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

34 #i‡
DEBUG_LBT
 == 1

35 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

36 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

37 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

39 
	#DEBUG_MSG
(
°r
)

	)

40 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

41 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

44 
	#LBT_TIMESTAMP_MASK
 0x007FF000

	)

55 *
lgw_•i_èrgë
;

56 
uöt8_t
 
lgw_•i_mux_mode
;

57 
uöt16_t
 
lgw_i_tx_°¨t_dñay_us
;

62 
boﬁ
 
	glbt_íabÀ
;

63 
uöt8_t
 
	glbt_nb_a˘ive_ch™√l
;

64 
öt8_t
 
	glbt_rssi_èrgë_dBm
;

65 
öt8_t
 
	glbt_rssi_off£t_dB
;

66 
uöt32_t
 
	glbt_°¨t_‰eq
;

67 
lgw_c⁄f_lbt_ch™_s
 
	glbt_ch™√l_cfg
[
LBT_CHANNEL_FREQ_NB
];

72 
boﬁ
 
is_equÆ_‰eq
(
uöt32_t
 
a
, uöt32_à
b
);

77 
	$lbt_£tc⁄f
(
lgw_c⁄f_lbt_s
 * 
c⁄f
) {

78 
i
;

81 i‡(
c⁄f
 =
NULL
) {

82  
LGW_LBT_ERROR
;

84 i‡((
c⁄f
->
nb_ch™√l
 < 1Ë|| (c⁄f->nb_ch™√»> 
LBT_CHANNEL_FREQ_NB
)) {

85 
	`DEBUG_PRINTF
("ERROR: Numbî o‡deföed LBT ch™√l†i†ouào‡øngê(%u)\n", 
c⁄f
->
nb_ch™√l
);

86  
LGW_LBT_ERROR
;

90 
	`mem£t
(
lbt_ch™√l_cfg
, 0, Übt_channel_cfg);

93 
lbt_íabÀ
 = 
c⁄f
->
íabÀ
;

94 
lbt_nb_a˘ive_ch™√l
 = 
c⁄f
->
nb_ch™√l
;

95 
lbt_rssi_èrgë_dBm
 = 
c⁄f
->
rssi_èrgë
;

96 
lbt_rssi_off£t_dB
 = 
c⁄f
->
rssi_off£t
;

98 
i
=0; i<
lbt_nb_a˘ive_ch™√l
; i++) {

99 
lbt_ch™√l_cfg
[
i
].
‰eq_hz
 = 
c⁄f
->
ch™√ls
[i].freq_hz;

100 
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 = 
c⁄f
->
ch™√ls
[i].scan_time_us;

103  
LGW_LBT_SUCCESS
;

104 
	}
}

108 
	$lbt_£tup
() {

109 
x
, 
i
;

110 
öt32_t
 
vÆ
;

111 
uöt32_t
 
‰eq_off£t
;

114 
x
 = 
	`lgw_Âga_ªg_r
(
LGW_FPGA_FEATURE
, &
vÆ
);

115 i‡(
x
 !
LGW_REG_SUCCESS
) {

116 
	`DEBUG_MSG
("ERROR: FailedÅoÑead FPGA FeaturesÑegister\n");

117  
LGW_LBT_ERROR
;

119 i‡(
	`TAKE_N_BITS_FROM
((
uöt8_t
)
vÆ
, 2, 1) != 1) {

120 
	`DEBUG_MSG
("ERROR: No support for LBT in FPGA\n");

121  
LGW_LBT_ERROR
;

125 
x
 = 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_INITIAL_FREQ
, &
vÆ
);

126 i‡(
x
 !
LGW_REG_SUCCESS
) {

127 
	`DEBUG_MSG
("ERROR: FailedÅoÑead LBT initial frequency from FPGA\n");

128  
LGW_LBT_ERROR
;

130 
vÆ
) {

132 
lbt_°¨t_‰eq
 = 915000000;

135 
lbt_°¨t_‰eq
 = 863000000;

138 
	`DEBUG_PRINTF
("ERROR: LBT sèπ fªquícy %d i†nŸ suµ‹ãd\n", 
vÆ
);

139  
LGW_LBT_ERROR
;

143 
x
 = 
	`lgw_£tup_sx127x
(
lbt_°¨t_‰eq
, 
MOD_FSK
, 
LGW_SX127X_RXBW_100K_HZ
, 
lbt_rssi_off£t_dB
);

144 i‡(
x
 !
LGW_REG_SUCCESS
) {

145 
	`DEBUG_MSG
("ERROR: FailedÅo configure SX127x for LBT\n");

146  
LGW_LBT_ERROR
;

150 
vÆ
 = -2*
lbt_rssi_èrgë_dBm
;

151 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_RSSI_TARGET
, 
vÆ
);

152 i‡(
x
 !
LGW_REG_SUCCESS
) {

153 
	`DEBUG_MSG
("ERROR: FailedÅo configure FPGA for LBT\n");

154  
LGW_LBT_ERROR
;

157 
i
=
lbt_nb_a˘ive_ch™√l
; i<
LBT_CHANNEL_FREQ_NB
; i++) {

158 
lbt_ch™√l_cfg
[
i
].
‰eq_hz
 = 
lbt_°¨t_‰eq
;

159 
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 = 128;

162 
i
=0; i<
LBT_CHANNEL_FREQ_NB
; i++) {

164 i‡(
lbt_ch™√l_cfg
[
i
].
‰eq_hz
 < 
lbt_°¨t_‰eq
) {

165 
	`DEBUG_PRINTF
("ERROR: LBT ch™√»‰equícy i†ouào‡øngê(%u)\n", 
lbt_ch™√l_cfg
[
i
].
‰eq_hz
);

166  
LGW_LBT_ERROR
;

168 i‡((
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 != 128) && (lbt_channel_cfg[i].scan_time_us != 5000)) {

169 
	`DEBUG_PRINTF
("ERROR: LBT ch™√»sˇ¿timêi†nŸ suµ‹ãd (%u)\n", 
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
);

170  
LGW_LBT_ERROR
;

173 
‰eq_off£t
 = (
lbt_ch™√l_cfg
[
i
].
‰eq_hz
 - 
lbt_°¨t_‰eq
) / 100E3;

174 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_LBT_CH0_FREQ_OFFSET
+
i
, (
öt32_t
)
‰eq_off£t
);

175 i‡(
x
 !
LGW_REG_SUCCESS
) {

176 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿc⁄figuª FPGA f‹ LBT ch™√»%d (‰eq off£t)\n", 
i
);

177  
LGW_LBT_ERROR
;

179 i‡(
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 == 5000) {

180 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_LBT_SCAN_TIME_CH0
+
i
, 1);

181 i‡(
x
 !
LGW_REG_SUCCESS
) {

182 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿc⁄figuª FPGA f‹ LBT ch™√»%d (‰eq off£t)\n", 
i
);

183  
LGW_LBT_ERROR
;

188 
	`DEBUG_MSG
("Note: LBT configuration:\n");

189 
	`DEBUG_PRINTF
("\ébt_íabÀ: %d\n", 
lbt_íabÀ
 );

190 
	`DEBUG_PRINTF
("\ébt_nb_a˘ive_ch™√l: %d\n", 
lbt_nb_a˘ive_ch™√l
 );

191 
	`DEBUG_PRINTF
("\ébt_°¨t_‰eq: %d\n", 
lbt_°¨t_‰eq
);

192 
	`DEBUG_PRINTF
("\ébt_rssi_èrgë: %d\n", 
lbt_rssi_èrgë_dBm
 );

193 
i
=0; i<
LBT_CHANNEL_FREQ_NB
; i++) {

194 
	`DEBUG_PRINTF
("\ébt_ch™√l_cfg[%d].‰eq_hz: %u\n", 
i
, 
lbt_ch™√l_cfg
[i].
‰eq_hz
 );

195 
	`DEBUG_PRINTF
("\ébt_ch™√l_cfg[%d].sˇn_time_us: %u\n", 
i
, 
lbt_ch™√l_cfg
[i].
sˇn_time_us
 );

198  
LGW_LBT_SUCCESS
;

200 
	}
}

204 
	$lbt_°¨t
() {

205 
x
;

207 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_FEATURE_START
, 1);

208 i‡(
x
 !
LGW_REG_SUCCESS
) {

209 
	`DEBUG_MSG
("ERROR: FailedÅo start LBT FSM\n");

210  
LGW_LBT_ERROR
;

213  
LGW_LBT_SUCCESS
;

214 
	}
}

218 
	$lbt_is_ch™√l_‰ì
(
lgw_pkt_tx_s
 * 
pkt_d©a
, 
uöt16_t
 
tx_°¨t_dñay
, 
boﬁ
 * 
tx_Ælowed
) {

219 
i
;

220 
öt32_t
 
vÆ
;

221 
uöt32_t
 
tx_°¨t_time
 = 0;

222 
uöt32_t
 
tx_íd_time
 = 0;

223 
uöt32_t
 
dñè_time
 = 0;

224 
uöt32_t
 
sx1301_time
 = 0;

225 
uöt32_t
 
lbt_time
 = 0;

226 
uöt32_t
 
lbt_time1
 = 0;

227 
uöt32_t
 
lbt_time2
 = 0;

228 
uöt32_t
 
tx_max_time
 = 0;

229 
lbt_ch™√l_decod_1
 = -1;

230 
lbt_ch™√l_decod_2
 = -1;

231 
uöt32_t
 
∑ckë_duøti⁄
 = 0;

234 i‡((
pkt_d©a
 =
NULL
Ë|| (
tx_Ælowed
 == NULL)) {

235  
LGW_LBT_ERROR
;

239 i‡(
lbt_íabÀ
 =
åue
) {

241 i‡(
pkt_d©a
->
moduœti⁄
 !
MOD_LORA
) {

242 *
tx_Ælowed
 = 
Ál£
;

243 
	`DEBUG_PRINTF
("INFO: TX i†nŸáŒowed f‹Åhi†moduœti⁄ (%x)\n", 
pkt_d©a
->
moduœti⁄
);

244  
LGW_LBT_SUCCESS
;

248 
	`lgw_gë_åig˙t
(&
sx1301_time
);

250 
	`DEBUG_MSG
("################################\n");

251 
pkt_d©a
->
tx_mode
) {

252 
TIMESTAMPED
:

253 
	`DEBUG_MSG
("tx_mode = TIMESTAMPED\n");

254 
tx_°¨t_time
 = 
pkt_d©a
->
cou¡_us
 & 
LBT_TIMESTAMP_MASK
;

256 
ON_GPS
:

257 
	`DEBUG_MSG
("tx_mode = ON_GPS\n");

258 
tx_°¨t_time
 = (
sx1301_time
 + (
uöt32_t
)
tx_°¨t_dñay
 + 1000000Ë& 
LBT_TIMESTAMP_MASK
;

260 
IMMEDIATE
:

261 
	`DEBUG_MSG
("ERROR:Åx_mode IMMEDIATE isÇot supported when LBT isÉnabled\n");

264  
LGW_LBT_ERROR
;

268 
lbt_ch™√l_decod_1
 = -1;

269 
lbt_ch™√l_decod_2
 = -1;

270 i‡(
pkt_d©a
->
b™dwidth
 =
BW_125KHZ
) {

271 
i
=0; i<
lbt_nb_a˘ive_ch™√l
; i++) {

272 i‡(
	`is_equÆ_‰eq
(
pkt_d©a
->
‰eq_hz
, 
lbt_ch™√l_cfg
[
i
].‰eq_hzË=
åue
) {

273 
	`DEBUG_PRINTF
("LBT: sñe˘ ch™√»%d (%u Hz)\n", 
i
, 
lbt_ch™√l_cfg
[i].
‰eq_hz
);

274 
lbt_ch™√l_decod_1
 = 
i
;

275 
lbt_ch™√l_decod_2
 = 
i
;

276 i‡(
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 == 5000) {

277 
tx_max_time
 = 4000000;

279 
tx_max_time
 = 400000;

284 } i‡(
pkt_d©a
->
b™dwidth
 =
BW_250KHZ
) {

287 
i
=0; i<(
lbt_nb_a˘ive_ch™√l
-1); i++) {

288 i‡((
	`is_equÆ_‰eq
(
pkt_d©a
->
‰eq_hz
, (
lbt_ch™√l_cfg
[
i
].‰eq_hz+lbt_ch™√l_cfg[i+1].‰eq_hz)/2Ë=
åue
) && ((lbt_channel_cfg[i+1].freq_hz-lbt_channel_cfg[i].freq_hz)==200E3)) {

289 
	`DEBUG_PRINTF
("LBT: sñe˘ ch™√l†%d,%d (%u Hz)\n", 
i
, i+1, (
lbt_ch™√l_cfg
[i].
‰eq_hz
+lbt_channel_cfg[i+1].freq_hz)/2);

290 
lbt_ch™√l_decod_1
 = 
i
;

291 
lbt_ch™√l_decod_2
 = 
i
+1;

292 i‡(
lbt_ch™√l_cfg
[
i
].
sˇn_time_us
 == 5000) {

293 
tx_max_time
 = 4000000;

295 
tx_max_time
 = 200000;

305 i‡((
lbt_ch™√l_decod_1
 >0Ë&& (
lbt_ch™√l_decod_2
 >= 0)) {

306 
	`lgw_Âga_ªg_w
(
LGW_FPGA_LBT_TIMESTAMP_SELECT_CH
, (
öt32_t
)
lbt_ch™√l_decod_1
);

307 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_TIMESTAMP_CH
, &
vÆ
);

308 
lbt_time
 = 
lbt_time1
 = (
uöt32_t
)(
vÆ
 & 0x0000FFFF) * 256;

310 i‡(
lbt_ch™√l_decod_1
 !
lbt_ch™√l_decod_2
 ) {

311 
	`lgw_Âga_ªg_w
(
LGW_FPGA_LBT_TIMESTAMP_SELECT_CH
, (
öt32_t
)
lbt_ch™√l_decod_2
);

312 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_TIMESTAMP_CH
, &
vÆ
);

313 
lbt_time2
 = (
uöt32_t
)(
vÆ
 & 0x0000FFFF) * 256;

315 i‡(
lbt_time2
 < 
lbt_time1
) {

316 
lbt_time
 = 
lbt_time2
;

320 
lbt_time
 = 0;

323 
∑ckë_duøti⁄
 = 
	`lgw_time_⁄_aú
(
pkt_d©a
) * 1000UL;

324 
tx_íd_time
 = (
tx_°¨t_time
 + 
∑ckë_duøti⁄
Ë& 
LBT_TIMESTAMP_MASK
;

325 i‡(
lbt_time
 < 
tx_íd_time
) {

326 
dñè_time
 = 
tx_íd_time
 - 
lbt_time
;

329 
	`¥ötf
("LBT:Übt counter has wrapped\n");

330 
dñè_time
 = (
LBT_TIMESTAMP_MASK
 - 
lbt_time
Ë+ 
tx_íd_time
;

333 
	`DEBUG_PRINTF
("sx1301_timê = %u\n", 
sx1301_time
 & 
LBT_TIMESTAMP_MASK
);

334 
	`DEBUG_PRINTF
("tx_‰eq = %u\n", 
pkt_d©a
->
‰eq_hz
);

335 
	`DEBUG_MSG
("------------------------------------------------\n");

336 
	`DEBUG_PRINTF
("∑ckë_duøti⁄ = %u\n", 
∑ckë_duøti⁄
);

337 
	`DEBUG_PRINTF
("tx_°¨t_timê = %u\n", 
tx_°¨t_time
);

338 
	`DEBUG_PRINTF
("lbt_time1 = %u\n", 
lbt_time1
);

339 
	`DEBUG_PRINTF
("lbt_time2 = %u\n", 
lbt_time2
);

340 
	`DEBUG_PRINTF
("lbt_timê = %u\n", 
lbt_time
);

341 
	`DEBUG_PRINTF
("dñè_timê = %u\n", 
dñè_time
);

342 
	`DEBUG_MSG
("------------------------------------------------\n");

348 i‡((
dñè_time
 < (
tx_max_time
 - 2048)Ë&& (
lbt_time
 != 0)) {

349 *
tx_Ælowed
 = 
åue
;

351 
	`DEBUG_MSG
("ERROR: TXÑequestÑejected (LBT)\n");

352 *
tx_Ælowed
 = 
Ál£
;

356 *
tx_Ælowed
 = 
åue
;

359  
LGW_LBT_SUCCESS
;

360 
	}
}

364 
boﬁ
 
	$lbt_is_íabÀd
() {

365  
lbt_íabÀ
;

366 
	}
}

374 
boﬁ
 
	$is_equÆ_‰eq
(
uöt32_t
 
a
, uöt32_à
b
) {

375 
öt64_t
 
diff
;

376 
öt64_t
 
a64
 = (öt64_t)
a
;

377 
öt64_t
 
b64
 = (öt64_t)
b
;

380 
diff
 = 
	`Œabs
(
a64
 - 
b64
);

383 if–
diff
 <= 10000 )

385  
åue
;

388  
Ál£
;

389 
	}
}

	@libloragw/src/loragw_radio.c

19 
	~<°döt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°dio.h
>

23 
	~"l‹agw_sx125x.h
"

24 
	~"l‹agw_sx1272_fsk.h
"

25 
	~"l‹agw_sx1272_l‹a.h
"

26 
	~"l‹agw_sx1276_fsk.h
"

27 
	~"l‹agw_sx1276_l‹a.h
"

28 
	~"l‹agw_•i.h
"

29 
	~"l‹agw_aux.h
"

30 
	~"l‹agw_ªg.h
"

31 
	~"l‹agw_hÆ.h
"

32 
	~"l‹agw_ødio.h
"

33 
	~"l‹agw_Âga.h
"

38 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

39 #i‡
DEBUG_REG
 == 1

40 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

44 
	#DEBUG_MSG
(
°r
)

	)

45 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

46 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

56 
	slgw_sx127x_FSK_b™dwidth_s
 {

57 
uöt32_t
 
	mRxBwKHz
;

58 
uöt8_t
 
	mRxBwM™t
;

59 
uöt8_t
 
	mRxBwExp
;

67 
	slgw_ødio_ty≥_vîsi⁄_s
 {

68 
lgw_ødio_ty≥_e
 
	mty≥
;

69 
uöt8_t
 
	mªg_vîsi⁄
;

75 
	#PLL_LOCK_MAX_ATTEMPTS
 5

	)

77 c⁄° 
lgw_sx127x_FSK_b™dwidth_s
 
	gsx127x_FskB™dwidths
[] =

105 *
lgw_•i_èrgë
;

110 
sx125x_wrôe
(
uöt8_t
 
ch™√l
, uöt8_à
addr
, uöt8_à
d©a
);

111 
uöt8_t
 
sx125x_ªad
(uöt8_à
ch™√l
, uöt8_à
addr
);

113 
£tup_sx1272_FSK
(
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
);

114 
£tup_sx1276_FSK
(
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
);

116 
ª£t_sx127x
(
lgw_ødio_ty≥_e
 
ødio_ty≥
);

121 
	$sx125x_wrôe
(
uöt8_t
 
ch™√l
, uöt8_à
addr
, uöt8_à
d©a
) {

122 
ªg_add
, 
ªg_d©
, 
ªg_cs
;

125 i‡(
ch™√l
 >
LGW_RF_CHAIN_NB
) {

126 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

129 i‡(
addr
 >= 0x7F) {

130 
	`DEBUG_MSG
("ERROR: ADDRESS OUT OF RANGE\n");

135 
ch™√l
) {

137 
ªg_add
 = 
LGW_SPI_RADIO_A__ADDR
;

138 
ªg_d©
 = 
LGW_SPI_RADIO_A__DATA
;

139 
ªg_cs
 = 
LGW_SPI_RADIO_A__CS
;

143 
ªg_add
 = 
LGW_SPI_RADIO_B__ADDR
;

144 
ªg_d©
 = 
LGW_SPI_RADIO_B__DATA
;

145 
ªg_cs
 = 
LGW_SPI_RADIO_B__CS
;

149 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
ch™√l
);

154 
	`lgw_ªg_w
(
ªg_cs
, 0);

155 
	`lgw_ªg_w
(
ªg_add
, 0x80 | 
addr
);

156 
	`lgw_ªg_w
(
ªg_d©
, 
d©a
);

157 
	`lgw_ªg_w
(
ªg_cs
, 1);

158 
	`lgw_ªg_w
(
ªg_cs
, 0);

161 
	}
}

165 
uöt8_t
 
	$sx125x_ªad
(
uöt8_t
 
ch™√l
, uöt8_à
addr
) {

166 
ªg_add
, 
ªg_d©
, 
ªg_cs
, 
ªg_rb
;

167 
öt32_t
 
ªad_vÆue
;

170 i‡(
ch™√l
 >
LGW_RF_CHAIN_NB
) {

171 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

174 i‡(
addr
 >= 0x7F) {

175 
	`DEBUG_MSG
("ERROR: ADDRESS OUT OF RANGE\n");

180 
ch™√l
) {

182 
ªg_add
 = 
LGW_SPI_RADIO_A__ADDR
;

183 
ªg_d©
 = 
LGW_SPI_RADIO_A__DATA
;

184 
ªg_cs
 = 
LGW_SPI_RADIO_A__CS
;

185 
ªg_rb
 = 
LGW_SPI_RADIO_A__DATA_READBACK
;

189 
ªg_add
 = 
LGW_SPI_RADIO_B__ADDR
;

190 
ªg_d©
 = 
LGW_SPI_RADIO_B__DATA
;

191 
ªg_cs
 = 
LGW_SPI_RADIO_B__CS
;

192 
ªg_rb
 = 
LGW_SPI_RADIO_B__DATA_READBACK
;

196 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d IN SWITCH STATEMENT\n", 
ch™√l
);

201 
	`lgw_ªg_w
(
ªg_cs
, 0);

202 
	`lgw_ªg_w
(
ªg_add
, 
addr
);

203 
	`lgw_ªg_w
(
ªg_d©
, 0);

204 
	`lgw_ªg_w
(
ªg_cs
, 1);

205 
	`lgw_ªg_w
(
ªg_cs
, 0);

206 
	`lgw_ªg_r
(
ªg_rb
, &
ªad_vÆue
);

208  (
uöt8_t
)
ªad_vÆue
;

209 
	}
}

213 
	$£tup_sx1272_FSK
(
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
) {

214 
uöt64_t
 
‰eq_ªg
;

215 
uöt8_t
 
Moduœti⁄Sh≠ög
 = 0;

216 
uöt8_t
 
PŒH›
 = 1;

217 
uöt8_t
 
L«Gaö
 = 1;

218 
uöt8_t
 
L«Boo°
 = 3;

219 
uöt8_t
 
AdcBwAuto
 = 0;

220 
uöt8_t
 
AdcBw
 = 7;

221 
uöt8_t
 
AdcLowPwr
 = 0;

222 
uöt8_t
 
AdcTrim
 = 6;

223 
uöt8_t
 
AdcTe°
 = 0;

224 
uöt8_t
 
RxBwExp
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwExp;

225 
uöt8_t
 
RxBwM™t
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwMant;

226 
uöt8_t
 
RssiSmoŸhög
 = 5;

227 
uöt8_t
 
RssiOff£tReg
;

228 
uöt8_t
 
ªg_vÆ
;

229 
x
;

232 
x
 = 
	`lgw_sx127x_ªg_w
(
SX1272_REG_OPMODE
, 0);

233 
	`waô_ms
(100);

234 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_OPMODE
, 0 | (
Moduœti⁄Sh≠ög
 << 3));

235 
	`waô_ms
(100);

236 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_OPMODE
, 1 | (
Moduœti⁄Sh≠ög
 << 3));

237 
	`waô_ms
(100);

240 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_PLLHOP
, 
PŒH›
 << 7);

241 
‰eq_ªg
 = ((
uöt64_t
)
‰equícy
 << 19) / (uint64_t)32000000;

242 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_FRFMSB
, (
‰eq_ªg
 >> 16) & 0xFF);

243 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_FRFMID
, (
‰eq_ªg
 >> 8) & 0xFF);

244 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_FRFLSB
, (
‰eq_ªg
 >> 0) & 0xFF);

247 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_LNA
, 
L«Boo°
 | (
L«Gaö
 << 5));

248 
x
 |
	`lgw_sx127x_ªg_w
(0x68, 
AdcBw
 | (
AdcBwAuto
 << 3));

249 
x
 |
	`lgw_sx127x_ªg_w
(0x69, 
AdcTe°
 | (
AdcTrim
 << 4Ë| (
AdcLowPwr
 << 7));

252 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_BITRATEMSB
, 125);

253 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_BITRATELSB
, 0);

254 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_FDEVMSB
, 2);

255 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_FDEVLSB
, 225);

258 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_RXCONFIG
, 0);

259 
RssiOff£tReg
 = (
rssi_off£t
 >0Ë? (
uöt8_t
)rssi_offset : (uint8_t)(~(-rssi_offset)+1);

260 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_RSSICONFIG
, 
RssiSmoŸhög
 | (
RssiOff£tReg
 << 3));

261 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_RXBW
, 
RxBwExp
 | (
RxBwM™t
 << 3));

262 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_RXDELAY
, 2);

263 
x
 |
	`lgw_sx127x_ªg_w
(
SX1272_REG_PLL
, 0x10);

264 
x
 |
	`lgw_sx127x_ªg_w
(0x47, 1);

266 i‡(
x
 !
LGW_REG_SUCCESS
) {

267 
	`DEBUG_MSG
("ERROR: FailedÅo configure SX1272\n");

268  
x
;

272 
x
 = 
	`lgw_sx127x_ªg_w
(
SX1272_REG_OPMODE
, 5 | (
Moduœti⁄Sh≠ög
 << 3));

273 
	`waô_ms
(500);

274 
x
 |
	`lgw_sx127x_ªg_r
(
SX1272_REG_IRQFLAGS1
, &
ªg_vÆ
);

276 i‡((
	`TAKE_N_BITS_FROM
(
ªg_vÆ
, 6, 1Ë=0Ë|| (TAKE_N_BITS_FROM‘eg_vÆ, 7, 1Ë=0Ë|| (
x
 !
LGW_REG_SUCCESS
)) {

277 
	`DEBUG_MSG
("ERROR: SX1272 failedÅoÉnter RX continuous mode\n");

278  
LGW_REG_ERROR
;

280 
	`waô_ms
(500);

282 
	`DEBUG_PRINTF
("INFO: Suc˚ssfuŒy c⁄figuªd SX1272 f‹ FSK moduœti⁄ (rxbw=%d)\n", 
rxbw_khz
);

284  
LGW_REG_SUCCESS
;

285 
	}
}

289 
	$£tup_sx1276_FSK
(
uöt32_t
 
‰equícy
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
) {

290 
uöt64_t
 
‰eq_ªg
;

291 
uöt8_t
 
Moduœti⁄Sh≠ög
 = 0;

292 
uöt8_t
 
PŒH›
 = 1;

293 
uöt8_t
 
L«Gaö
 = 1;

294 
uöt8_t
 
L«Boo°
 = 3;

295 
uöt8_t
 
AdcBwAuto
 = 0;

296 
uöt8_t
 
AdcBw
 = 7;

297 
uöt8_t
 
AdcLowPwr
 = 0;

298 
uöt8_t
 
AdcTrim
 = 6;

299 
uöt8_t
 
AdcTe°
 = 0;

300 
uöt8_t
 
RxBwExp
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwExp;

301 
uöt8_t
 
RxBwM™t
 = 
sx127x_FskB™dwidths
[
rxbw_khz
].RxBwMant;

302 
uöt8_t
 
RssiSmoŸhög
 = 5;

303 
uöt8_t
 
RssiOff£tReg
;

304 
uöt8_t
 
ªg_vÆ
;

305 
x
;

308 
x
 = 
	`lgw_sx127x_ªg_w
(
SX1276_REG_OPMODE
, 0);

309 
	`waô_ms
(100);

310 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_OPMODE
, 0 | (
Moduœti⁄Sh≠ög
 << 3));

311 
	`waô_ms
(100);

312 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_OPMODE
, 1 | (
Moduœti⁄Sh≠ög
 << 3));

313 
	`waô_ms
(100);

316 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_PLLHOP
, 
PŒH›
 << 7);

317 
‰eq_ªg
 = ((
uöt64_t
)
‰equícy
 << 19) / (uint64_t)32000000;

318 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_FRFMSB
, (
‰eq_ªg
 >> 16) & 0xFF);

319 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_FRFMID
, (
‰eq_ªg
 >> 8) & 0xFF);

320 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_FRFLSB
, (
‰eq_ªg
 >> 0) & 0xFF);

323 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_LNA
, 
L«Boo°
 | (
L«Gaö
 << 5));

324 
x
 |
	`lgw_sx127x_ªg_w
(0x57, 
AdcBw
 | (
AdcBwAuto
 << 3));

325 
x
 |
	`lgw_sx127x_ªg_w
(0x58, 
AdcTe°
 | (
AdcTrim
 << 4Ë| (
AdcLowPwr
 << 7));

328 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_BITRATEMSB
, 125);

329 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_BITRATELSB
, 0);

330 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_FDEVMSB
, 2);

331 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_FDEVLSB
, 225);

334 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_RXCONFIG
, 0);

335 
RssiOff£tReg
 = (
rssi_off£t
 >0Ë? (
uöt8_t
)rssi_offset : (uint8_t)(~(-rssi_offset)+1);

336 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_RSSICONFIG
, 
RssiSmoŸhög
 | (
RssiOff£tReg
 << 3));

337 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_RXBW
, 
RxBwExp
 | (
RxBwM™t
 << 3));

338 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_RXDELAY
, 2);

339 
x
 |
	`lgw_sx127x_ªg_w
(
SX1276_REG_PLL
, 0x10);

340 
x
 |
	`lgw_sx127x_ªg_w
(0x43, 1);

342 i‡(
x
 !
LGW_REG_SUCCESS
) {

343 
	`DEBUG_MSG
("ERROR: FailedÅo configure SX1276\n");

344  
x
;

348 
x
 = 
	`lgw_sx127x_ªg_w
(
SX1276_REG_OPMODE
, 5 | (
Moduœti⁄Sh≠ög
 << 3));

349 
	`waô_ms
(500);

350 
x
 |
	`lgw_sx127x_ªg_r
(
SX1276_REG_IRQFLAGS1
, &
ªg_vÆ
);

352 i‡((
	`TAKE_N_BITS_FROM
(
ªg_vÆ
, 6, 1Ë=0Ë|| (TAKE_N_BITS_FROM‘eg_vÆ, 7, 1Ë=0Ë|| (
x
 !
LGW_REG_SUCCESS
)) {

353 
	`DEBUG_MSG
("ERROR: SX1276 failedÅoÉnter RX continuous mode\n");

354  
LGW_REG_ERROR
;

356 
	`waô_ms
(500);

358 
	`DEBUG_PRINTF
("INFO: Suc˚ssfuŒy c⁄figuªd SX1276 f‹ FSK moduœti⁄ (rxbw=%d)\n", 
rxbw_khz
);

360  
LGW_REG_SUCCESS
;

361 
	}
}

365 
	$ª£t_sx127x
(
lgw_ødio_ty≥_e
 
ødio_ty≥
) {

366 
x
;

368 
ødio_ty≥
) {

369 
LGW_RADIO_TYPE_SX1276
:

370 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_RADIO_RESET
, 0);

371 
x
 |
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_RADIO_RESET
, 1);

372 i‡(
x
 !
LGW_SPI_SUCCESS
) {

373 
	`DEBUG_MSG
("ERROR: FailedÅoÑeset sx127x\n");

374  
x
;

377 
LGW_RADIO_TYPE_SX1272
:

378 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_RADIO_RESET
, 1);

379 
x
 |
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_RADIO_RESET
, 0);

380 i‡(
x
 !
LGW_SPI_SUCCESS
) {

381 
	`DEBUG_MSG
("ERROR: FailedÅoÑeset sx127x\n");

382  
x
;

386 
	`DEBUG_PRINTF
("ERROR: FaûedÅÿª£àsx127x,ÇŸ suµ‹ãd (%d)\n", 
ødio_ty≥
);

387  
LGW_REG_ERROR
;

390  
LGW_REG_SUCCESS
;

391 
	}
}

396 
	$lgw_£tup_sx125x
(
uöt8_t
 
rf_chaö
, uöt8_à
rf_˛kout
, 
boﬁ
 
rf_íabÀ
, uöt8_à
rf_ødio_ty≥
, 
uöt32_t
 
‰eq_hz
) {

397 
uöt32_t
 
∑π_öt
 = 0;

398 
uöt32_t
 
∑π_‰ac
 = 0;

399 
˝t_©ãm±s
 = 0;

401 i‡(
rf_chaö
 >
LGW_RF_CHAIN_NB
) {

402 
	`DEBUG_MSG
("ERROR: INVALID RF_CHAIN\n");

407 
	`DEBUG_PRINTF
("NŸe: SX125x #%d vîsi⁄Ñegi°îÑëu∫ed 0x%02x\n", 
rf_chaö
, 
	`sx125x_ªad
(rf_chain, 0x07));

410 i‡(
rf_˛kout
 =
rf_chaö
) {

411 
	`sx125x_wrôe
(
rf_chaö
, 0x10, 
SX125x_TX_DAC_CLK_SEL
 + 2);

412 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàíabÀd\n", 
rf_chaö
);

414 
	`sx125x_wrôe
(
rf_chaö
, 0x10, 
SX125x_TX_DAC_CLK_SEL
);

415 
	`DEBUG_PRINTF
("NŸe: SX125x #%d clock ouçuàdißbÀd\n", 
rf_chaö
);

418 
rf_ødio_ty≥
) {

419 
LGW_RADIO_TYPE_SX1255
:

420 
	`sx125x_wrôe
(
rf_chaö
, 0x28, 
SX125x_XOSC_GM_STARTUP
 + 
SX125x_XOSC_DISABLE
*16);

422 
LGW_RADIO_TYPE_SX1257
:

423 
	`sx125x_wrôe
(
rf_chaö
, 0x26, 
SX125x_XOSC_GM_STARTUP
 + 
SX125x_XOSC_DISABLE
*16);

426 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

430 i‡(
rf_íabÀ
 =
åue
) {

432 
	`sx125x_wrôe
(
rf_chaö
, 0x08, 
SX125x_TX_MIX_GAIN
 + 
SX125x_TX_DAC_GAIN
*16);

433 
	`sx125x_wrôe
(
rf_chaö
, 0x0A, 
SX125x_TX_ANA_BW
 + 
SX125x_TX_PLL_BW
*32);

434 
	`sx125x_wrôe
(
rf_chaö
, 0x0B, 
SX125x_TX_DAC_BW
);

437 
	`sx125x_wrôe
(
rf_chaö
, 0x0C, 
SX125x_LNA_ZIN
 + 
SX125x_RX_BB_GAIN
*2 + 
SX125x_RX_LNA_GAIN
*32);

438 
	`sx125x_wrôe
(
rf_chaö
, 0x0D, 
SX125x_RX_BB_BW
 + 
SX125x_RX_ADC_TRIM
*4 + 
SX125x_RX_ADC_BW
*32);

439 
	`sx125x_wrôe
(
rf_chaö
, 0x0E, 
SX125x_ADC_TEMP
 + 
SX125x_RX_PLL_BW
*2);

442 
rf_ødio_ty≥
) {

443 
LGW_RADIO_TYPE_SX1255
:

444 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 7);

445 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 7)) << 9) / SX125x_32MHz_FRAC;

447 
LGW_RADIO_TYPE_SX1257
:

448 
∑π_öt
 = 
‰eq_hz
 / (
SX125x_32MHz_FRAC
 << 8);

449 
∑π_‰ac
 = ((
‰eq_hz
 % (
SX125x_32MHz_FRAC
 << 8)) << 8) / SX125x_32MHz_FRAC;

452 
	`DEBUG_PRINTF
("ERROR: UNEXPECTED VALUE %d FOR RADIO TYPE\n", 
rf_ødio_ty≥
);

456 
	`sx125x_wrôe
(
rf_chaö
, 0x01,0xFF & 
∑π_öt
);

457 
	`sx125x_wrôe
(
rf_chaö
, 0x02,0xFF & (
∑π_‰ac
 >> 8));

458 
	`sx125x_wrôe
(
rf_chaö
, 0x03,0xFF & 
∑π_‰ac
);

462 i‡(
˝t_©ãm±s
 >
PLL_LOCK_MAX_ATTEMPTS
) {

463 
	`DEBUG_MSG
("ERROR: FAIL TO LOCK PLL\n");

466 
	`sx125x_wrôe
(
rf_chaö
, 0x00, 1);

467 
	`sx125x_wrôe
(
rf_chaö
, 0x00, 3);

468 ++
˝t_©ãm±s
;

469 
	`DEBUG_PRINTF
("NŸe: SX125x #%d PLL sèπ (©ãm± %d)\n", 
rf_chaö
, 
˝t_©ãm±s
);

470 
	`waô_ms
(1);

471 } (
	`sx125x_ªad
(
rf_chaö
, 0x11) & 0x02) == 0);

473 
	`DEBUG_PRINTF
("NŸe: SX125x #%d kïàö sèndby mode\n", 
rf_chaö
);

477 
	}
}

481 
	$lgw_sx127x_ªg_w
(
uöt8_t
 
addªss
, uöt8_à
ªg_vÆue
) {

482  
	`lgw_•i_w
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_MODE1
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

483 
	}
}

487 
	$lgw_sx127x_ªg_r
(
uöt8_t
 
addªss
, uöt8_à*
ªg_vÆue
) {

488  
	`lgw_•i_r
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_MODE1
, 
LGW_SPI_MUX_TARGET_SX127X
, 
addªss
, 
ªg_vÆue
);

489 
	}
}

493 
	$lgw_£tup_sx127x
(
uöt32_t
 
‰equícy
, 
uöt8_t
 
moduœti⁄
, 
lgw_sx127x_rxbw_e
 
rxbw_khz
, 
öt8_t
 
rssi_off£t
) {

494 
x
, 
i
;

495 
uöt8_t
 
vîsi⁄
;

496 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

497 
lgw_ødio_ty≥_vîsi⁄_s
 
suµ‹ãd_ødio_ty≥
[2] = {

498 {
LGW_RADIO_TYPE_SX1272
, 0x22},

499 {
LGW_RADIO_TYPE_SX1276
, 0x12}

503 i‡(
moduœti⁄
 !
MOD_FSK
) {

504 
	`DEBUG_PRINTF
("ERROR: moduœti⁄ÇŸ suµ‹ãd f‹ SX127x (%u)\n", 
moduœti⁄
);

505  
LGW_REG_ERROR
;

507 i‡(
rxbw_khz
 > 
LGW_SX127X_RXBW_250K_HZ
) {

508 
	`DEBUG_PRINTF
("ERROR: RX b™dwidthÇŸ suµ‹ãd f‹ SX127x (%u)\n", 
rxbw_khz
);

509  
LGW_REG_ERROR
;

513 
i
 = 0; i < ()( 
suµ‹ãd_ødio_ty≥
); i++) {

515 
x
 = 
	`ª£t_sx127x
(
suµ‹ãd_ødio_ty≥
[
i
].
ty≥
);

516 i‡(
x
 !
LGW_SPI_SUCCESS
) {

517 
	`DEBUG_MSG
("ERROR: FailedÅoÑeset sx127x\n");

518  
x
;

521 
x
 = 
	`lgw_sx127x_ªg_r
(0x42, &
vîsi⁄
);

522 i‡(
x
 !
LGW_SPI_SUCCESS
) {

523 
	`DEBUG_MSG
("ERROR: FailedÅoÑead sx127x versionÑegister\n");

524  
x
;

527 i‡(
vîsi⁄
 !
suµ‹ãd_ødio_ty≥
[
i
].
ªg_vîsi⁄
) {

528 
	`DEBUG_PRINTF
("INFO: sx127x vîsi⁄Ñegi°î -Ñód:0x%02x,Éx≥˘ed:0x%02x\n", 
vîsi⁄
, 
suµ‹ãd_ødio_ty≥
[
i
].
ªg_vîsi⁄
);

531 
	`DEBUG_PRINTF
("INFO: sx127xÑadiÿha†bì¿found (ty≥:%d, vîsi⁄:0x%02x)\n", 
suµ‹ãd_ødio_ty≥
[
i
].
ty≥
, 
vîsi⁄
);

532 
ødio_ty≥
 = 
suµ‹ãd_ødio_ty≥
[
i
].
ty≥
;

536 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

537 
	`DEBUG_MSG
("ERROR: sx127xÑadio hasÇot been found\n");

538  
LGW_REG_ERROR
;

542 
moduœti⁄
) {

543 
MOD_FSK
:

544 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_SX1272
) {

545 
x
 = 
	`£tup_sx1272_FSK
(
‰equícy
, 
rxbw_khz
, 
rssi_off£t
);

547 
x
 = 
	`£tup_sx1276_FSK
(
‰equícy
, 
rxbw_khz
, 
rssi_off£t
);

554 i‡(
x
 !
LGW_REG_SUCCESS
) {

555 
	`DEBUG_MSG
("ERROR: failedÅo setup SX127x\n");

556  
x
;

559  
LGW_REG_SUCCESS
;

560 
	}
}

	@libloragw/src/loragw_reg.c

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

25 
	~<°dio.h
>

27 
	~"l‹agw_•i.h
"

28 
	~"l‹agw_ªg.h
"

29 
	~"l‹agw_Âga.h
"

34 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

35 #i‡
DEBUG_REG
 == 1

36 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

37 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

38 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_REG_ERROR
;}

	)

40 
	#DEBUG_MSG
(
°r
)

	)

41 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

42 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_REG_ERROR
;}

	)

48 
	#PAGE_ADDR
 0x00

	)

49 
	#PAGE_MASK
 0x03

	)

51 c⁄° 
uöt8_t
 
	gFPGA_VERSION
[] = { 31, 33 };

59 c⁄° 
lgw_ªg_s
 
	gl‹egs
[
LGW_TOTALREGS
] = {

391 
	glgw_ªg∑ge
 = -1;

396 *
	glgw_•i_èrgë
 = 
NULL
;

397 
uöt8_t
 
	glgw_•i_mux_mode
 = 0;

402 
	$∑ge_swôch
(
uöt8_t
 
èrgë
) {

403 
lgw_ªg∑ge
 = 
PAGE_MASK
 & 
èrgë
;

404 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 
PAGE_ADDR
, (
uöt8_t
)
lgw_ªg∑ge
);

405  
LGW_REG_SUCCESS
;

406 
	}
}

410 
boﬁ
 
	$check_Âga_vîsi⁄
(
uöt8_t
 
vîsi⁄
) {

411 
i
;

413 
i
 = 0; i < ()( 
FPGA_VERSION
); i++) {

414 i‡(
FPGA_VERSION
[
i
] =
vîsi⁄
 ) {

415  
åue
;

419  
Ál£
;

420 
	}
}

424 
	$ªg_w_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 
ªg_vÆue
) {

425 
•i_°©
 = 
LGW_REG_SUCCESS
;

426 
i
, 
size_byã
;

427 
uöt8_t
 
buf
[4] = "\x00\x00\x00\x00";

429 i‡((
r
.
Àng
 =8Ë&& (r.
offs
 == 0)) {

431 
•i_°©
 +
	`lgw_•i_w
(
•i_èrgë
, 
•i_mux_mode
, 
•i_mux_èrgë
, 
r
.
addr
, (
uöt8_t
)
ªg_vÆue
);

432 } i‡((
r
.
offs
 +Ñ.
Àng
) <= 8) {

434 
•i_°©
 +
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_mode
, 
•i_mux_èrgë
, 
r
.
addr
, &
buf
[0]);

435 
buf
[1] = ((1 << 
r
.
Àng
Ë- 1Ë<<Ñ.
offs
;

436 
buf
[2] = ((
uöt8_t
)
ªg_vÆue
Ë<< 
r
.
offs
;

437 
buf
[3] = (~buf[1] & buf[0]) | (buf[1] & buf[2]);

438 
•i_°©
 +
	`lgw_•i_w
(
•i_èrgë
, 
•i_mux_mode
, 
•i_mux_èrgë
, 
r
.
addr
, 
buf
[3]);

439 } i‡((
r
.
offs
 =0Ë&& (r.
Àng
 > 0) && (r.leng <= 32)) {

441 
size_byã
 = (
r
.
Àng
 + 7) / 8;

442 
i
=0; i<
size_byã
; ++i) {

445 
buf
[
i
] = (
uöt8_t
)(0x000000FF & 
ªg_vÆue
);

446 
ªg_vÆue
 = (reg_value >> 8);

448 
•i_°©
 +
	`lgw_•i_wb
(
•i_èrgë
, 
•i_mux_mode
, 
•i_mux_èrgë
, 
r
.
addr
, 
buf
, 
size_byã
);

451 
	`DEBUG_MSG
("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED\n");

452  
LGW_REG_ERROR
;

455  
•i_°©
;

456 
	}
}

460 
	$ªg_r_Æign32
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, 
lgw_ªg_s
 
r
, 
öt32_t
 *
ªg_vÆue
) {

461 
•i_°©
 = 
LGW_SPI_SUCCESS
;

462 
uöt8_t
 
bufu
[4] = "\x00\x00\x00\x00";

463 
öt8_t
 *
bufs
 = (öt8_à*)
bufu
;

464 
i
, 
size_byã
;

465 
uöt32_t
 
u
 = 0;

467 i‡((
r
.
offs
 +Ñ.
Àng
) <= 8) {

469 
•i_°©
 +
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_mode
, 
•i_mux_èrgë
, 
r
.
addr
, &
bufu
[0]);

470 
bufu
[1] = bufu[0] << (8 - 
r
.
Àng
 -Ñ.
offs
);

471 i‡(
r
.
sign
 =
åue
) {

472 
bufs
[2] = bufs[1] >> (8 - 
r
.
Àng
);

473 *
ªg_vÆue
 = (
öt32_t
)
bufs
[2];

475 
bufu
[2] = bufu[1] >> (8 - 
r
.
Àng
);

476 *
ªg_vÆue
 = (
öt32_t
)
bufu
[2];

478 } i‡((
r
.
offs
 =0Ë&& (r.
Àng
 > 0) && (r.leng <= 32)) {

479 
size_byã
 = (
r
.
Àng
 + 7) / 8;

480 
•i_°©
 +
	`lgw_•i_rb
(
•i_èrgë
, 
•i_mux_mode
, 
•i_mux_èrgë
, 
r
.
addr
, 
bufu
, 
size_byã
);

481 
u
 = 0;

482 
i
=(
size_byã
-1); i>=0; --i) {

483 
u
 = (
uöt32_t
)
bufu
[
i
] + (u << 8);

485 i‡(
r
.
sign
 =
åue
) {

486 
u
 = u << (32 - 
r
.
Àng
);

487 *
ªg_vÆue
 = (
öt32_t
)
u
 >> (32 - 
r
.
Àng
);

489 *
ªg_vÆue
 = (
öt32_t
)
u
;

493 
	`DEBUG_MSG
("ERROR: REGISTER SIZE AND OFFSET ARE NOT SUPPORTED\n");

494  
LGW_REG_ERROR
;

497  
•i_°©
;

498 
	}
}

504 
	$lgw_c⁄√˘
(
boﬁ
 
•i_⁄ly
, 
uöt32_t
 
tx_nŸch_‰eq
) {

505 
•i_°©
 = 
LGW_SPI_SUCCESS
;

506 
uöt8_t
 
u
 = 0;

507 
x
;

510 i‡(
lgw_•i_èrgë
 !
NULL
) {

511 
	`DEBUG_MSG
("WARNING: concentrator wasálready connected\n");

512 
	`lgw_•i_˛o£
(
lgw_•i_èrgë
);

516 
•i_°©
 = 
	`lgw_•i_›í
(&
lgw_•i_èrgë
);

517 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

518 
	`DEBUG_MSG
("ERROR CONNECTING CONCENTRATOR\n");

519  
LGW_REG_ERROR
;

522 i‡(
•i_⁄ly
 =
Ál£
 ) {

525 
•i_°©
 = 
	`lgw_•i_r
(
lgw_•i_èrgë
, 
LGW_SPI_MUX_MODE1
, 
LGW_SPI_MUX_TARGET_FPGA
, 
l‹egs
[
LGW_VERSION
].
addr
, &
u
);

526 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

527 
	`DEBUG_MSG
("ERROR READING VERSION REGISTER\n");

528  
LGW_REG_ERROR
;

530 i‡(
	`check_Âga_vîsi⁄
(
u
Ë!
åue
) {

532 
	`DEBUG_PRINTF
("INFO:ÇÿFPGA dëe˘ed o∏vîsi⁄ÇŸ suµ‹ãd (v%u)\n", 
u
);

533 
lgw_•i_mux_mode
 = 
LGW_SPI_MUX_MODE0
;

535 
	`DEBUG_PRINTF
("INFO: dëe˘ed FPGA wôh SPI mux hódî (v%u)\n", 
u
);

536 
lgw_•i_mux_mode
 = 
LGW_SPI_MUX_MODE1
;

538 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_FPGA
, 0, 1);

539 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_FPGA
, 0, 0);

541 
x
 = 
	`lgw_Âga_c⁄figuª
(
tx_nŸch_‰eq
);

542 i‡(
x
 !
LGW_REG_SUCCESS
) {

543 
	`DEBUG_MSG
("ERROR CONFIGURING FPGA\n");

544  
LGW_REG_ERROR
;

549 
•i_°©
 = 
	`lgw_•i_r
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 
l‹egs
[
LGW_VERSION
].
addr
, &
u
);

550 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

551 
	`DEBUG_MSG
("ERROR READING CHIP VERSION REGISTER\n");

552  
LGW_REG_ERROR
;

554 i‡(
u
 !
l‹egs
[
LGW_VERSION
].
dÊt
) {

555 
	`DEBUG_PRINTF
("ERROR: NOT EXPECTED CHIP VERSION (v%u)\n", 
u
);

556  
LGW_REG_ERROR
;

560 
•i_°©
 = 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 
l‹egs
[
LGW_PAGE_REG
].
addr
, 0);

561 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

562 
	`DEBUG_MSG
("ERROR WRITING PAGE REGISTER\n");

563  
LGW_REG_ERROR
;

565 
lgw_ªg∑ge
 = 0;

569 
	`DEBUG_MSG
("Note: success connectingÅhe concentrator\n");

570  
LGW_REG_SUCCESS
;

571 
	}
}

576 
	$lgw_disc⁄√˘
() {

577 i‡(
lgw_•i_èrgë
 !
NULL
) {

578 
	`lgw_•i_˛o£
(
lgw_•i_èrgë
);

579 
lgw_•i_èrgë
 = 
NULL
;

580 
	`DEBUG_MSG
("Note: success disconnectingÅhe concentrator\n");

581  
LGW_REG_SUCCESS
;

583 
	`DEBUG_MSG
("WARNING: concentrator wasálready disconnected\n");

584  
LGW_REG_ERROR
;

586 
	}
}

591 
	$lgw_so·_ª£t
() {

593 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

594 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

595  
LGW_REG_ERROR
;

597 
	`lgw_•i_w
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0, 0x80);

598 
lgw_ªg∑ge
 = 0;

599  
LGW_REG_SUCCESS
;

600 
	}
}

605 
	$lgw_ªg_check
(
FILE
 *
f
) {

606 
lgw_ªg_s
 
r
;

607 
öt32_t
 
ªad_vÆue
;

608 
ok_msg
[] = "+++MATCH+++";

609 
nŸok_msg
[] = "###MISMATCH###";

610 *
±r
;

611 
i
;

614 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

615 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

616 
	`Ârötf
(
f
, "ERROR: CONCENTRATOR UNCONNECTED\n");

617  
LGW_REG_ERROR
;

620 
	`Ârötf
(
f
, "Start ofÑegister verification\n");

621 
i
=0; i<
LGW_TOTALREGS
; ++i) {

622 
r
 = 
l‹egs
[
i
];

623 
	`lgw_ªg_r
(
i
, &
ªad_vÆue
);

624 
±r
 = (
ªad_vÆue
 =
r
.
dÊt
Ë? 
ok_msg
 : 
nŸok_msg
;

625 i‡(
r
.
sign
 =
åue
)

626 
	`Ârötf
(
f
, "%†ªgÇumbî %dÑód: %d (%xËdeÁu…: %d (%x)\n", 
±r
, 
i
, 
ªad_vÆue
,Ñód_vÆue, 
r
.
dÊt
,Ñ.dflt);

628 
	`Ârötf
(
f
, "%†ªgÇumbî %dÑód: %u (%xËdeÁu…: %u (%x)\n", 
±r
, 
i
, 
ªad_vÆue
,Ñód_vÆue, 
r
.
dÊt
,Ñ.dflt);

630 
	`Ârötf
(
f
, "End ofÑegister verification\n");

632  
LGW_REG_SUCCESS
;

633 
	}
}

638 
	$lgw_ªg_w
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 
ªg_vÆue
) {

639 
•i_°©
 = 
LGW_SPI_SUCCESS
;

640 
lgw_ªg_s
 
r
;

643 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

644 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

645  
LGW_REG_ERROR
;

649 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

650 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

651  
LGW_REG_ERROR
;

655 i‡(
ªgi°î_id
 =
LGW_PAGE_REG
) {

656 
	`∑ge_swôch
(
ªg_vÆue
);

657  
LGW_REG_SUCCESS
;

658 } i‡(
ªgi°î_id
 =
LGW_SOFT_RESET
) {

660 i‡((
ªg_vÆue
 & 0x01) != 0)

661 
	`lgw_so·_ª£t
();

662  
LGW_REG_SUCCESS
;

666 
r
 = 
l‹egs
[
ªgi°î_id
];

669 i‡(
r
.
rd⁄
 == 1){

670 
	`DEBUG_MSG
("ERROR: TRYING TO WRITE A READ-ONLY REGISTER\n");

671  
LGW_REG_ERROR
;

675 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

676 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

679 
•i_°©
 +
	`ªg_w_Æign32
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
, 
ªg_vÆue
);

681 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

682 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER WRITE\n");

683  
LGW_REG_ERROR
;

685  
LGW_REG_SUCCESS
;

687 
	}
}

692 
	$lgw_ªg_r
(
uöt16_t
 
ªgi°î_id
, 
öt32_t
 *
ªg_vÆue
) {

693 
•i_°©
 = 
LGW_SPI_SUCCESS
;

694 
lgw_ªg_s
 
r
;

697 
	`CHECK_NULL
(
ªg_vÆue
);

698 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

699 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

700  
LGW_REG_ERROR
;

704 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

705 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

706  
LGW_REG_ERROR
;

710 
r
 = 
l‹egs
[
ªgi°î_id
];

713 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

714 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

717 
•i_°©
 +
	`ªg_r_Æign32
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
, 
ªg_vÆue
);

719 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

720 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER WRITE\n");

721  
LGW_REG_ERROR
;

723  
LGW_REG_SUCCESS
;

725 
	}
}

730 
	$lgw_ªg_wb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

731 
•i_°©
 = 
LGW_SPI_SUCCESS
;

732 
lgw_ªg_s
 
r
;

735 
	`CHECK_NULL
(
d©a
);

736 i‡(
size
 == 0) {

737 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

738  
LGW_REG_ERROR
;

740 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

741 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

742  
LGW_REG_ERROR
;

746 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

747 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

748  
LGW_REG_ERROR
;

752 
r
 = 
l‹egs
[
ªgi°î_id
];

755 i‡(
r
.
rd⁄
 == 1){

756 
	`DEBUG_MSG
("ERROR: TRYING TO BURST WRITE A READ-ONLY REGISTER\n");

757  
LGW_REG_ERROR
;

761 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

762 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

766 
•i_°©
 +
	`lgw_•i_wb
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
.
addr
, 
d©a
, 
size
);

768 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

769 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST WRITE\n");

770  
LGW_REG_ERROR
;

772  
LGW_REG_SUCCESS
;

774 
	}
}

779 
	$lgw_ªg_rb
(
uöt16_t
 
ªgi°î_id
, 
uöt8_t
 *
d©a
, uöt16_à
size
) {

780 
•i_°©
 = 
LGW_SPI_SUCCESS
;

781 
lgw_ªg_s
 
r
;

784 
	`CHECK_NULL
(
d©a
);

785 i‡(
size
 == 0) {

786 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

787  
LGW_REG_ERROR
;

789 i‡(
ªgi°î_id
 >
LGW_TOTALREGS
) {

790 
	`DEBUG_MSG
("ERROR: REGISTER NUMBER OUT OF DEFINED RANGE\n");

791  
LGW_REG_ERROR
;

795 i‡((
lgw_•i_èrgë
 =
NULL
Ë|| (
lgw_ªg∑ge
 < 0)) {

796 
	`DEBUG_MSG
("ERROR: CONCENTRATOR UNCONNECTED\n");

797  
LGW_REG_ERROR
;

801 
r
 = 
l‹egs
[
ªgi°î_id
];

804 i‡((
r
.
∑ge
 !-1Ë&& (r.∑gê!
lgw_ªg∑ge
)) {

805 
•i_°©
 +
	`∑ge_swôch
(
r
.
∑ge
);

809 
•i_°©
 +
	`lgw_•i_rb
(
lgw_•i_èrgë
, 
lgw_•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 
r
.
addr
, 
d©a
, 
size
);

811 i‡(
•i_°©
 !
LGW_SPI_SUCCESS
) {

812 
	`DEBUG_MSG
("ERROR: SPI ERROR DURING REGISTER BURST READ\n");

813  
LGW_REG_ERROR
;

815  
LGW_REG_SUCCESS
;

817 
	}
}

	@libloragw/src/loragw_spi.native.c

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<f˙é.h
>

29 
	~<°rög.h
>

31 
	~<sys/io˘l.h
>

32 
	~<löux/•i/•idev.h
>

34 
	~"l‹agw_•i.h
"

35 
	~"l‹agw_hÆ.h
"

40 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

41 #i‡
DEBUG_SPI
 == 1

42 
	#DEBUG_MSG
(
°r
Ë
	`Ârötf
(
°dîr
, så)

	)

43 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
,"%s:%d: "fmt, 
__FUNCTION__
, 
__LINE__
,árgs)

	)

44 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){
	`Ârötf
(
°dîr
,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", 
__FUNCTION__
, 
__LINE__
); 
LGW_SPI_ERROR
;}

	)

46 
	#DEBUG_MSG
(
°r
)

	)

47 
	#DEBUG_PRINTF
(
fmt
, 
¨gs
...)

	)

48 
	#CHECK_NULL
(
a
Ëif◊==
NULL
){ 
LGW_SPI_ERROR
;}

	)

54 
	#READ_ACCESS
 0x00

	)

55 
	#WRITE_ACCESS
 0x80

	)

56 
	#SPI_SPEED
 8000000

	)

57 
	#SPI_DEV_PATH
 "/dev/•idev1.0"

	)

64 
	$lgw_•i_›í
(**
•i_èrgë_±r
) {

65 *
•i_devi˚
 = 
NULL
;

66 
dev
;

67 
a
=0, 
b
=0;

68 
i
;

71 
	`CHECK_NULL
(
•i_èrgë_±r
);

74 
•i_devi˚
 = 
	`mÆloc
(());

75 i‡(
•i_devi˚
 =
NULL
) {

76 
	`DEBUG_MSG
("ERROR: MALLOC FAIL\n");

77  
LGW_SPI_ERROR
;

81 
	`DEBUG_PRINTF
("INFO: sèrög o≥¿SPI devi˚ %s\n", 
SPI_DEV_PATH
);

82 
dev
 = 
	`›í
(
SPI_DEV_PATH
, 
O_RDWR
);

83 i‡(
dev
 < 0) {

84 
	`DEBUG_PRINTF
("ERROR: faûedÅÿ›í SPI devi˚ %s\n", 
SPI_DEV_PATH
);

85  
LGW_SPI_ERROR
;

89 
i
 = 
SPI_MODE_0
;

90 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_MODE
, &
i
);

91 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_MODE
, &
i
);

92 i‡((
a
 < 0Ë|| (
b
 < 0)) {

93 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET IN MODE 0\n");

94 
	`˛o£
(
dev
);

95 
	`‰ì
(
•i_devi˚
);

96  
LGW_SPI_ERROR
;

100 
i
 = 
SPI_SPEED
;

101 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
i
);

102 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_MAX_SPEED_HZ
, &
i
);

103 i‡((
a
 < 0Ë|| (
b
 < 0)) {

104 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET MAX SPEED\n");

105 
	`˛o£
(
dev
);

106 
	`‰ì
(
•i_devi˚
);

107  
LGW_SPI_ERROR
;

111 
i
 = 0;

112 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_LSB_FIRST
, &
i
);

113 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_LSB_FIRST
, &
i
);

114 i‡((
a
 < 0Ë|| (
b
 < 0)) {

115 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET MSB FIRST\n");

116 
	`˛o£
(
dev
);

117 
	`‰ì
(
•i_devi˚
);

118  
LGW_SPI_ERROR
;

122 
i
 = 0;

123 
a
 = 
	`io˘l
(
dev
, 
SPI_IOC_WR_BITS_PER_WORD
, &
i
);

124 
b
 = 
	`io˘l
(
dev
, 
SPI_IOC_RD_BITS_PER_WORD
, &
i
);

125 i‡((
a
 < 0Ë|| (
b
 < 0)) {

126 
	`DEBUG_MSG
("ERROR: SPI PORT FAIL TO SET 8 BITS-PER-WORD\n");

127 
	`˛o£
(
dev
);

128  
LGW_SPI_ERROR
;

131 *
•i_devi˚
 = 
dev
;

132 *
•i_èrgë_±r
 = (*)
•i_devi˚
;

133 
	`DEBUG_MSG
("Note: SPIÖort openedánd configured ok\n");

134  
LGW_SPI_SUCCESS
;

135 
	}
}

140 
	$lgw_•i_˛o£
(*
•i_èrgë
) {

141 
•i_devi˚
;

142 
a
;

145 
	`CHECK_NULL
(
•i_èrgë
);

148 
•i_devi˚
 = *(*)
•i_èrgë
;

149 
a
 = 
	`˛o£
(
•i_devi˚
);

150 
	`‰ì
(
•i_èrgë
);

153 i‡(
a
 < 0) {

154 
	`DEBUG_MSG
("ERROR: SPI PORT FAILED TO CLOSE\n");

155  
LGW_SPI_ERROR
;

157 
	`DEBUG_MSG
("Note: SPIÖort closed\n");

158  
LGW_SPI_SUCCESS
;

160 
	}
}

165 
	$lgw_•i_w
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à
d©a
) {

166 
•i_devi˚
;

167 
uöt8_t
 
out_buf
[3];

168 
uöt8_t
 
comm™d_size
;

169 
•i_ioc_å™s„r
 
k
;

170 
a
;

173 
	`CHECK_NULL
(
•i_èrgë
);

174 i‡((
addªss
 & 0x80) != 0) {

175 
	`DEBUG_MSG
("WARNING: SPIáddress > 127\n");

178 
•i_devi˚
 = *(*)
•i_èrgë
;

181 i‡(
•i_mux_mode
 =
LGW_SPI_MUX_MODE1
) {

182 
out_buf
[0] = 
•i_mux_èrgë
;

183 
out_buf
[1] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

184 
out_buf
[2] = 
d©a
;

185 
comm™d_size
 = 3;

187 
out_buf
[0] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

188 
out_buf
[1] = 
d©a
;

189 
comm™d_size
 = 2;

193 
	`mem£t
(&
k
, 0, (k));

194 
k
.
tx_buf
 = (Ë
out_buf
;

195 
k
.
Àn
 = 
comm™d_size
;

196 
k
.
•ìd_hz
 = 
SPI_SPEED
;

197 
k
.
cs_ch™ge
 = 0;

198 
k
.
bôs_≥r_w‹d
 = 8;

199 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

202 i‡(
a
 !()
k
.
Àn
) {

203 
	`DEBUG_MSG
("ERROR: SPI WRITE FAILURE\n");

204  
LGW_SPI_ERROR
;

206 
	`DEBUG_MSG
("Note: SPI write success\n");

207  
LGW_SPI_SUCCESS
;

209 
	}
}

214 
	$lgw_•i_r
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
) {

215 
•i_devi˚
;

216 
uöt8_t
 
out_buf
[3];

217 
uöt8_t
 
comm™d_size
;

218 
uöt8_t
 
ö_buf
[
	`ARRAY_SIZE
(
out_buf
)];

219 
•i_ioc_å™s„r
 
k
;

220 
a
;

223 
	`CHECK_NULL
(
•i_èrgë
);

224 i‡((
addªss
 & 0x80) != 0) {

225 
	`DEBUG_MSG
("WARNING: SPIáddress > 127\n");

227 
	`CHECK_NULL
(
d©a
);

229 
•i_devi˚
 = *(*)
•i_èrgë
;

232 i‡(
•i_mux_mode
 =
LGW_SPI_MUX_MODE1
) {

233 
out_buf
[0] = 
•i_mux_èrgë
;

234 
out_buf
[1] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

235 
out_buf
[2] = 0x00;

236 
comm™d_size
 = 3;

238 
out_buf
[0] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

239 
out_buf
[1] = 0x00;

240 
comm™d_size
 = 2;

244 
	`mem£t
(&
k
, 0, (k));

245 
k
.
tx_buf
 = (Ë
out_buf
;

246 
k
.
rx_buf
 = (Ë
ö_buf
;

247 
k
.
Àn
 = 
comm™d_size
;

248 
k
.
cs_ch™ge
 = 0;

249 
a
 = 
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

252 i‡(
a
 !()
k
.
Àn
) {

253 
	`DEBUG_MSG
("ERROR: SPI READ FAILURE\n");

254  
LGW_SPI_ERROR
;

256 
	`DEBUG_MSG
("Note: SPIÑead success\n");

257 *
d©a
 = 
ö_buf
[
comm™d_size
 - 1];

258  
LGW_SPI_SUCCESS
;

260 
	}
}

265 
	$lgw_•i_wb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

266 
•i_devi˚
;

267 
uöt8_t
 
comm™d
[2];

268 
uöt8_t
 
comm™d_size
;

269 
•i_ioc_å™s„r
 
k
[2];

270 
size_to_do
, 
chunk_size
, 
off£t
;

271 
byã_å™s„ªd
 = 0;

272 
i
;

275 
	`CHECK_NULL
(
•i_èrgë
);

276 i‡((
addªss
 & 0x80) != 0) {

277 
	`DEBUG_MSG
("WARNING: SPIáddress > 127\n");

279 
	`CHECK_NULL
(
d©a
);

280 i‡(
size
 == 0) {

281 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

282  
LGW_SPI_ERROR
;

285 
•i_devi˚
 = *(*)
•i_èrgë
;

288 i‡(
•i_mux_mode
 =
LGW_SPI_MUX_MODE1
) {

289 
comm™d
[0] = 
•i_mux_èrgë
;

290 
comm™d
[1] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

291 
comm™d_size
 = 2;

293 
comm™d
[0] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

294 
comm™d_size
 = 1;

296 
size_to_do
 = 
size
;

299 
	`mem£t
(&
k
, 0, (k));

300 
k
[0].
tx_buf
 = (Ë&
comm™d
[0];

301 
k
[0].
Àn
 = 
comm™d_size
;

302 
k
[0].
cs_ch™ge
 = 0;

303 
k
[1].
cs_ch™ge
 = 0;

304 
i
=0; 
size_to_do
 > 0; ++i) {

305 
chunk_size
 = (
size_to_do
 < 
LGW_BURST_CHUNK
) ? size_to_do : LGW_BURST_CHUNK;

306 
off£t
 = 
i
 * 
LGW_BURST_CHUNK
;

307 
k
[1].
tx_buf
 = ()(
d©a
 + 
off£t
);

308 
k
[1].
Àn
 = 
chunk_size
;

309 
byã_å™s„ªd
 +(
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(2), &
k
Ë- k[0].
Àn
 );

310 
	`DEBUG_PRINTF
("BURST WRITE:Åÿå™†%d # chunk %d #Åøns„ºed %d \n", 
size_to_do
, 
chunk_size
, 
byã_å™s„ªd
);

311 
size_to_do
 -
chunk_size
;

315 i‡(
byã_å™s„ªd
 !
size
) {

316 
	`DEBUG_MSG
("ERROR: SPI BURST WRITE FAILURE\n");

317  
LGW_SPI_ERROR
;

319 
	`DEBUG_MSG
("Note: SPI burst write success\n");

320  
LGW_SPI_SUCCESS
;

322 
	}
}

327 
	$lgw_•i_rb
(*
•i_èrgë
, 
uöt8_t
 
•i_mux_mode
, uöt8_à
•i_mux_èrgë
, uöt8_à
addªss
, uöt8_à*
d©a
, 
uöt16_t
 
size
) {

328 
•i_devi˚
;

329 
uöt8_t
 
comm™d
[2];

330 
uöt8_t
 
comm™d_size
;

331 
•i_ioc_å™s„r
 
k
[2];

332 
size_to_do
, 
chunk_size
, 
off£t
;

333 
byã_å™s„ªd
 = 0;

334 
i
;

337 
	`CHECK_NULL
(
•i_èrgë
);

338 i‡((
addªss
 & 0x80) != 0) {

339 
	`DEBUG_MSG
("WARNING: SPIáddress > 127\n");

341 
	`CHECK_NULL
(
d©a
);

342 i‡(
size
 == 0) {

343 
	`DEBUG_MSG
("ERROR: BURST OF NULL LENGTH\n");

344  
LGW_SPI_ERROR
;

347 
•i_devi˚
 = *(*)
•i_èrgë
;

350 i‡(
•i_mux_mode
 =
LGW_SPI_MUX_MODE1
) {

351 
comm™d
[0] = 
•i_mux_èrgë
;

352 
comm™d
[1] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

353 
comm™d_size
 = 2;

355 
comm™d
[0] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

356 
comm™d_size
 = 1;

358 
size_to_do
 = 
size
;

361 
	`mem£t
(&
k
, 0, (k));

362 
k
[0].
tx_buf
 = (Ë&
comm™d
[0];

363 
k
[0].
Àn
 = 
comm™d_size
;

364 
k
[0].
cs_ch™ge
 = 0;

365 
k
[1].
cs_ch™ge
 = 0;

366 
i
=0; 
size_to_do
 > 0; ++i) {

367 
chunk_size
 = (
size_to_do
 < 
LGW_BURST_CHUNK
) ? size_to_do : LGW_BURST_CHUNK;

368 
off£t
 = 
i
 * 
LGW_BURST_CHUNK
;

369 
k
[1].
rx_buf
 = ()(
d©a
 + 
off£t
);

370 
k
[1].
Àn
 = 
chunk_size
;

371 
byã_å™s„ªd
 +(
	`io˘l
(
•i_devi˚
, 
	`SPI_IOC_MESSAGE
(2), &
k
Ë- k[0].
Àn
 );

372 
	`DEBUG_PRINTF
("BURST READ:Åÿå™†%d # chunk %d #Åøns„ºed %d \n", 
size_to_do
, 
chunk_size
, 
byã_å™s„ªd
);

373 
size_to_do
 -
chunk_size
;

377 i‡(
byã_å™s„ªd
 !
size
) {

378 
	`DEBUG_MSG
("ERROR: SPI BURST READ FAILURE\n");

379  
LGW_SPI_ERROR
;

381 
	`DEBUG_MSG
("Note: SPI burstÑead success\n");

382  
LGW_SPI_SUCCESS
;

384 
	}
}

	@libloragw/tst/test_loragw_cal.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sig«l.h
>

32 
	~<m©h.h
>

33 
	~<uni°d.h
>

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_ªg.h
"

37 
	~"l‹agw_aux.h
"

38 
	~"l‹agw_ødio.h
"

43 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

48 
	#DEFAULT_TX_NOTCH_FREQ
 129E3

	)

49 
	#DEFAULT_RSSI_OFFSET
 0.0

	)

50 
	#NB_CAL_MAX
 100

	)

51 
	#MCU_AGC
 1

	)

52 
	#MCU_AGC_FW_BYTE
 8192

	)

53 
	#FW_VERSION_ADDR
 0x20

	)

54 
	#FW_VERSION_CAL
 2

	)

55 
	#RAM_SIZE
 4096

	)

56 
	#FREQ_SIG_NORM
 0.078125

	)

61 
	~"../§c/ˇl_fw.v¨
"

66 
	sˇl_ªs_s
 {

67 
öt8_t
 
	mamp_a
;

68 
öt8_t
 
	mphi_a
;

69 
öt8_t
 
	mamp_b
;

70 
öt8_t
 
	mphi_b
;

71 
öt8_t
 
	moff£t_i_a
 [8];

72 
öt8_t
 
	moff£t_q_a
 [8];

73 
öt8_t
 
	moff£t_i_b
 [8];

74 
öt8_t
 
	moff£t_q_b
 [8];

75 
uöt8_t
 
	mimg_ªj_a
;

76 
uöt8_t
 
	mimg_ªj_b
;

77 
uöt8_t
 
	moff£t_ªj_a
 [8];

78 
uöt8_t
 
	moff£t_ªj_b
 [8];

79 
uöt8_t
 
	mdebug
 [8];

85 
lﬂd_fúmw¨e
(
uöt8_t
 
èrgë
, uöt8_à*
fúmw¨e
, 
uöt16_t
 
size
);

87 
uöt8_t
 
sx125x_ˇl
(uöt8_à
ˇl_cmd
, 
ˇl_ªs_s
 *
ˇl_ªs
);

89 
ªad_ˇ±uª
(
öt16_t
 *
i
, i¡16_à*
q
, 
nb_ßmp
);

91 
uöt8_t
 
gë_img_ªj
(
öt16_t
 *
sig_i
, i¡16_à*
sig_q
, 
nb_ßmp
, 
f_sig_n‹m
);

93 
ußge
 ();

99 
	$ußge
() {

100 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

101 
	`¥ötf
( "Available options:\n");

102 
	`¥ötf
( " -hÖrintÅhis help\n");

103 
	`¥ötf
( " -a <float> Radio A frequency in MHz\n");

104 
	`¥ötf
( " -b <float> Radio B frequency in MHz\n");

105 
	`¥ötf
( " -r <int> RadioÅype (SX1255:1255, SX1257:1257)\n");

106 
	`¥ötf
( " -n <uint> Number of calibration iterations\n");

107 
	`¥ötf
( " -k <int> Concentrator clock source (0:radio_A, 1:radio_B(default))\n");

108 
	`¥ötf
( " -t <int> RadioÅoÑun TX calibration on (0:None(default), 1:radio_A, 2:radio_B, 3:both)\n");

109 
	}
}

114 
	$maö
(
¨gc
, **
¨gv
)

116 
i
, 
j
, 
x
;

117 
öt32_t
 
ªad_vÆ
;

118 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

119 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

120 
uöt8_t
 
fw_vîsi⁄
;

121 
uöt8_t
 
ˇl_cmd
;

122 
uöt8_t
 
ˇl_°©us
;

123 
ˇl_ªs_s
 
ˇl_ªs
 [
NB_CAL_MAX
];

124 
ˇl_ªs_s
 
ˇl_ªs_max
;

125 
ˇl_ªs_s
 
ˇl_ªs_mö
;

126 
öt16_t
 
sig_i
 [
RAM_SIZE
];

127 
öt16_t
 
sig_q
 [
RAM_SIZE
];

128 
uöt8_t
 
img_ªj_a
 [
NB_CAL_MAX
];

129 
uöt8_t
 
img_ªj_b
 [
NB_CAL_MAX
];

130 
uöt8_t
 
img_ªj_a_max
;

131 
uöt8_t
 
img_ªj_a_mö
;

132 
uöt8_t
 
img_ªj_b_max
;

133 
uöt8_t
 
img_ªj_b_mö
;

137 
xi
 = 0;

138 
xd
 = 0.0;

139 
uöt32_t
 
Á
 = 0, 
fb
 = 0;

140 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

141 
uöt8_t
 
˛ocksour˚
 = 1;

142 
uöt8_t
 
tx_íabÀ
 = 0;

143 
nb_ˇl
 = 5;

146 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "ha:b:r:n:k:t:")) != -1) {

147 
i
) {

149 
	`ußge
();

153 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

154 
Á
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

157 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

158 
fb
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

161 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

162 
xi
) {

164 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

167 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

170 
	`¥ötf
("ERROR: invalidÑadioÅype\n");

171 
	`ußge
();

176 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

177 i‡((
i
 !1Ë|| (
xi
 > 
NB_CAL_MAX
)) {

178 
	`¥ötf
("ERROR: invÆidÇumbî o‡ˇlibøti⁄ iãøti⁄†(MAX %d)\n",
NB_CAL_MAX
);

179 
	`ußge
();

182 
nb_ˇl
 = 
xi
;

186 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

187 
˛ocksour˚
 = (
uöt8_t
)
xi
;

190 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

191 
tx_íabÀ
 = (
uöt8_t
)
xi
;

194 
	`¥ötf
("ERROR:árgumentÖarsing\n");

195 
	`ußge
();

201 i‡((
Á
 =0Ë|| (
fb
 == 0)) {

202 
	`¥ötf
("ERROR: missing frequency inputÖarameter:\n");

203 
	`¥ötf
(" RadiÿA RX: %u\n", 
Á
);

204 
	`¥ötf
(" RadiÿB RX: %u\n", 
fb
);

205 
	`ußge
();

209 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

210 
	`¥ötf
("ERROR: missingÑadioÅypeÖarameter:\n");

211 
	`ußge
();

217 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

219 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

220 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

221 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

224 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

226 
rfc⁄f
.
íabÀ
 = 
åue
;

227 
rfc⁄f
.
‰eq_hz
 = 
Á
;

228 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

229 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

230 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

231 
	`lgw_rxrf_£tc⁄f
(0, 
rfc⁄f
);

233 
rfc⁄f
.
‰eq_hz
 = 
fb
;

234 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

235 
	`lgw_rxrf_£tc⁄f
(1, 
rfc⁄f
);

238 
ˇl_cmd
 = 0;

243 
ˇl_cmd
 |= 0x10;

245 
ødio_ty≥
) {

246 
LGW_RADIO_TYPE_SX1255
:

247 
ˇl_cmd
 |= 0x20;

249 
LGW_RADIO_TYPE_SX1257
:

250 
ˇl_cmd
 |= 0x00;

256 
ˇl_cmd
 |= 0x00;

259 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

260 
	`¥ötf
("Radiÿty≥: %d\n",
ødio_ty≥
);

261 
	`¥ötf
("RadiÿA fªquícy: %‡MHz\n",
Á
/1e6);

262 
	`¥ötf
("RadiÿB fªquícy: %‡MHz\n",
fb
/1e6);

263 
	`¥ötf
("Numbî o‡ˇlibøti⁄ iãøti⁄s: %d\n",
nb_ˇl
);

264 
	`¥ötf
("CÆibøti⁄ comm™d: brd: %d, chù: %d, dac: %d\n\n", 
ˇl_cmd
 >> 6, 1257-2*((cal_cmd & 0x20) >> 5), 2+((cal_cmd & 0x10) >> 4));

266 
x
 = 
	`lgw_c⁄√˘
(
Ál£
, 
DEFAULT_TX_NOTCH_FREQ
);

267 i‡(
x
 == -1) {

268 
	`¥ötf
("ERROR: FAIL TO CONNECT BOARD\n");

273 
	`lgw_so·_ª£t
();

276 
	`lgw_ªg_w
(
LGW_GLOBAL_EN
, 1);

279 
	`lgw_ªg_w
(
LGW_RADIO_A_EN
,1);

280 
	`lgw_ªg_w
(
LGW_RADIO_B_EN
,1);

281 
	`waô_ms
(500);

282 
	`lgw_ªg_w
(
LGW_RADIO_RST
,1);

283 
	`waô_ms
(5);

284 
	`lgw_ªg_w
(
LGW_RADIO_RST
,0);

287 
	`lgw_£tup_sx125x
(0, 
˛ocksour˚
, 
åue
, 
ødio_ty≥
, 
Á
);

288 
	`lgw_£tup_sx125x
(1, 
˛ocksour˚
, 
Ál£
, 
ødio_ty≥
, 
fb
);

291 
	`lgw_ªg_w
(
LGW_GPIO_MODE
,31);

292 
	`lgw_ªg_w
(
LGW_GPIO_SELECT_OUTPUT
,2);

295 
	`lﬂd_fúmw¨e
(
MCU_AGC
, 
ˇl_fúmw¨e
, 
MCU_AGC_FW_BYTE
);

296 
	`lgw_ªg_w
(
LGW_MCU_RST_1
,0);

297 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 
FW_VERSION_ADDR
);

298 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

299 
fw_vîsi⁄
 = (
uöt8_t
)
ªad_vÆ
;

300 i‡(
fw_vîsi⁄
 !
FW_VERSION_CAL
) {

301 
	`¥ötf
("ERROR: Vîsi⁄ o‡ˇlibøti⁄ fúmw¨ênŸÉx≥˘ed,á˘uÆ:%dÉx≥˘ed:%d\n", 
fw_vîsi⁄
, 
FW_VERSION_CAL
);

306 
i
=0; i<
nb_ˇl
; i++) {

307 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x01, &
ˇl_ªs
[
i
]);

308 
x
 = 
	`ªad_ˇ±uª
(
sig_i
, 
sig_q
, 
RAM_SIZE
);

316 
img_ªj_a
[
i
] = 
	`gë_img_ªj
(
sig_i
, 
sig_q
, 
RAM_SIZE
, 
FREQ_SIG_NORM
);

318 
	`¥ötf
("Rx A IQ mism©ch: Amp: %3d Phi: %3d Rej: %2d dB Sètus: %3d | Debug: Rej: %2d dB L«: %1d BB: %2d Dec: %2d\n", 
ˇl_ªs
[
i
].
amp_a
, cÆ_ªs[i].
phi_a
, cÆ_ªs[i].
img_ªj_a
, 
ˇl_°©us
, img_ªj_a[i], cÆ_ªs[i].
debug
[0], cal_res[i].debug[1], cal_res[i].debug[2]);

322 
	`¥ötf
("\n");

323 
i
=0; i<
nb_ˇl
; i++) {

324 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x02, &
ˇl_ªs
[
i
]);

325 
x
 = 
	`ªad_ˇ±uª
(
sig_i
, 
sig_q
, 
RAM_SIZE
);

326 
img_ªj_b
[
i
] = 
	`gë_img_ªj
(
sig_i
, 
sig_q
, 
RAM_SIZE
, 
FREQ_SIG_NORM
);

328 
	`¥ötf
("Rx B IQ mism©ch: Amp: %3d Phi: %3d Rej: %2d dB Sètus: %3d | Debug: Rej: %2d dB L«: %1d BB: %2d Dec: %2d\n", 
ˇl_ªs
[
i
].
amp_b
, cÆ_ªs[i].
phi_b
, cÆ_ªs[i].
img_ªj_b
, 
ˇl_°©us
, img_ªj_b[i], cÆ_ªs[i].
debug
[0], cal_res[i].debug[1], cal_res[i].debug[2]);

332 
	`¥ötf
("\n");

333 i‡((
tx_íabÀ
 == 1) || (tx_enable == 3)) {

334 
i
=0; i<
nb_ˇl
; i++) {

335 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x04, &
ˇl_ªs
[
i
]);

337 
	`¥ötf
("Tx A DC offset I :");

338 
j
=0; j<8; j++) {

339 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_i_a
[
j
]);

341 
	`¥ötf
("\n");

342 
	`¥ötf
("Tx A DC offset Q :");

343 
j
=0; j<8; j++) {

344 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_q_a
[
j
]);

346 
	`¥ötf
("\n");

347 
	`¥ötf
("Tx A DCÑejection:");

348 
j
=0; j<8; j++) {

349 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_ªj_a
[
j
]);

351 
	`¥ötf
("\n");

352 
	`¥ötf
("Tx A DC debug BB :");

353 
j
=0; j<8; j++) {

354 
	`¥ötf
(" %3d", (
ˇl_ªs
[
i
].
debug
[
j
] & 0xF0) >> 4);

356 
	`¥ötf
("\n");

357 
	`¥ötf
("Tx A DC debug Dec:");

358 
j
=0; j<8; j++) {

359 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
debug
[
j
] & 0x0F);

361 
	`¥ötf
("\n");

362 
	`¥ötf
("Tx A DC Sètu† : %3d\n", 
ˇl_°©us
);

365 
	`¥ötf
("Tx A calibration bypassed\n");

369 
	`¥ötf
("\n");

370 i‡((
tx_íabÀ
 == 2) || (tx_enable == 3)) {

371 
i
=0; i<
nb_ˇl
; i++) {

372 
ˇl_°©us
 = 
	`sx125x_ˇl
(
ˇl_cmd
 | 0x08, &
ˇl_ªs
[
i
]);

374 
	`¥ötf
("Tx B DC offset I :");

375 
j
=0; j<8; j++) {

376 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_i_b
[
j
]);

378 
	`¥ötf
("\n");

379 
	`¥ötf
("Tx B DC offset Q :");

380 
j
=0; j<8; j++) {

381 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_q_b
[
j
]);

383 
	`¥ötf
("\n");

384 
	`¥ötf
("Tx B DCÑejection:");

385 
j
=0; j<8; j++) {

386 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
off£t_ªj_b
[
j
]);

388 
	`¥ötf
("\n");

389 
	`¥ötf
("Tx B DC debug BB :");

390 
j
=0; j<8; j++) {

391 
	`¥ötf
(" %3d", (
ˇl_ªs
[
i
].
debug
[
j
] & 0xF0) >> 4);

393 
	`¥ötf
("\n");

394 
	`¥ötf
("Tx B DC debug Dec:");

395 
j
=0; j<8; j++) {

396 
	`¥ötf
(" %3d", 
ˇl_ªs
[
i
].
debug
[
j
] & 0x0F);

398 
	`¥ötf
("\n");

399 
	`¥ötf
("Tx B DC Sètu† : %3d\n", 
ˇl_°©us
);

402 
	`¥ötf
("Tx B calibration bypassed\n");

406 
ˇl_ªs_max
.
amp_a
 = -128;

407 
ˇl_ªs_max
.
phi_a
 = -128;

408 
ˇl_ªs_max
.
amp_b
 = -128;

409 
ˇl_ªs_max
.
phi_b
 = -128;

410 
ˇl_ªs_max
.
img_ªj_a
 = 0;

411 
ˇl_ªs_max
.
img_ªj_b
 = 0;

412 
j
=0; j<8; j++) {

413 
ˇl_ªs_max
.
off£t_i_a
[
j
] = -128;

414 
ˇl_ªs_max
.
off£t_q_a
[
j
] = -128;

415 
ˇl_ªs_max
.
off£t_i_b
[
j
] = -128;

416 
ˇl_ªs_max
.
off£t_q_b
[
j
] = -128;

417 
ˇl_ªs_max
.
off£t_ªj_a
[
j
] = 0;

418 
ˇl_ªs_max
.
off£t_ªj_b
[
j
] = 0;

421 
ˇl_ªs_mö
.
amp_a
 = 127;

422 
ˇl_ªs_mö
.
phi_a
 = 127;

423 
ˇl_ªs_mö
.
amp_b
 = 127;

424 
ˇl_ªs_mö
.
phi_b
 = 127;

425 
ˇl_ªs_mö
.
img_ªj_a
 = 255;

426 
ˇl_ªs_mö
.
img_ªj_b
 = 255;

427 
j
=0; j<8; j++) {

428 
ˇl_ªs_mö
.
off£t_i_a
[
j
] = 127;

429 
ˇl_ªs_mö
.
off£t_q_a
[
j
] = 127;

430 
ˇl_ªs_mö
.
off£t_i_b
[
j
] = 127;

431 
ˇl_ªs_mö
.
off£t_q_b
[
j
] = 127;

432 
ˇl_ªs_mö
.
off£t_ªj_a
[
j
] = 255;

433 
ˇl_ªs_mö
.
off£t_ªj_b
[
j
] = 255;

436 
img_ªj_a_max
 = 0;

437 
img_ªj_a_mö
 = 255;

438 
img_ªj_b_max
 = 0;

439 
img_ªj_b_mö
 = 255;

441 
i
=0; i<
nb_ˇl
; i++) {

442 i‡(
ˇl_ªs
[
i
].
amp_a
 > 
ˇl_ªs_max
.amp_a) {

443 
ˇl_ªs_max
.
amp_a
 = 
ˇl_ªs
[
i
].amp_a;

445 i‡(
ˇl_ªs
[
i
].
phi_a
 > 
ˇl_ªs_max
.phi_a) {

446 
ˇl_ªs_max
.
phi_a
 = 
ˇl_ªs
[
i
].phi_a;

448 i‡(
ˇl_ªs
[
i
].
amp_b
 > 
ˇl_ªs_max
.amp_b) {

449 
ˇl_ªs_max
.
amp_b
 = 
ˇl_ªs
[
i
].amp_b;

451 i‡(
ˇl_ªs
[
i
].
phi_b
 > 
ˇl_ªs_max
.phi_b) {

452 
ˇl_ªs_max
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

454 i‡(
ˇl_ªs
[
i
].
phi_b
 > 
ˇl_ªs_max
.phi_b) {

455 
ˇl_ªs_max
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

457 i‡(
ˇl_ªs
[
i
].
img_ªj_a
 > 
ˇl_ªs_max
.img_rej_a) {

458 
ˇl_ªs_max
.
img_ªj_a
 = 
ˇl_ªs
[
i
].img_rej_a;

460 i‡(
ˇl_ªs
[
i
].
img_ªj_b
 > 
ˇl_ªs_max
.img_rej_b) {

461 
ˇl_ªs_max
.
img_ªj_b
 = 
ˇl_ªs
[
i
].img_rej_b;

463 
j
=0; j<8; j++) {

464 i‡(
ˇl_ªs
[
i
].
off£t_i_a
[
j
] > 
ˇl_ªs_max
.offset_i_a[j]) {

465 
ˇl_ªs_max
.
off£t_i_a
[
j
] = 
ˇl_ªs
[
i
].offset_i_a[j];

467 i‡(
ˇl_ªs
[
i
].
off£t_q_a
[
j
] > 
ˇl_ªs_max
.offset_q_a[j]) {

468 
ˇl_ªs_max
.
off£t_q_a
[
j
] = 
ˇl_ªs
[
i
].offset_q_a[j];

470 i‡(
ˇl_ªs
[
i
].
off£t_i_b
[
j
] > 
ˇl_ªs_max
.offset_i_b[j]) {

471 
ˇl_ªs_max
.
off£t_i_b
[
j
] = 
ˇl_ªs
[
i
].offset_i_b[j];

473 i‡(
ˇl_ªs
[
i
].
off£t_q_b
[
j
] > 
ˇl_ªs_max
.offset_q_b[j]) {

474 
ˇl_ªs_max
.
off£t_q_b
[
j
] = 
ˇl_ªs
[
i
].offset_q_b[j];

476 i‡(
ˇl_ªs
[
i
].
off£t_ªj_a
[
j
] > 
ˇl_ªs_max
.offset_rej_a[j]) {

477 
ˇl_ªs_max
.
off£t_ªj_a
[
j
] = 
ˇl_ªs
[
i
].offset_rej_a[j];

479 i‡(
ˇl_ªs
[
i
].
off£t_ªj_b
[
j
] > 
ˇl_ªs_max
.offset_rej_b[j]) {

480 
ˇl_ªs_max
.
off£t_ªj_b
[
j
] = 
ˇl_ªs
[
i
].offset_rej_b[j];

484 i‡(
ˇl_ªs
[
i
].
amp_a
 < 
ˇl_ªs_mö
.amp_a) {

485 
ˇl_ªs_mö
.
amp_a
 = 
ˇl_ªs
[
i
].amp_a;

487 i‡(
ˇl_ªs
[
i
].
phi_a
 < 
ˇl_ªs_mö
.phi_a) {

488 
ˇl_ªs_mö
.
phi_a
 = 
ˇl_ªs
[
i
].phi_a;

490 i‡(
ˇl_ªs
[
i
].
amp_b
 < 
ˇl_ªs_mö
.amp_b) {

491 
ˇl_ªs_mö
.
amp_b
 = 
ˇl_ªs
[
i
].amp_b;

493 i‡(
ˇl_ªs
[
i
].
phi_b
 < 
ˇl_ªs_mö
.phi_b) {

494 
ˇl_ªs_mö
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

496 i‡(
ˇl_ªs
[
i
].
phi_b
 < 
ˇl_ªs_mö
.phi_b) {

497 
ˇl_ªs_mö
.
phi_b
 = 
ˇl_ªs
[
i
].phi_b;

499 i‡(
ˇl_ªs
[
i
].
img_ªj_a
 < 
ˇl_ªs_mö
.img_rej_a) {

500 
ˇl_ªs_mö
.
img_ªj_a
 = 
ˇl_ªs
[
i
].img_rej_a;

502 i‡(
ˇl_ªs
[
i
].
img_ªj_b
 < 
ˇl_ªs_mö
.img_rej_b) {

503 
ˇl_ªs_mö
.
img_ªj_b
 = 
ˇl_ªs
[
i
].img_rej_b;

505 
j
=0; j<8; j++) {

506 i‡(
ˇl_ªs
[
i
].
off£t_i_a
[
j
] < 
ˇl_ªs_mö
.offset_i_a[j]) {

507 
ˇl_ªs_mö
.
off£t_i_a
[
j
] = 
ˇl_ªs
[
i
].offset_i_a[j];

509 i‡(
ˇl_ªs
[
i
].
off£t_q_a
[
j
] < 
ˇl_ªs_mö
.offset_q_a[j]) {

510 
ˇl_ªs_mö
.
off£t_q_a
[
j
] = 
ˇl_ªs
[
i
].offset_q_a[j];

512 i‡(
ˇl_ªs
[
i
].
off£t_i_b
[
j
] < 
ˇl_ªs_mö
.offset_i_b[j]) {

513 
ˇl_ªs_mö
.
off£t_i_b
[
j
] = 
ˇl_ªs
[
i
].offset_i_b[j];

515 i‡(
ˇl_ªs
[
i
].
off£t_q_b
[
j
] < 
ˇl_ªs_mö
.offset_q_b[j]) {

516 
ˇl_ªs_mö
.
off£t_q_b
[
j
] = 
ˇl_ªs
[
i
].offset_q_b[j];

518 i‡(
ˇl_ªs
[
i
].
off£t_ªj_a
[
j
] < 
ˇl_ªs_mö
.offset_rej_a[j]) {

519 
ˇl_ªs_mö
.
off£t_ªj_a
[
j
] = 
ˇl_ªs
[
i
].offset_rej_a[j];

521 i‡(
ˇl_ªs
[
i
].
off£t_ªj_b
[
j
] < 
ˇl_ªs_mö
.offset_rej_b[j]) {

522 
ˇl_ªs_mö
.
off£t_ªj_b
[
j
] = 
ˇl_ªs
[
i
].offset_rej_b[j];

526 i‡(
img_ªj_a
[
i
] > 
img_ªj_a_max
) {

527 
img_ªj_a_max
 = 
img_ªj_a
[
i
];

529 i‡(
img_ªj_a
[
i
] < 
img_ªj_a_mö
) {

530 
img_ªj_a_mö
 = 
img_ªj_a
[
i
];

532 i‡(
img_ªj_b
[
i
] > 
img_ªj_b_max
) {

533 
img_ªj_b_max
 = 
img_ªj_b
[
i
];

535 i‡(
img_ªj_b
[
i
] < 
img_ªj_b_mö
) {

536 
img_ªj_b_mö
 = 
img_ªj_b
[
i
];

541 
	`¥ötf
("\n");

542 
	`¥ötf
("Rx A IQ mism©ch cÆibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

543 
	`¥ötf
("Amp: %3d %3d Phi: %3d %3d Rej: %2d %2d dB (ˇ±.: %2d %2d dB)\n", 
ˇl_ªs_mö
.
amp_a
, 
ˇl_ªs_max
.amp_a, cÆ_ªs_mö.
phi_a
, cÆ_ªs_max.phi_a, cÆ_ªs_mö.
img_ªj_a
, cÆ_ªs_max.img_ªj_a, 
img_ªj_a_mö
, 
img_ªj_a_max
);

545 
	`¥ötf
("\n");

546 
	`¥ötf
("Rx B IQ mism©ch cÆibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

547 
	`¥ötf
("Amp: %3d %3d Phi: %3d %3d Rej: %2d %2d dB (ˇ±.: %2d %2d dB)\n", 
ˇl_ªs_mö
.
amp_b
, 
ˇl_ªs_max
.amp_b, cÆ_ªs_mö.
phi_b
, cÆ_ªs_max.phi_b, cÆ_ªs_mö.
img_ªj_b
, cÆ_ªs_max.img_ªj_b, 
img_ªj_b_mö
, 
img_ªj_b_max
);

549 i‡((
tx_íabÀ
 == 1) || (tx_enable == 3)) {

550 
	`¥ötf
("\n");

551 
	`¥ötf
("Tx A DC off£àˇlibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

552 
j
=0; j<8; j++) {

553 
	`¥ötf
(" Mix gaö %2d: I: %3d %3d Q: %3d %3d Rej: %2d %2d dB\n", 8+
j
, 
ˇl_ªs_mö
.
off£t_i_a
[j], 
ˇl_ªs_max
.off£t_i_a[j], cÆ_ªs_mö.
off£t_q_a
[j], cÆ_ªs_max.off£t_q_a[j], cÆ_ªs_mö.
off£t_ªj_a
[j], cal_res_max.offset_rej_a[j]);

557 i‡((
tx_íabÀ
 == 2) || (tx_enable == 3)) {

558 
	`¥ötf
("\n");

559 
	`¥ötf
("Tx B DC off£àˇlibøti⁄ sèti°ic†⁄ %3d iãøti⁄†(mö, max):\n", 
nb_ˇl
);

560 
j
=0; j<8; j++) {

561 
	`¥ötf
(" Mix gaö %2d: I: %3d %3d Q: %3d %3d Rej: %2d %2d dB\n", 8+
j
, 
ˇl_ªs_mö
.
off£t_i_b
[j], 
ˇl_ªs_max
.off£t_i_b[j], cÆ_ªs_mö.
off£t_q_b
[j], cÆ_ªs_max.off£t_q_b[j], cÆ_ªs_mö.
off£t_ªj_b
[j], cal_res_max.offset_rej_b[j]);

565 
	`lgw_°›
();

567 
	`¥ötf
("\nEnd ofÑadio calibrationÅest\n");

570 
	}
}

574 
uöt8_t
 
	$sx125x_ˇl
(
uöt8_t
 
ˇl_cmd
, 
ˇl_ªs_s
 *
ˇl_ªs
) {

576 
i
;

577 
öt32_t
 
ªad_vÆ
;

578 
uöt8_t
 
ˇl_°©us
;

580 
	`lgw_ªg_w
(
LGW_FORCE_HOST_RADIO_CTRL
,0);

581 
	`lgw_ªg_w
(
LGW_RADIO_SELECT
,
ˇl_cmd
);

582 
	`lgw_ªg_w
(
LGW_MCU_RST_1
,1);

583 
	`lgw_ªg_w
(
LGW_MCU_RST_1
,0);

584 
	`lgw_ªg_w
(
LGW_PAGE_REG
,3);

585 
	`lgw_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
,0);

587 
	`waô_ms
(2000);

589 
	`lgw_ªg_w
(
LGW_EMERGENCY_FORCE_HOST_CTRL
,1);

592 
	`lgw_ªg_r
(
LGW_MCU_AGC_STATUS
, &
ªad_vÆ
);

593 
ˇl_°©us
 = (
uöt8_t
)
ªad_vÆ
;

605 i‡((
ˇl_°©us
 & 0x01) == 0) {

606 
	`¥ötf
("WARNING: calibration couldÇotáccess SX1301Ñegisters\n");

608 i‡((
ˇl_°©us
 & 0x02) == 0) {

609 
	`¥ötf
("WARNING: calibration couldÇotáccessÑadio A\n");

611 i‡((
ˇl_°©us
 & 0x04) == 0) {

612 
	`¥ötf
("WARNING: calibration couldÇotáccessÑadio B\n");

614 i‡((
ˇl_cmd
 & 0x01Ë&& ((
ˇl_°©us
 & 0x08) == 0)) {

615 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio A for imageÑejection\n");

617 i‡((
ˇl_cmd
 & 0x02Ë&& ((
ˇl_°©us
 & 0x10) == 0)) {

618 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio B for imageÑejection\n");

620 i‡((
ˇl_cmd
 & 0x04Ë&& ((
ˇl_°©us
 & 0x20) == 0)) {

621 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio A for TX imbalance\n");

623 i‡((
ˇl_cmd
 & 0x08Ë&& ((
ˇl_°©us
 & 0x40) == 0)) {

624 
	`¥ötf
("WARNING:Öroblem in calibration ofÑadio B for TX imbalance\n");

626 i‡((
ˇl_°©us
 & 0x80) == 0) {

627 
	`¥ötf
("WARNING: CalibrationÇot finished\n");

631 i‡(
ˇl_cmd
 & 0x01) {

632 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_A_AMP_COEFF
, &
ªad_vÆ
);

633 (*
ˇl_ªs
).
amp_a
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

634 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_A_PHI_COEFF
, &
ªad_vÆ
);

635 (*
ˇl_ªs
).
phi_a
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

636 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD0);

637 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

638 (*
ˇl_ªs
).
img_ªj_a
 = (
uöt8_t
)
ªad_vÆ
;

639 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2);

640 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

641 (*
ˇl_ªs
).
debug
[0] = (
uöt8_t
)
ªad_vÆ
;

642 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD3);

643 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

644 (*
ˇl_ªs
).
debug
[1] = (
uöt8_t
)
ªad_vÆ
;

645 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD4);

646 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

647 (*
ˇl_ªs
).
debug
[2] = (
uöt8_t
)
ªad_vÆ
;

649 i‡(
ˇl_cmd
 & 0x02) {

650 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_B_AMP_COEFF
, &
ªad_vÆ
);

651 (*
ˇl_ªs
).
amp_b
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

652 
	`lgw_ªg_r
(
LGW_IQ_MISMATCH_B_PHI_COEFF
, &
ªad_vÆ
);

653 (*
ˇl_ªs
).
phi_b
 = (
öt8_t
)((
ªad_vÆ
 > 31) ?Ñead_val - 64 :Ñead_val);

654 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD1);

655 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

656 (*
ˇl_ªs
).
img_ªj_b
 = (
uöt8_t
)
ªad_vÆ
;

657 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2);

658 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

659 (*
ˇl_ªs
).
debug
[0] = (
uöt8_t
)
ªad_vÆ
;

660 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD3);

661 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

662 (*
ˇl_ªs
).
debug
[1] = (
uöt8_t
)
ªad_vÆ
;

663 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD4);

664 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

665 (*
ˇl_ªs
).
debug
[2] = (
uöt8_t
)
ªad_vÆ
;

667 i‡(
ˇl_cmd
 & 0x04) {

668 
i
=0; i<=7; ++i) {

669 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA0+
i
);

670 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

671 (*
ˇl_ªs
).
off£t_i_a
[
i
] = (
öt8_t
)
ªad_vÆ
;

672 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xA8+
i
);

673 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

674 (*
ˇl_ªs
).
off£t_q_a
[
i
] = (
öt8_t
)
ªad_vÆ
;

675 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xC0+
i
);

676 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

677 (*
ˇl_ªs
).
off£t_ªj_a
[
i
] = (
uöt8_t
)
ªad_vÆ
;

678 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2+
i
);

679 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

680 (*
ˇl_ªs
).
debug
[
i
] = (
uöt8_t
)
ªad_vÆ
;

683 i‡(
ˇl_cmd
 & 0x08) {

684 
i
=0; i<=7; ++i) {

685 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB0+
i
);

686 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

687 (*
ˇl_ªs
).
off£t_i_b
[
i
] = (
öt8_t
)
ªad_vÆ
;

688 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xB8+
i
);

689 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

690 (*
ˇl_ªs
).
off£t_q_b
[
i
] = (
öt8_t
)
ªad_vÆ
;

691 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xC8+
i
);

692 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

693 (*
ˇl_ªs
).
off£t_ªj_b
[
i
] = (
uöt8_t
)
ªad_vÆ
;

694 
	`lgw_ªg_w
(
LGW_DBG_AGC_MCU_RAM_ADDR
, 0xD2+
i
);

695 
	`lgw_ªg_r
(
LGW_DBG_AGC_MCU_RAM_DATA
, &
ªad_vÆ
);

696 (*
ˇl_ªs
).
debug
[
i
] = (
uöt8_t
)
ªad_vÆ
;

700  
ˇl_°©us
;

701 
	}
}

705 
	$ªad_ˇ±uª
(
öt16_t
 *
sig_i
, i¡16_à*
sig_q
, 
nb_ßmp
) {

707 
uöt8_t
 
ªad_bur°
[4];

708 
uöt16_t
 
d©a_i_c2
;

709 
uöt16_t
 
d©a_q_c2
;

710 
i
;

712 
	`lgw_ªg_w
(
LGW_CAPTURE_RAM_ADDR
, 0);

713 
i
=0 ; i<
nb_ßmp
 ; i++) {

714 
	`lgw_ªg_rb
(
LGW_CAPTURE_RAM_DATA
, 
ªad_bur°
, 4);

715 
d©a_i_c2
 = ((
uöt16_t
)
ªad_bur°
[3] << 4) + ((uint16_t)read_burst[2] >> 4);

716 
d©a_q_c2
 = ((
uöt16_t
)
ªad_bur°
[1] << 4) + ((uint16_t)read_burst[0] >> 4);

717 
sig_i
[
i
] = (
öt16_t
)((
d©a_i_c2
 > 2047) ? data_i_c2 - 4096 : data_i_c2);

718 
sig_q
[
i
] = (
öt16_t
)((
d©a_q_c2
 > 2047) ? data_q_c2 - 4096 : data_q_c2);

722 
	}
}

726 
uöt8_t
 
	$gë_img_ªj
(
öt16_t
 *
sig_i
, i¡16_à*
sig_q
, 
nb_ßmp
, 
f_sig_n‹m
) {

728 
i
;

729 
pha£
;

730 
c‹r_sig_i
, 
c‹r_sig_q
, 
c‹r_sig_abs
;

731 
c‹r_img_i
, 
c‹r_img_q
, 
c‹r_img_abs
;

732 
img_ªj
;

734 
c‹r_sig_i
 = 0;

735 
c‹r_sig_q
 = 0;

736 
c‹r_img_i
 = 0;

737 
c‹r_img_q
 = 0;

739 
i
=0 ; i<
nb_ßmp
 ; i++) {

740 
pha£
 = 6.28318530717959*
i
*
f_sig_n‹m
;

741 
c‹r_sig_i
 +()
sig_i
[
i
]*
	`cos
–
pha£
Ë- ()
sig_q
[i]*
	`sö
(Öhase);

742 
c‹r_sig_q
 +()
sig_q
[
i
]*
	`cos
–
pha£
Ë+ ()
sig_i
[i]*
	`sö
(Öhase);

743 
c‹r_img_i
 +()
sig_i
[
i
]*
	`cos
(-
pha£
Ë- ()
sig_q
[i]*
	`sö
(-phase);

744 
c‹r_img_q
 +()
sig_q
[
i
]*
	`cos
(-
pha£
Ë+ ()
sig_i
[i]*
	`sö
(-phase);

747 
c‹r_sig_abs
 = 
	`sqπ
–
c‹r_sig_i
*c‹r_sig_ò+ 
c‹r_sig_q
*corr_sig_q );

748 
c‹r_img_abs
 = 
	`sqπ
–
c‹r_img_i
*c‹r_img_ò+ 
c‹r_img_q
*corr_img_q );

750 
img_ªj
 = 20*
	`log10
(
c‹r_sig_abs
/
c‹r_img_abs
);

752  (
uöt8_t
)
img_ªj
;

753 
	}
}

	@libloragw/tst/test_loragw_gps.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sig«l.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

35 
	~"l‹agw_hÆ.h
"

36 
	~"l‹agw_gps.h
"

37 
	~"l‹agw_aux.h
"

42 
	gexô_sig
 = 0;

43 
	gquô_sig
 = 0;

45 
åef
 
	gµm_ªf
;

50 
sig_h™dÀr
(
sigio
);

51 
gps_¥o˚ss_sync
();

52 
gps_¥o˚ss_co‹ds
();

57 
	$sig_h™dÀr
(
sigio
) {

58 i‡(
sigio
 =
SIGQUIT
) {

59 
quô_sig
 = 1;;

60 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

61 
exô_sig
 = 1;

63 
	}
}

65 
	$gps_¥o˚ss_sync
() {

67 
uöt32_t
 
µm_t°amp
;

68 
time•ec
 
µm_gps
;

69 
time•ec
 
µm_utc
;

72 
uöt32_t
 
x
, 
z
;

73 
time•ec
 
y
;

76 
i
 = 
	`lgw_gps_gë
(&
µm_utc
, &
µm_gps
, 
NULL
, NULL);

77 i‡(
i
 !
LGW_GPS_SUCCESS
) {

78 
	`¥ötf
(" No validÑeference GPSÅimeávailable, synchronization impossible.\n");

83 
i
 = 
	`lgw_gë_åig˙t
(&
µm_t°amp
);

84 i‡(
i
 !
LGW_HAL_SUCCESS
) {

85 
	`¥ötf
(" FailedÅoÑeadÅimestamp, synchronization impossible.\n");

90 
i
 = 
	`lgw_gps_sync
(&
µm_ªf
, 
µm_t°amp
, 
µm_utc
, 
µm_gps
);

91 i‡(
i
 !
LGW_GPS_SUCCESS
) {

92 
	`¥ötf
(" SynchronizationÉrror.\n");

97 
	`¥ötf
(" * Synchronization successful *\n");

98 
	`¥ötf
(" UTCÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
utc
.
tv_£c
,Öpm_ªf.utc.
tv_n£c
);

99 
	`¥ötf
(" GPSÑe„ªn˚Åime: %Œd.%09ld\n", ()
µm_ªf
.
gps
.
tv_£c
,Öpm_ªf.gps.
tv_n£c
);

100 
	`¥ötf
(" I¡î«»cou¡îÑe„ªn˚ vÆue: %u\n", 
µm_ªf
.
cou¡_us
);

101 
	`¥ötf
(" ClockÉº‹: %.9f\n", 
µm_ªf
.
xèl_îr
);

103 
x
 = 
µm_t°amp
 + 500000;

104 
	`¥ötf
(" * Test ofÅimestamp counter <-> GPS value conversion *\n");

105 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

106 
	`lgw_˙t2gps
(
µm_ªf
, 
x
, &
y
);

107 
	`¥ötf
(" C⁄vîsi⁄ÅÿGPS: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

108 
	`lgw_gps2˙t
(
µm_ªf
, 
y
, &
z
);

109 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

110 
	`¥ötf
(" * Test ofÅimestamp counter <-> UTC value conversion *\n");

111 
	`¥ötf
(" Te° vÆue: %u\n", 
x
);

112 
	`lgw_˙t2utc
(
µm_ªf
, 
x
, &
y
);

113 
	`¥ötf
(" C⁄vîsi⁄ÅÿUTC: %Œd.%09ld\n", ()
y
.
tv_£c
, y.
tv_n£c
);

114 
	`lgw_utc2˙t
(
µm_ªf
, 
y
, &
z
);

115 
	`¥ötf
(" C⁄vîãd back: %u ==> %d¬µs\n", 
z
, (
öt32_t
)(z-
x
));

116 
	}
}

118 
	$gps_¥o˚ss_co‹ds
() {

120 
co‹d_s
 
co‹d
;

121 
co‹d_s
 
gp£º
;

122 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

125 i‡(
i
 =
LGW_GPS_SUCCESS
) {

126 
	`¥ötf
("# GPS co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
co‹d
.
œt
, co‹d.
l⁄
, co‹d.
Æt
);

127 
	`¥ötf
("# GPSÉº:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
gp£º
.
œt
, gp£º.
l⁄
, gp£º.
Æt
);

129 
	}
}

134 
	$maö
()

136 
siga˘i⁄
 
siga˘
;

138 
i
;

141 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

142 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

145 
£rül_buff
[128];

146 
size_t
 
wr_idx
 = 0;

147 
gps_ây_dev
;

150 
gps_msg
 
œã°_msg
;

153 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

154 
siga˘
.
ß_Êags
 = 0;

155 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

156 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

157 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

158 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

161 
	`¥ötf
("Beginning ofÅest forÜoragw_gps.c\n");

162 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n***\n", 
	`lgw_vîsi⁄_öfo
());

165 
i
 = 
	`lgw_gps_íabÀ
("/dev/âyAMA0", "ubx7", 0, &
gps_ây_dev
);

166 i‡(
i
 !
LGW_GPS_SUCCESS
) {

167 
	`¥ötf
("ERROR: IMPOSSIBLE TO ENABLE GPS\n");

168 
	`exô
(
EXIT_FAILURE
);

173 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

174 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

175 
bﬂrdc⁄f
.
˛k§c
 = 1;

176 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

179 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

180 
rfc⁄f
.
íabÀ
 = 
åue
;

181 
rfc⁄f
.
‰eq_hz
 = 868000000;

182 
rfc⁄f
.
rssi_off£t
 = 0.0;

183 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

184 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

185 
	`lgw_rxrf_£tc⁄f
(0, 
rfc⁄f
);

187 
	`lgw_°¨t
();

190 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

191 
	`mem£t
(&
µm_ªf
, 0, Öpm_ref);

194 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

195 
size_t
 
rd_idx
 = 0;

196 
size_t
 
‰ame_íd_idx
 = 0;

199 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
gps_ây_dev
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

200 i‡(
nb_ch¨
 <= 0) {

201 
	`¥ötf
("WARNING: [gps]Ñód(Ëªtu∫ed vÆuê%d\n", 
nb_ch¨
);

204 
wr_idx
 +(
size_t
)
nb_ch¨
;

210 
rd_idx
 < 
wr_idx
) {

211 
size_t
 
‰ame_size
 = 0;

214 i‡(
£rül_buff
[
rd_idx
] =
LGW_GPS_UBX_SYNC_CHAR
) {

219 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

221 i‡(
‰ame_size
 > 0) {

222 i‡(
œã°_msg
 =
INCOMPLETE
) {

224 
‰ame_size
 = 0;

225 } i‡(
œã°_msg
 =
INVALID
) {

227 
	`¥ötf
("WARNING: [gps] couldÇot getá valid message from GPS (noÅime)\n");

228 
‰ame_size
 = 0;

229 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

230 
	`¥ötf
("\n~~ UBX NAV-TIMEGPS sentence,Åriggering synchronizationáttempt ~~\n");

231 
	`gps_¥o˚ss_sync
();

234 } if(
£rül_buff
[
rd_idx
] =
LGW_GPS_NMEA_SYNC_CHAR
) {

239 * 
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
],()0x0a, (
wr_idx
 -Ñd_idx));

241 i‡(
nmó_íd_±r
) {

243 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

244 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

246 if(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

248 
‰ame_size
 = 0;

249 } i‡(
œã°_msg
 =
NMEA_RMC
) {

250 
	`gps_¥o˚ss_co‹ds
();

255 i‡(
‰ame_size
 > 0) {

258 
rd_idx
 +
‰ame_size
;

259 
‰ame_íd_idx
 = 
rd_idx
;

261 
rd_idx
++;

265 i‡(
‰ame_íd_idx
) {

267 
	`mem˝y
(
£rül_buff
,&£rül_buff[
‰ame_íd_idx
],
wr_idx
 - frame_end_idx);

268 
wr_idx
 -
‰ame_íd_idx
;

272 i‡(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

273 
	`mem˝y
(
£rül_buff
,&£rül_buff[
LGW_GPS_MIN_MSG_SIZE
],
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

274 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

279 i‡(
exô_sig
 == 1) {

280 
	`lgw_gps_dißbÀ
(
gps_ây_dev
);

281 
	`lgw_°›
();

284 
	`¥ötf
("\nEnd ofÅest forÜoragw_gps.c\n");

285 
	`exô
(
EXIT_SUCCESS
);

286 
	}
}

	@libloragw/tst/test_loragw_hal.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<sig«l.h
>

32 
	~<uni°d.h
>

34 
	~"l‹agw_hÆ.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_aux.h
"

41 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

46 
	#DEFAULT_RSSI_OFFSET
 0.0

	)

47 
	#DEFAULT_NOTCH_FREQ
 129000U

	)

52 
	gexô_sig
 = 0;

53 
	gquô_sig
 = 0;

58 
sig_h™dÀr
(
sigio
);

63 
	$sig_h™dÀr
(
sigio
) {

64 i‡(
sigio
 =
SIGQUIT
) {

65 
quô_sig
 = 1;;

66 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

67 
exô_sig
 = 1;

69 
	}
}

72 
	$ußge
() {

73 
	`¥ötf
("Libøry vîsi⁄ inf‹m©i⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

74 
	`¥ötf
( "Available options:\n");

75 
	`¥ötf
( " -hÖrintÅhis help\n");

76 
	`¥ötf
( " -a <float> Radio A RX frequency in MHz\n");

77 
	`¥ötf
( " -b <float> Radio B RX frequency in MHz\n");

78 
	`¥ötf
( " -t <float> Radio TX frequency in MHz\n");

79 
	`¥ötf
( " -r <int> RadioÅype (SX1255:1255, SX1257:1257)\n");

80 
	`¥ötf
( " -k <int> Concentrator clock source (0:Ñadio_A, 1:Ñadio_B(default))\n");

81 
	}
}

86 
	$maö
(
¨gc
, **
¨gv
)

88 
siga˘i⁄
 
siga˘
;

90 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

91 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

92 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

94 
lgw_pkt_rx_s
 
rxpkt
[4];

95 
lgw_pkt_tx_s
 
txpkt
;

96 
lgw_pkt_rx_s
 *
p
;

98 
i
, 
j
;

99 
nb_pkt
;

100 
uöt32_t
 
Á
 = 0, 
fb
 = 0, 
·
 = 0;

101 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

102 
uöt8_t
 
˛ocksour˚
 = 1;

104 
uöt32_t
 
tx_˙t
 = 0;

105 
lo›_˙t
 = 0;

106 
uöt8_t
 
°©us_v¨
 = 0;

107 
xd
 = 0.0;

108 
xi
 = 0;

111 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "ha:b:t:r:k:")) != -1) {

112 
i
) {

114 
	`ußge
();

118 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

119 
Á
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

122 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

123 
fb
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

126 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

127 
·
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

130 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

131 
xi
) {

133 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

136 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

139 
	`¥ötf
("ERROR: invalidÑadioÅype\n");

140 
	`ußge
();

145 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

146 
˛ocksour˚
 = (
uöt8_t
)
xi
;

149 
	`¥ötf
("ERROR:árgumentÖarsing\n");

150 
	`ußge
();

156 i‡((
Á
 =0Ë|| (
fb
 =0Ë|| (
·
 == 0)) {

157 
	`¥ötf
("ERROR: missing frequency inputÖarameter:\n");

158 
	`¥ötf
(" RadiÿA RX: %u\n", 
Á
);

159 
	`¥ötf
(" RadiÿB RX: %u\n", 
fb
);

160 
	`¥ötf
(" RadiÿTX: %u\n", 
·
);

161 
	`ußge
();

165 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

166 
	`¥ötf
("ERROR: missingÑadioÅypeÖarameter:\n");

167 
	`ußge
();

172 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

173 
siga˘
.
ß_Êags
 = 0;

174 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

175 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

176 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

177 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

180 
	`¥ötf
("Beginning ofÅest forÜoragw_hal.c\n");

182 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n\n", 
	`lgw_vîsi⁄_öfo
());

185 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

187 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

188 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

189 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

192 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

194 
rfc⁄f
.
íabÀ
 = 
åue
;

195 
rfc⁄f
.
‰eq_hz
 = 
Á
;

196 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

197 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

198 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

199 
rfc⁄f
.
tx_nŸch_‰eq
 = 
DEFAULT_NOTCH_FREQ
;

200 
	`lgw_rxrf_£tc⁄f
(0, 
rfc⁄f
);

202 
rfc⁄f
.
íabÀ
 = 
åue
;

203 
rfc⁄f
.
‰eq_hz
 = 
fb
;

204 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

205 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

206 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

207 
	`lgw_rxrf_£tc⁄f
(1, 
rfc⁄f
);

210 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

212 
ifc⁄f
.
íabÀ
 = 
åue
;

213 
ifc⁄f
.
rf_chaö
 = 1;

214 
ifc⁄f
.
‰eq_hz
 = -400000;

215 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

216 
	`lgw_rxif_£tc⁄f
(0, 
ifc⁄f
);

218 
ifc⁄f
.
íabÀ
 = 
åue
;

219 
ifc⁄f
.
rf_chaö
 = 1;

220 
ifc⁄f
.
‰eq_hz
 = -200000;

221 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

222 
	`lgw_rxif_£tc⁄f
(1, 
ifc⁄f
);

224 
ifc⁄f
.
íabÀ
 = 
åue
;

225 
ifc⁄f
.
rf_chaö
 = 1;

226 
ifc⁄f
.
‰eq_hz
 = 0;

227 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

228 
	`lgw_rxif_£tc⁄f
(2, 
ifc⁄f
);

230 
ifc⁄f
.
íabÀ
 = 
åue
;

231 
ifc⁄f
.
rf_chaö
 = 0;

232 
ifc⁄f
.
‰eq_hz
 = -400000;

233 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

234 
	`lgw_rxif_£tc⁄f
(3, 
ifc⁄f
);

236 
ifc⁄f
.
íabÀ
 = 
åue
;

237 
ifc⁄f
.
rf_chaö
 = 0;

238 
ifc⁄f
.
‰eq_hz
 = -200000;

239 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

240 
	`lgw_rxif_£tc⁄f
(4, 
ifc⁄f
);

242 
ifc⁄f
.
íabÀ
 = 
åue
;

243 
ifc⁄f
.
rf_chaö
 = 0;

244 
ifc⁄f
.
‰eq_hz
 = 0;

245 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

246 
	`lgw_rxif_£tc⁄f
(5, 
ifc⁄f
);

248 
ifc⁄f
.
íabÀ
 = 
åue
;

249 
ifc⁄f
.
rf_chaö
 = 0;

250 
ifc⁄f
.
‰eq_hz
 = 200000;

251 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

252 
	`lgw_rxif_£tc⁄f
(6, 
ifc⁄f
);

254 
ifc⁄f
.
íabÀ
 = 
åue
;

255 
ifc⁄f
.
rf_chaö
 = 0;

256 
ifc⁄f
.
‰eq_hz
 = 400000;

257 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_MULTI
;

258 
	`lgw_rxif_£tc⁄f
(7, 
ifc⁄f
);

261 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

262 
ifc⁄f
.
íabÀ
 = 
åue
;

263 
ifc⁄f
.
rf_chaö
 = 0;

264 
ifc⁄f
.
‰eq_hz
 = 0;

265 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

266 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF10
;

267 
	`lgw_rxif_£tc⁄f
(8, 
ifc⁄f
);

270 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

271 
ifc⁄f
.
íabÀ
 = 
åue
;

272 
ifc⁄f
.
rf_chaö
 = 1;

273 
ifc⁄f
.
‰eq_hz
 = 0;

274 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

275 
ifc⁄f
.
d©¨©e
 = 64000;

276 
	`lgw_rxif_£tc⁄f
(9, 
ifc⁄f
);

279 
	`mem£t
(&
txpkt
, 0, (txpkt));

280 
txpkt
.
‰eq_hz
 = 
·
;

281 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

282 
txpkt
.
rf_powî
 = 10;

283 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

284 
txpkt
.
b™dwidth
 = 
BW_125KHZ
;

285 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
;

286 
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

287 
	`°r˝y
((*)
txpkt
.
∑ylﬂd
, "TX.TEST.LORA.GW.????" );

288 
txpkt
.
size
 = 20;

289 
txpkt
.
¥ómbÀ
 = 6;

290 
txpkt
.
rf_chaö
 = 0;

306 
i
 = 
	`lgw_°¨t
();

307 i‡(
i
 =
LGW_HAL_SUCCESS
) {

308 
	`¥ötf
("*** Concentrator started ***\n");

310 
	`¥ötf
("*** ImpossibleÅo start concentrator ***\n");

322 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

323 
lo›_˙t
++;

326 
nb_pkt
 = 
	`lgw_ª˚ive
(
	`ARRAY_SIZE
(
rxpkt
),Ñxpkt);

328 i‡(
nb_pkt
 == 0) {

329 
	`waô_ms
(300);

332 
i
=0; i < 
nb_pkt
; ++i) {

333 
p
 = &
rxpkt
[
i
];

334 
	`¥ötf
("---\nRcvÖkà#%d >>", 
i
+1);

335 i‡(
p
->
°©us
 =
STAT_CRC_OK
) {

336 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

337 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

338 
	`¥ötf
(" size:%3u", 
p
->
size
);

339 
p
-> 
moduœti⁄
) {

340 
MOD_LORA
: 
	`¥ötf
(" LoRa"); ;

341 
MOD_FSK
: 
	`¥ötf
(" FSK"); ;

342 : 
	`¥ötf
(" modulation?");

344 
p
->
d©¨©e
) {

345 
DR_LORA_SF7
: 
	`¥ötf
(" SF7"); ;

346 
DR_LORA_SF8
: 
	`¥ötf
(" SF8"); ;

347 
DR_LORA_SF9
: 
	`¥ötf
(" SF9"); ;

348 
DR_LORA_SF10
: 
	`¥ötf
(" SF10"); ;

349 
DR_LORA_SF11
: 
	`¥ötf
(" SF11"); ;

350 
DR_LORA_SF12
: 
	`¥ötf
(" SF12"); ;

351 : 
	`¥ötf
(" datarate?");

353 
p
->
codî©e
) {

354 
CR_LORA_4_5
: 
	`¥ötf
(" CR1(4/5)"); ;

355 
CR_LORA_4_6
: 
	`¥ötf
(" CR2(2/3)"); ;

356 
CR_LORA_4_7
: 
	`¥ötf
(" CR3(4/7)"); ;

357 
CR_LORA_4_8
: 
	`¥ötf
(" CR4(1/2)"); ;

358 : 
	`¥ötf
(" coderate?");

360 
	`¥ötf
("\n");

361 
	`¥ötf
(" RSSI:%+6.1‡SNR:%+5.1‡(mö:%+5.1f, max:%+5.1fË∑ylﬂd:\n", 
p
->
rssi
,Ö->
¢r
,Ö->
¢r_mö
,Ö->
¢r_max
);

363 
j
 = 0; j < 
p
->
size
; ++j) {

364 
	`¥ötf
(" %02X", 
p
->
∑ylﬂd
[
j
]);

366 
	`¥ötf
(" #\n");

367 } i‡(
p
->
°©us
 =
STAT_CRC_BAD
) {

368 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

369 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

370 
	`¥ötf
(" size:%3u\n", 
p
->
size
);

371 
	`¥ötf
(" CRCÉrror, damagedÖacket\n\n");

372 } i‡(
p
->
°©us
 =
STAT_NO_CRC
){

373 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

374 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

375 
	`¥ötf
(" size:%3u\n", 
p
->
size
);

376 
	`¥ötf
("Ço CRC\n\n");

378 
	`¥ötf
(" if_chaö:%2d", 
p
->
if_chaö
);

379 
	`¥ötf
("Å°amp:%010u", 
p
->
cou¡_us
);

380 
	`¥ötf
(" size:%3u\n", 
p
->
size
);

381 
	`¥ötf
(" invalid status ?!?\n\n");

387 i‡(
lo›_˙t
%16 == 0) {

389 
txpkt
.
∑ylﬂd
[16] = 0xf‡& (
tx_˙t
 >> 24);

390 
txpkt
.
∑ylﬂd
[17] = 0xf‡& (
tx_˙t
 >> 16);

391 
txpkt
.
∑ylﬂd
[18] = 0xf‡& (
tx_˙t
 >> 8);

392 
txpkt
.
∑ylﬂd
[19] = 0xf‡& 
tx_˙t
;

393 
i
 = 
	`lgw_£nd
(
txpkt
);

394 
j
 = 0;

395 
	`¥ötf
("+++\nSídögÖackë #%d,Ñ‡∑th %d,Ñëu∫ %d\n°©u†-> ", 
tx_˙t
, 
txpkt
.
rf_chaö
, 
i
);

397 ++
j
;

398 
	`waô_ms
(100);

399 
	`lgw_°©us
(
TX_STATUS
, &
°©us_v¨
);

400 
	`¥ötf
("%d:", 
°©us_v¨
);

401 } (
°©us_v¨
 !
TX_FREE
Ë&& (
j
 < 100));

402 ++
tx_˙t
;

403 
	`¥ötf
("\nTX finished\n");

407 i‡(
exô_sig
 == 1) {

409 
	`lgw_°›
();

412 
	`¥ötf
("\nEnd ofÅest forÜoragw_hal.c\n");

414 
	}
}

	@libloragw/tst/test_loragw_reg.c

20 
	~<°döt.h
>

21 
	~<°dio.h
>

23 
	~"l‹agw_ªg.h
"

28 
	#BURST_TEST_LENGTH
 8192

	)

30 
	$maö
()

32 
öt32_t
 
ªad_vÆue
, 
ã°_vÆue
;

33 
uöt16_t
 
lf§
;

34 
uöt8_t
 
bur°_buffout
[
BURST_TEST_LENGTH
];

35 
uöt8_t
 
bur°_buffö
[
BURST_TEST_LENGTH
];

36 
i
;

38 
	`¥ötf
("Beginning ofÅest forÜoragw_reg.c\n");

40 
	`lgw_c⁄√˘
(
Ál£
, 129E3);

48 
	`lgw_ªg_w
(
LGW_SOFT_RESET
, 1);

49 
	`lgw_ªg_check
(
°dout
);

54 
ã°_vÆue
 = 197;

55 
	`lgw_ªg_w
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, 
ã°_vÆue
);

56 
	`lgw_ªg_r
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, &
ªad_vÆue
);

57 
	`¥ötf
("IMPLICIT_PAYLOAD_LENGHT = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

68 
ã°_vÆue
 = 11;

69 
	`lgw_ªg_w
(
LGW_FRAME_SYNCH_PEAK2_POS
, 
ã°_vÆue
);

70 
	`lgw_ªg_r
(
LGW_FRAME_SYNCH_PEAK2_POS
, &
ªad_vÆue
);

71 
	`¥ötf
("FRAME_SYNCH_PEAK2_POS = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

82 
ã°_vÆue
 = 49253;

83 
	`lgw_ªg_w
(
LGW_PREAMBLE_SYMB1_NB
, 
ã°_vÆue
);

84 
	`lgw_ªg_r
(
LGW_PREAMBLE_SYMB1_NB
, &
ªad_vÆue
);

85 
	`¥ötf
("PREAMBLE_SYMB1_NB = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

96 
ã°_vÆue
 = 3173;

97 
	`lgw_ªg_w
(
LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
, 
ã°_vÆue
);

98 
	`lgw_ªg_r
(
LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4
, &
ªad_vÆue
);

99 
	`¥ötf
("ADJUST_MODEM_START_OFFSET_SF12_RDX4 = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

102 
ã°_vÆue
 = -1947;

103 
	`lgw_ªg_w
(
LGW_IF_FREQ_1
, 
ã°_vÆue
);

104 
	`lgw_ªg_r
(
LGW_IF_FREQ_1
, &
ªad_vÆue
);

105 
	`¥ötf
("IF_FREQ_1 = %d (should bê%d)\n", 
ªad_vÆue
, 
ã°_vÆue
);

110 
lf§
 = 0xFFFF;

111 
i
=0; i<
BURST_TEST_LENGTH
; ++i) {

112 
bur°_buffout
[
i
] = (
uöt8_t
)(
lf§
 ^ (lfsr >> 4));

114 
lf§
 = (lfsr & 1) ? ((lfsr >> 1) ^ 0x8679) : (lfsr >> 1);

117 
	`lgw_ªg_wb
(
LGW_TX_DATA_BUF_DATA
, 
bur°_buffout
, 256);

118 
	`lgw_ªg_rb
(
LGW_RX_DATA_BUF_DATA
, 
bur°_buffö
, 256);

127 
	`lgw_disc⁄√˘
();

130 
	`¥ötf
("End ofÅest forÜoragw_reg.c\n");

132 
	}
}

	@libloragw/tst/test_loragw_spi.c

21 
	~<°döt.h
>

22 
	~<°dio.h
>

24 
	~"l‹agw_•i.h
"

29 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

34 
	#BURST_TEST_SIZE
 2500

	)

35 
	#TIMING_REPEAT
 1

	)

40 
	$maö
()

42 
i
;

43 *
•i_èrgë
 = 
NULL
;

44 
uöt8_t
 
d©a
 = 0;

45 
uöt8_t
 
d©aout
[
BURST_TEST_SIZE
];

46 
uöt8_t
 
d©aö
[
BURST_TEST_SIZE
];

47 
uöt8_t
 
•i_mux_mode
 = 
LGW_SPI_MUX_MODE0
;

49 
i
 = 0; i < 
BURST_TEST_SIZE
; ++i) {

50 
d©aout
[
i
] = 0x30 + (i % 10);

51 
d©aö
[
i
] = 0x23;

54 
	`¥ötf
("Beginning ofÅest forÜoragw_spi.c\n");

55 
	`lgw_•i_›í
(&
•i_èrgë
);

58 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

59 
	`lgw_•i_w
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0xAA, 0x96);

60 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

61 
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, &
d©a
);

64 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

65 
	`lgw_•i_wb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, 
d©aout
, 16);

66 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

67 
	`lgw_•i_rb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, 
d©aö
, 16);

70 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

71 
	`lgw_•i_wb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x5A, 
d©aout
, 
	`ARRAY_SIZE
(dataout));

72 
i
 = 0; i < 
TIMING_REPEAT
; ++i)

73 
	`lgw_•i_rb
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x5A, 
d©aö
, 
	`ARRAY_SIZE
(datain));

76 
	`lgw_•i_r
(
•i_èrgë
, 
•i_mux_mode
, 
LGW_SPI_MUX_TARGET_SX1301
, 0x55, &
d©a
);

77 
	`¥ötf
("d©®ª˚ived (sim∂êªad): %d\n",
d©a
);

79 
	`lgw_•i_˛o£
(
•i_èrgë
);

80 
	`¥ötf
("End ofÅest forÜoragw_spi.c\n");

83 
	}
}

	@lora_pkt_fwd/inc/base64.h

17 #i‚de‡
_BASE64_H


18 
	#_BASE64_H


	)

23 
	~<°döt.h
>

36 
bö_to_b64_n›ad
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
);

46 
b64_to_bö_n›ad
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
);

53 
bö_to_b64
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
);

58 
b64_to_bö
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
);

	@lora_pkt_fwd/inc/jitqueue.h

17 #i‚de‡
_LORA_PKTFWD_JIT_H


18 
	#_LORA_PKTFWD_JIT_H


	)

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

25 
	~<sys/time.h
>

27 
	~"l‹agw_hÆ.h
"

28 
	~"l‹agw_gps.h
"

33 
	#JIT_QUEUE_MAX
 32

	)

34 
	#JIT_NUM_BEACON_IN_QUEUE
 3

	)

39 
	ejô_pkt_ty≥_e
 {

40 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_A
,

41 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_B
,

42 
	mJIT_PKT_TYPE_DOWNLINK_CLASS_C
,

43 
	mJIT_PKT_TYPE_BEACON


46 
	ejô_îr‹_e
 {

47 
	mJIT_ERROR_OK
,

48 
	mJIT_ERROR_TOO_LATE
,

49 
	mJIT_ERROR_TOO_EARLY
,

50 
	mJIT_ERROR_FULL
,

51 
	mJIT_ERROR_EMPTY
,

52 
	mJIT_ERROR_COLLISION_PACKET
,

53 
	mJIT_ERROR_COLLISION_BEACON
,

54 
	mJIT_ERROR_TX_FREQ
,

55 
	mJIT_ERROR_TX_POWER
,

56 
	mJIT_ERROR_GPS_UNLOCKED
,

57 
	mJIT_ERROR_INVALID


60 
	sjô_node_s
 {

62 
lgw_pkt_tx_s
 
	mpkt
;

63 
jô_pkt_ty≥_e
 
	mpkt_ty≥
;

66 
uöt32_t
 
	m¥e_dñay
;

67 
uöt32_t
 
	mpo°_dñay
;

70 
	sjô_queue_s
 {

71 
uöt8_t
 
	mnum_pkt
;

72 
uöt8_t
 
	mnum_bóc⁄
;

73 
jô_node_s
 
	mnodes
[
JIT_QUEUE_MAX
];

85 
boﬁ
 
jô_queue_is_fuŒ
(
jô_queue_s
 *
queue
);

93 
boﬁ
 
jô_queue_is_em±y
(
jô_queue_s
 *
queue
);

102 
jô_queue_öô
(
jô_queue_s
 *
queue
);

117 
jô_îr‹_e
 
jô_íqueue
(
jô_queue_s
 *
queue
, 
timevÆ
 *
time
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 
pkt_ty≥
);

131 
jô_îr‹_e
 
jô_dequeue
(
jô_queue_s
 *
queue
, 
ödex
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 *
pkt_ty≥
);

145 
jô_îr‹_e
 
jô_≥ek
(
jô_queue_s
 *
queue
, 
timevÆ
 *
time
, *
pkt_idx
);

153 
jô_¥öt_queue
(
jô_queue_s
 *
queue
, 
boﬁ
 
show_Æl
, 
debug_Àvñ
);

	@lora_pkt_fwd/inc/parson.h

24 #i‚de‡
∑rs⁄_∑rs⁄_h


25 
	#∑rs⁄_∑rs⁄_h


	)

27 #ifde‡
__˝lu•lus


32 
	~<°ddef.h
>

35 
js⁄_obje˘_t
 
	tJSON_Obje˘
;

36 
js⁄_¨øy_t
 
	tJSON_Aºay
;

37 
js⁄_vÆue_t
 
	tJSON_VÆue
;

39 
	ejs⁄_vÆue_ty≥
 {

40 
JSONEº‹
 = -1,

41 
JSONNuŒ
 = 1,

42 
JSONSåög
 = 2,

43 
JSONNumbî
 = 3,

44 
JSONObje˘
 = 4,

45 
JSONAºay
 = 5,

46 
JSONBoﬁón
 = 6

48 
	tJSON_VÆue_Ty≥
;

50 
	ejs⁄_ªsu…_t
 {

51 
JSONSuc˚ss
 = 0,

52 
JSONFaûuª
 = -1

54 
	tJSON_Sètus
;

56 * (*
	tJSON_MÆloc_Fun˘i⁄
)(
	tsize_t
);

57 (*
JSON_Fªe_Fun˘i⁄
)(*);

61 
js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
);

64 
JSON_VÆue
 * 
js⁄_∑r£_fûe
(c⁄° *
fûíame
);

68 
JSON_VÆue
 * 
js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
);

71 
JSON_VÆue
 * 
js⁄_∑r£_°rög
(c⁄° *
°rög
);

75 
JSON_VÆue
 * 
js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
);

78 
size_t
 
js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
);

79 
JSON_Sètus
 
js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

80 
JSON_Sètus
 
js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

81 * 
js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
);

84 
size_t
 
js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

85 
JSON_Sètus
 
js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

86 
JSON_Sètus
 
js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

87 * 
js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

89 
js⁄_‰ì_£rülized_°rög
(*
°rög
);

92 
js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
);

104 
JSON_Sètus
 
js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
);

109 
JSON_VÆue
 * 
js⁄_obje˘_gë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

110 c⁄° * 
js⁄_obje˘_gë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

111 
JSON_Obje˘
 * 
js⁄_obje˘_gë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

112 
JSON_Aºay
 * 
js⁄_obje˘_gë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

113 
js⁄_obje˘_gë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

114 
js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

120 
JSON_VÆue
 * 
js⁄_obje˘_dŸgë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

121 c⁄° * 
js⁄_obje˘_dŸgë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

122 
JSON_Obje˘
 * 
js⁄_obje˘_dŸgë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

123 
JSON_Aºay
 * 
js⁄_obje˘_dŸgë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

124 
js⁄_obje˘_dŸgë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

125 
js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

128 
size_t
 
js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
);

129 c⁄° * 
js⁄_obje˘_gë_«me
 (c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
);

133 
JSON_Sètus
 
js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

134 
JSON_Sètus
 
js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

135 
JSON_Sètus
 
js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

136 
JSON_Sètus
 
js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

137 
JSON_Sètus
 
js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

141 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

142 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

143 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

144 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

145 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

148 
JSON_Sètus
 
js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

151 
JSON_Sètus
 
js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
key
);

154 
JSON_Sètus
 
js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
);

159 
JSON_VÆue
 * 
js⁄_¨øy_gë_vÆue
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

160 c⁄° * 
js⁄_¨øy_gë_°rög
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

161 
JSON_Obje˘
 * 
js⁄_¨øy_gë_obje˘
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

162 
JSON_Aºay
 * 
js⁄_¨øy_gë_¨øy
 (c⁄° JSON_Aºay *
¨øy
, 
size_t
 
ödex
);

163 
js⁄_¨øy_gë_numbî
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

164 
js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

165 
size_t
 
js⁄_¨øy_gë_cou¡
 (c⁄° 
JSON_Aºay
 *
¨øy
);

169 
JSON_Sètus
 
js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

174 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
JSON_VÆue
 *
vÆue
);

175 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
);

176 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
);

177 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
);

178 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

181 
JSON_Sètus
 
js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
);

185 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

186 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
);

187 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
);

188 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
);

189 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
);

194 
JSON_VÆue
 * 
js⁄_vÆue_öô_obje˘
 ();

195 
JSON_VÆue
 * 
js⁄_vÆue_öô_¨øy
 ();

196 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög
 (c⁄° *
°rög
);

197 
JSON_VÆue
 * 
js⁄_vÆue_öô_numbî
 (
numbî
);

198 
JSON_VÆue
 * 
js⁄_vÆue_öô_boﬁón
(
boﬁón
);

199 
JSON_VÆue
 * 
js⁄_vÆue_öô_nuŒ
 ();

200 
JSON_VÆue
 * 
js⁄_vÆue_dìp_c›y
 (c⁄° JSON_VÆuê*
vÆue
);

201 
js⁄_vÆue_‰ì
 (
JSON_VÆue
 *
vÆue
);

203 
JSON_VÆue_Ty≥
 
js⁄_vÆue_gë_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

204 
JSON_Obje˘
 * 
js⁄_vÆue_gë_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

205 
JSON_Aºay
 * 
js⁄_vÆue_gë_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

206 c⁄° * 
js⁄_vÆue_gë_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

207 
js⁄_vÆue_gë_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

208 
js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

211 
JSON_VÆue_Ty≥
 
js⁄_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

212 
JSON_Obje˘
 * 
js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

213 
JSON_Aºay
 * 
js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

214 c⁄° * 
js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

215 
js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

216 
js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

218 #ifde‡
__˝lu•lus


	@lora_pkt_fwd/inc/radio.h

12 #i‚de‡
_RADIO_H


13 
	#_RADIO_H


	)

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<°döt.h
>

18 
	~<°dlib.h
>

19 
	~<°d¨g.h
>

20 
	~<°dboﬁ.h
>

21 
	~<f˙é.h
>

22 
	~<uni°d.h
>

23 
	~<î∫o.h
>

24 
	~<time.h
>

26 
	~<löux/•i/•idev.h
>

27 
	~<sys/io˘l.h
>

29 
	~"l‹agw_hÆ.h
"

35 
	#REG_FIFO
 0x00

	)

36 
	#REG_OPMODE
 0x01

	)

37 
	#REG_FIFO_ADDR_PTR
 0x0D

	)

38 
	#REG_FIFO_TX_BASE_AD
 0x0E

	)

39 
	#REG_FIFO_RX_BASE_AD
 0x0F

	)

40 
	#REG_RX_NB_BYTES
 0x13

	)

41 
	#REG_FIFO_RX_CURRENT_ADDR
 0x10

	)

42 
	#REG_IRQ_FLAGS
 0x12

	)

43 
	#REG_DIO_MAPPING_1
 0x40

	)

44 
	#REG_DIO_MAPPING_2
 0x41

	)

45 
	#REG_MODEM_CONFIG
 0x1D

	)

46 
	#REG_MODEM_CONFIG2
 0x1E

	)

47 
	#REG_MODEM_CONFIG3
 0x26

	)

48 
	#REG_SYMB_TIMEOUT_LSB
 0x1F

	)

49 
	#REG_PKT_SNR_VALUE
 0x19

	)

50 
	#REG_PAYLOAD_LENGTH
 0x22

	)

51 
	#REG_IRQ_FLAGS_MASK
 0x11

	)

52 
	#REG_MAX_PAYLOAD_LENGTH
 0x23

	)

53 
	#REG_HOP_PERIOD
 0x24

	)

54 
	#REG_SYNC_WORD
 0x39

	)

55 
	#REG_VERSION
 0x42

	)

56 
	#REG_PADAC
 0x5A

57 
	#REG_PKTRSSI
 0x1A

	)

58 
	#REG_RSSI
 0x1B

	)

60 
	#REG_DETECTION_OPTIMIZE
 0x31

	)

61 
	#REG_DETECTION_THRESHOLD
 0x37

	)

63 
	#REG_PREAMBLE_MSB
 0x20

	)

64 
	#REG_PREAMBLE_LSB
 0x21

	)

66 
	#PAYLOAD_LENGTH
 0x40

	)

69 
	#LORA_MAC_PREAMBLE
 0x34

	)

73 
	#REG_LNA
 0x0C

	)

74 
	#LNA_MAX_GAIN
 0x23

	)

75 
	#LNA_OFF_GAIN
 0x00

	)

76 
	#LNA_LOW_GAIN
 0x20

	)

80 
	#OPMODE_LORA
 0x80

	)

81 
	#OPMODE_MASK
 0x07

	)

82 
	#OPMODE_SLEEP
 0x00

	)

83 
	#OPMODE_STANDBY
 0x01

	)

84 
	#OPMODE_FSTX
 0x02

	)

85 
	#OPMODE_TX
 0x03

	)

86 
	#OPMODE_FSRX
 0x04

	)

87 
	#OPMODE_RX
 0x05

	)

88 
	#OPMODE_RX_SINGLE
 0x06

	)

89 
	#OPMODE_CAD
 0x07

	)

93 
	#IRQ_LORA_RXTOUT_MASK
 0x80

	)

94 
	#IRQ_LORA_RXDONE_MASK
 0x40

	)

95 
	#IRQ_LORA_CRCERR_MASK
 0x20

	)

96 
	#IRQ_LORA_HEADER_MASK
 0x10

	)

97 
	#IRQ_LORA_TXDONE_MASK
 0x08

	)

98 
	#IRQ_LORA_CDDONE_MASK
 0x04

	)

99 
	#IRQ_LORA_FHSSCH_MASK
 0x02

	)

100 
	#IRQ_LORA_CDDETD_MASK
 0x01

	)

104 
	#MAP_DIO0_LORA_RXDONE
 0x00

105 
	#MAP_DIO0_LORA_TXDONE
 0x40

106 
	#MAP_DIO1_LORA_RXTOUT
 0x00

107 
	#MAP_DIO1_LORA_NOP
 0x30

108 
	#MAP_DIO2_LORA_NOP
 0xC0

109 

	)

111 
	#SX1276_MC2_RX_PAYLOAD_CRCON
 0x04

	)

114 
	#SX1276_MC3_LOW_DATA_RATE_OPTIMIZE
 0x08

	)

115 
	#SX1276_MC3_AGCAUTO
 0x04

	)

118 
	#REG_FRF_MSB
 0x06

	)

119 
	#REG_FRF_MID
 0x07

	)

120 
	#REG_FRF_LSB
 0x08

	)

122 
	#REG_PACONFIG
 0x09

123 
	#REG_PARAMP
 0x0A

124 

	)

125 
	#REG_INVERTIQ
 0x33

	)

128 
	#RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1
 0x0A

	)

129 
	#RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2
 0x70

	)

131 
	#MAXLINE
 256

	)

136 
	#BW_UNDEFINED
 0

	)

137 
	#BW_500KHZ
 0x01

	)

138 
	#BW_250KHZ
 0x02

	)

139 
	#BW_125KHZ
 0x03

	)

140 
	#BW_62K5HZ
 0x04

	)

141 
	#BW_31K2HZ
 0x05

	)

142 
	#BW_15K6HZ
 0x06

	)

143 
	#BW_7K8HZ
 0x07

	)

147 
	#DR_UNDEFINED
 0

	)

148 
	#DR_LORA_SF7
 0x02

	)

149 
	#DR_LORA_SF8
 0x04

	)

150 
	#DR_LORA_SF9
 0x08

	)

151 
	#DR_LORA_SF10
 0x10

	)

152 
	#DR_LORA_SF11
 0x20

	)

153 
	#DR_LORA_SF12
 0x40

	)

154 
	#DR_LORA_MULTI
 0x7E

	)

160 íum { 
	mRXMODE_SINGLE
, 
	mRXMODE_SCAN
, 
	mRXMODE_RSSI
 };

167 
	esf_t
 { 
	mSF7
=7, 
	mSF8
, 
	mSF9
, 
	mSF10
, 
	mSF11
, 
	mSF12
 };

170 
uöt8_t
 
	mnss
;

171 
uöt8_t
 
	mr°
;

172 
uöt8_t
 
	mdio
[3];

173 
uöt8_t
 
	m•ù‹t
;

174 
uöt32_t
 
	m‰eq
;

175 
uöt32_t
 
	mbw
;

176 
uöt8_t
 
	msf
;

177 
uöt8_t
 
	m¸
;

178 
uöt8_t
 
	mno¸c
;

179 
uöt8_t
 
	m¥Àn
;

180 
uöt8_t
 
	mövîtio
;

181 
	mdesc
[8];

182 }
	tødiodev
;

184 
ødiodev
 *
sxødio
;

190 
	smqâ_c⁄fig
 {

191 
	mid
[64];

192 
	mkì∑live
;

193 
	mho°
[64];

194 
	mp‹t
[32];

195 
	mqos
;

196 
boﬁ
 
	mªèö
;

197 
	mmesßge
[256];

198 
	mmsgÀn
;

199 
	mt›ic
[128];

200 
	mu£∫ame
[32];

201 
	m∑ssw‹d
[32];

202 
	mˇfûe
[32];

203 
	mˇ∑th
[32];

204 
	m˚πfûe
[32];

205 
	mkeyfûe
[32];

206 
	mcùhîs
[32];

207 
boﬁ
 
	mö£cuª
;

208 
	mpsk
[32];

209 
	mpsk_idítôy
[32];

210 
boﬁ
 
	m˛ón_£ssi⁄
;

217 
	#LOW
 0

	)

218 
	#HIGH
 1

	)

220 
	#GPIO_OUT
 0

	)

221 
	#GPIO_IN
 1

	)

223 
	#READ_ACCESS
 0x00

	)

224 
	#WRITE_ACCESS
 0x80

	)

225 
	#SPI_SPEED
 8000000

	)

226 
	#SPI_DEV_RADIO
 "/dev/•idev2.0"

	)

235 
digôÆRód
();

237 
didôÆWrôe
(, );

241 
•i_›í
(*);

247 
£t‰eq
(
uöt8_t
, );

249 
£tsf
(
uöt8_t
, );

251 
£tsbw
(
uöt8_t
, );

253 
£t¸
(
uöt8_t
, );

255 
£çæí
(
uöt8_t
, );

257 
£tsyncw‹d
(
uöt8_t
, );

259 
¸ccheck
(
uöt8_t
, uint8_t);

261 
boﬁ
 
gë_ødio_vîsi⁄
(
ødiodev
 *);

265 
£tup_ch™√l
(
ødiodev
 *);

269 
rxl‹a
(, 
uöt8_t
);

273 
txl‹a
(
ødiodev
 *, 
lgw_pkt_tx_s
 *);

277 
sögÀ_tx
(
ødiodev
 *, 
uöt8_t
 *, );

	@lora_pkt_fwd/inc/timersync.h

17 #i‚de‡
_LORA_PKTFWD_TIMERSYNC_H


18 
	#_LORA_PKTFWD_TIMERSYNC_H


	)

23 
	~<sys/time.h
>

28 
gë_c⁄˚¡øt‹_time
(
timevÆ
 *
c⁄˚¡_time
, timevÆ 
unix_time
);

30 
thªad_timîsync
();

	@lora_pkt_fwd/inc/trace.h

17 #i‚de‡
_LORA_PKTFWD_TRACE_H


18 
	#_LORA_PKTFWD_TRACE_H


	)

20 
	#DEBUG_PKT_FWD
 0

	)

21 
	#DEBUG_JIT
 0

	)

22 
	#DEBUG_JIT_ERROR
 1

	)

23 
	#DEBUG_TIMERSYNC
 0

	)

24 
	#DEBUG_BEACON
 0

	)

25 
	#DEBUG_LOG
 1

	)

26 
	#DEBUG_INFO
 0

	)

27 
	#DEBUG_WARNING
 1

	)

28 
	#DEBUG_ERROR
 1

	)

29 
	#DEBUG_GPS
 0

	)

31 
	#MSG
(
¨gs
...Ë
	`¥ötf
◊rgsË

	)

32 
	#MSG_DEBUG
(
FLAG
, 
fmt
, ...) \

34 i‡(
FLAG
) \

35 
	`Ârötf
(
°dout
, "%s:%d:%s(): " 
fmt
, 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, ##
__VA_ARGS__
); \

36 } 0)

	)

	@lora_pkt_fwd/src/base64.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°döt.h
>

24 
	~"ba£64.h
"

29 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

30 
	#CRIT
(
a
Ë
	`Ârötf
(
°dîr
, "\nCRITICAL fûe:%†löe:%u msg:%s\n", 
__FILE__
, 
__LINE__
,a);
	`exô
(
EXIT_FAILURE
)

	)

33 
	#DEBUG
(
¨gs
...)

	)

41 
	gcode_62
 = '+';

42 
	gcode_63
 = '/';

43 
	gcode_∑d
 = '=';

51 
code_to_ch¨
(
uöt8_t
 
x
);

56 
uöt8_t
 
ch¨_to_code
(
x
);

61 
	$code_to_ch¨
(
uöt8_t
 
x
) {

62 i‡(
x
 <= 25) {

63  'A' + 
x
;

64 } i‡((
x
 >= 26) && (x <= 51)) {

65  'a' + (
x
-26);

66 } i‡((
x
 >= 52) && (x <= 61)) {

67  '0' + (
x
-52);

68 } i‡(
x
 == 62) {

69  
code_62
;

70 } i‡(
x
 == 63) {

71  
code_63
;

73 
	`DEBUG
("ERROR: %òIS OUT OF RANGE 0-63 FOR BASE64 ENCODING\n", 
x
);

74 
	`exô
(
EXIT_FAILURE
);

76 
	}
}

78 
uöt8_t
 
	$ch¨_to_code
(
x
) {

79 i‡((
x
 >= 'A') && (x <= 'Z')) {

80  (
uöt8_t
)
x
 - (uint8_t)'A';

81 } i‡((
x
 >= 'a') && (x <= 'z')) {

82  (
uöt8_t
)
x
 - (uint8_t)'a' + 26;

83 } i‡((
x
 >= '0') && (x <= '9')) {

84  (
uöt8_t
)
x
 - (uint8_t)'0' + 52;

85 } i‡(
x
 =
code_62
) {

87 } i‡(
x
 =
code_63
) {

90 
	`DEBUG
("ERROR: %¯(0x%xËIS INVALID CHARACTER FOR BASE64 DECODING\n", 
x
, x);

91 
	`exô
(
EXIT_FAILURE
);

93 
	}
}

98 
	$bö_to_b64_n›ad
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
) {

99 
i
;

100 
ªsu…_Àn
;

101 
fuŒ_blocks
;

102 
œ°_byãs
;

103 
œ°_ch¨s
;

104 
uöt32_t
 
b
;

107 i‡((
out
 =
NULL
Ë|| (
ö
 == NULL)) {

108 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT IN BIN_TO_B64\n");

111 i‡(
size
 == 0) {

112 *
out
 = 0;

117 
fuŒ_blocks
 = 
size
 / 3;

118 
œ°_byãs
 = 
size
 % 3;

119 
œ°_byãs
) {

121 
œ°_ch¨s
 = 0;

124 
œ°_ch¨s
 = 2;

127 
œ°_ch¨s
 = 3;

130 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

134 
ªsu…_Àn
 = (4*
fuŒ_blocks
Ë+ 
œ°_ch¨s
;

135 i‡(
max_Àn
 < (
ªsu…_Àn
 + 1)) {

136 
	`DEBUG
("ERROR: OUTPUT BUFFER TOO SMALL IN BIN_TO_B64\n");

141 
i
=0; i < 
fuŒ_blocks
; ++i) {

142 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

143 
b
 |(0xFF & 
ö
[3*
i
 + 1]) << 8;

144 
b
 |0xFF & 
ö
[3*
i
 + 2];

145 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

146 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

147 
out
[4*
i
 + 2] = 
	`code_to_ch¨
((
b
 >> 6 ) & 0x3F);

148 
out
[4*
i
 + 3] = 
	`code_to_ch¨
–
b
 & 0x3F);

152 
i
 = 
fuŒ_blocks
;

153 i‡(
œ°_ch¨s
 == 0) {

154 
out
[4*
i
] = 0;

155 } i‡(
œ°_ch¨s
 == 2) {

156 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

157 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

158 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

159 
out
[4*
i
 + 2] = 0;

160 } i‡(
œ°_ch¨s
 == 3) {

161 
b
 = (0xFF & 
ö
[3*
i
] ) << 16;

162 
b
 |(0xFF & 
ö
[3*
i
 + 1]) << 8;

163 
out
[4*
i
 + 0] = 
	`code_to_ch¨
((
b
 >> 18) & 0x3F);

164 
out
[4*
i
 + 1] = 
	`code_to_ch¨
((
b
 >> 12) & 0x3F);

165 
out
[4*
i
 + 2] = 
	`code_to_ch¨
((
b
 >> 6 ) & 0x3F);

166 
out
[4*
i
 + 3] = 0;

169  
ªsu…_Àn
;

170 
	}
}

172 
	$b64_to_bö_n›ad
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
) {

173 
i
;

174 
ªsu…_Àn
;

175 
fuŒ_blocks
;

176 
œ°_ch¨s
;

177 
œ°_byãs
;

178 
uöt32_t
 
b
;

182 i‡((
out
 =
NULL
Ë|| (
ö
 == NULL)) {

183 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT OR INPUT IN B64_TO_BIN\n");

186 i‡(
size
 == 0) {

191 
fuŒ_blocks
 = 
size
 / 4;

192 
œ°_ch¨s
 = 
size
 % 4;

193 
œ°_ch¨s
) {

195 
œ°_byãs
 = 0;

198 
	`DEBUG
("ERROR: ONLY ONE CHAR LEFT IN B64_TO_BIN\n");

201 
œ°_byãs
 = 1;

204 
œ°_byãs
 = 2;

207 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

211 
ªsu…_Àn
 = (3*
fuŒ_blocks
Ë+ 
œ°_byãs
;

212 i‡(
max_Àn
 < 
ªsu…_Àn
) {

213 
	`DEBUG
("ERROR: OUTPUT BUFFER TOO SMALL IN B64_TO_BIN\n");

218 
i
=0; i < 
fuŒ_blocks
; ++i) {

219 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

220 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

221 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 2])) << 6;

222 
b
 |0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 3]);

223 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

224 
out
[3*
i
 + 1] = (
b
 >> 8 ) & 0xFF;

225 
out
[3*
i
 + 2] = 
b
 & 0xFF;

229 
i
 = 
fuŒ_blocks
;

230 i‡(
œ°_byãs
 == 1) {

231 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

232 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

233 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

234 i‡(((
b
 >> 12) & 0x0F) != 0) {

235 
	`DEBUG
("WARNING:Üast character contains unusable bits\n");

237 } i‡(
œ°_byãs
 == 2) {

238 
b
 = (0x3F & 
	`ch¨_to_code
(
ö
[4*
i
] )) << 18;

239 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 1])) << 12;

240 
b
 |(0x3F & 
	`ch¨_to_code
(
ö
[4*
i
 + 2])) << 6;

241 
out
[3*
i
 + 0] = (
b
 >> 16) & 0xFF;

242 
out
[3*
i
 + 1] = (
b
 >> 8 ) & 0xFF;

243 i‡(((
b
 >> 6) & 0x03) != 0) {

244 
	`DEBUG
("WARNING:Üast character contains unusable bits\n");

248  
ªsu…_Àn
;

249 
	}
}

251 
	$bö_to_b64
(c⁄° 
uöt8_t
 * 
ö
, 
size
, * 
out
, 
max_Àn
) {

252 
ªt
;

254 
ªt
 = 
	`bö_to_b64_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

256 i‡(
ªt
 == -1) {

259 
ªt
%4) {

261  
ªt
;

263 
	`DEBUG
("ERROR: INVALID UNPADDED BASE64 STRING\n");

266 i‡(
max_Àn
 >(
ªt
 + 2 + 1)) {

267 
out
[
ªt
] = 
code_∑d
;

268 
out
[
ªt
+1] = 
code_∑d
;

269 
out
[
ªt
+2] = 0;

270  
ªt
+2;

272 
	`DEBUG
("ERROR:ÇotÉnoughÑoomÅoáddÖadding in bin_to_b64\n");

276 i‡(
max_Àn
 >(
ªt
 + 1 + 1)) {

277 
out
[
ªt
] = 
code_∑d
;

278 
out
[
ªt
+1] = 0;

279  
ªt
+1;

281 
	`DEBUG
("ERROR:ÇotÉnoughÑoomÅoáddÖadding in bin_to_b64\n");

285 
	`CRIT
("switch defaultÅhat shouldÇot beÖossible");

287 
	}
}

289 
	$b64_to_bö
(c⁄° * 
ö
, 
size
, 
uöt8_t
 * 
out
, 
max_Àn
) {

290 i‡(
ö
 =
NULL
) {

291 
	`DEBUG
("ERROR: NULL POINTER AS OUTPUT OR INPUT IN B64_TO_BIN\n");

294 i‡((
size
%4 == 0) && (size >= 4)) {

295 i‡(
ö
[
size
-2] =
code_∑d
) {

296  
	`b64_to_bö_n›ad
(
ö
, 
size
-2, 
out
, 
max_Àn
);

297 } i‡(
ö
[
size
-1] =
code_∑d
) {

298  
	`b64_to_bö_n›ad
(
ö
, 
size
-1, 
out
, 
max_Àn
);

300  
	`b64_to_bö_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

303  
	`b64_to_bö_n›ad
(
ö
, 
size
, 
out
, 
max_Àn
);

305 
	}
}

	@lora_pkt_fwd/src/jitqueue.c

19 
	#_GNU_SOURCE


	)

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<±hªad.h
>

24 
	~<as£π.h
>

25 
	~<m©h.h
>

27 
	~"åa˚.h
"

28 
	~"jôqueue.h
"

35 
	#TX_START_DELAY
 1500

	)

37 
	#TX_MARGIN_DELAY
 1000

	)

39 
	#TX_JIT_DELAY
 30000

	)

40 
	#TX_MAX_ADVANCE_DELAY
 ((
JIT_NUM_BEACON_IN_QUEUE
 + 1Ë* 128 * 1E6Ë

	)

42 
	#BEACON_GUARD
 3000000

	)

44 
	#BEACON_RESERVED
 2120000

	)

48 
±hªad_muãx_t
 
	gmx_jô_queue
 = 
PTHREAD_MUTEX_INITIALIZER
;

52 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

53 
	$qs‹t_r
(*
ba£
,

54 
size_t
 
√l
,

55 
size_t
 
width
,

56 
__com∑r_d_‚_t
 
comp
,

57 *
¨g
)

59 
size_t
 
wg≠
, 
i
, 
j
, 
k
;

60 
tmp
;

62 i‡((
√l
 > 1Ë&& (
width
 > 0)) {

63 
	`as£π
(
√l
 <((
size_t
)(-1)Ë/ 
width
);

64 
wg≠
 = 0;

66 
wg≠
 = 3 * wgap + 1;

67 } 
wg≠
 < (
√l
-1)/3);

70 
wg≠
 *
width
;

71 
√l
 *
width
;

73 
i
 = 
wg≠
;

75 
j
 = 
i
;

77 *
a
;

78 *
b
;

80 
j
 -
wg≠
;

81 
a
 = 
j
 + ((*)
ba£
);

82 
b
 = 
a
 + 
wg≠
;

83 i‡((*
comp
)(
a
, 
b
, 
¨g
) <= 0) {

86 
k
 = 
width
;

88 
tmp
 = *
a
;

89 *
a
++ = *
b
;

90 *
b
++ = 
tmp
;

91 } --
k
);

92 } 
j
 >
wg≠
);

93 
i
 +
width
;

94 } 
i
 < 
√l
);

95 
wg≠
 = (wg≠ - 
width
)/3;

96 } 
wg≠
);

98 
	}
}

103 
boﬁ
 
	$jô_queue_is_fuŒ
(
jô_queue_s
 *
queue
) {

104 
boﬁ
 
ªsu…
;

106 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

108 
ªsu…
 = (
queue
->
num_pkt
 =
JIT_QUEUE_MAX
)?
åue
:
Ál£
;

110 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

112  
ªsu…
;

113 
	}
}

115 
boﬁ
 
	$jô_queue_is_em±y
(
jô_queue_s
 *
queue
) {

116 
boﬁ
 
ªsu…
;

118 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

120 
ªsu…
 = (
queue
->
num_pkt
 =0)?
åue
:
Ál£
;

122 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

124  
ªsu…
;

125 
	}
}

127 
	$jô_queue_öô
(
jô_queue_s
 *
queue
) {

128 
i
;

130 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

132 
	`mem£t
(
queue
, 0, (*queue));

133 
i
=0; i<
JIT_QUEUE_MAX
; i++) {

134 
queue
->
nodes
[
i
].
¥e_dñay
 = 0;

135 
queue
->
nodes
[
i
].
po°_dñay
 = 0;

138 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

139 
	}
}

141 
	$com∑ª
(c⁄° *
a
, c⁄° *
b
, *
¨g
)

143 
jô_node_s
 *
p
 = (jô_node_†*)
a
;

144 
jô_node_s
 *
q
 = (jô_node_†*)
b
;

145 *
cou¡î
 = (*)
¨g
;

146 
p_cou¡
, 
q_cou¡
;

148 
p_cou¡
 = 
p
->
pkt
.
cou¡_us
;

149 
q_cou¡
 = 
q
->
pkt
.
cou¡_us
;

151 i‡(
p_cou¡
 > 
q_cou¡
)

152 *
cou¡î
 = *counter + 1;

154  
p_cou¡
 - 
q_cou¡
;

155 
	}
}

157 
	$jô_s‹t_queue
(
jô_queue_s
 *
queue
) {

158 
cou¡î
 = 0;

160 i‡(
queue
->
num_pkt
 == 0) {

164 
	`MSG_DEBUG
(
DEBUG_JIT
, "s‹tög queuêöás˚ndög ordîÖackëÅime°am∞- queuêsize:%u\n", 
queue
->
num_pkt
);

165 
	`qs‹t_r
(
queue
->
nodes
, queue->
num_pkt
, (queue->nodes[0]), 
com∑ª
, &
cou¡î
);

166 
	`MSG_DEBUG
(
DEBUG_JIT
, "s‹tög queuêd⁄ê- sw≠≥d:%d\n", 
cou¡î
);

167 
	}
}

169 
boﬁ
 
	$jô_cﬁlisi⁄_ã°
(
uöt32_t
 
p1_cou¡_us
, uöt32_à
p1_¥e_dñay
, uöt32_à
p1_po°_dñay
, uöt32_à
p2_cou¡_us
, uöt32_à
p2_¥e_dñay
, uöt32_à
p2_po°_dñay
) {

170 i‡(((
p1_cou¡_us
 - 
p2_cou¡_us
Ë<(
p1_¥e_dñay
 + 
p2_po°_dñay
 + 
TX_MARGIN_DELAY
)) ||

171 ((
p2_cou¡_us
 - 
p1_cou¡_us
Ë<(
p2_¥e_dñay
 + 
p1_po°_dñay
 + 
TX_MARGIN_DELAY
))) {

172  
åue
;

174  
Ál£
;

176 
	}
}

178 
jô_îr‹_e
 
	$jô_íqueue
(
jô_queue_s
 *
queue
, 
timevÆ
 *
time
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 
pkt_ty≥
) {

179 
i
 = 0;

180 
uöt32_t
 
time_us
 = 
time
->
tv_£c
 * 1000000UL +Åime->
tv_u£c
;

181 
uöt32_t
 
∑ckë_po°_dñay
 = 0;

182 
uöt32_t
 
∑ckë_¥e_dñay
 = 0;

183 
uöt32_t
 
èrgë_¥e_dñay
 = 0;

184 
jô_îr‹_e
 
îr_cﬁlisi⁄
;

185 
uöt32_t
 
aßp_cou¡_us
;

187 
	`MSG_DEBUG
(
DEBUG_JIT
, "Cuºíàc⁄˚¡øt‹Åimêi†%u,Ökt_ty≥=%d\n", 
time_us
, 
pkt_ty≥
);

189 i‡(
∑ckë
 =
NULL
) {

190 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: invalidÖarameter\n");

191  
JIT_ERROR_INVALID
;

194 i‡(
	`jô_queue_is_fuŒ
(
queue
)) {

195 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: cannotÉnqueueÖacket, JIT queue is full\n");

196  
JIT_ERROR_FULL
;

200 
pkt_ty≥
) {

201 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
:

202 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
:

203 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
:

204 
∑ckë_¥e_dñay
 = 
TX_START_DELAY
 + 
TX_JIT_DELAY
;

205 
∑ckë_po°_dñay
 = 
	`lgw_time_⁄_aú
(
∑ckë
) * 1000UL;

207 
JIT_PKT_TYPE_BEACON
:

209 
∑ckë_¥e_dñay
 = 
TX_START_DELAY
 + 
BEACON_GUARD
 + 
TX_JIT_DELAY
;

210 
∑ckë_po°_dñay
 = 
BEACON_RESERVED
;

216 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

220 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_C
) {

222 
∑ckë
->
tx_mode
 = 
TIMESTAMPED
;

225 
aßp_cou¡_us
 = 
time_us
 + 1E6;

226 i‡(
queue
->
num_pkt
 == 0) {

228 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök, fú° i¿JiT queuê(cou¡_us=%u)\n", 
aßp_cou¡_us
);

237 
i
=0; i<
queue
->
num_pkt
; i++) {

238 i‡(
	`jô_cﬁlisi⁄_ã°
(
aßp_cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, queue->nodes[i].
¥e_dñay
, queue->nodes[i].
po°_dñay
Ë=
åue
) {

239 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: c™nŸ in£π IMMEDIATE dow∆ökáàcou¡_us=%u, cﬁlide†wôh %u (ödex=%d)\n", 
aßp_cou¡_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, i);

243 i‡(
i
 =
queue
->
num_pkt
) {

245 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök ASAPáà%u (nÿcﬁlisi⁄)\n", 
aßp_cou¡_us
);

248 
i
=0; i<
queue
->
num_pkt
; i++) {

249 
aßp_cou¡_us
 = 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 + queue->nodes[i].
po°_dñay
 + 
∑ckë_¥e_dñay
 + 
TX_JIT_DELAY
 + 
TX_MARGIN_DELAY
;

250 i‡(
i
 =(
queue
->
num_pkt
 - 1)) {

252 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök,Üa° i¿JiT queuê(cou¡_us=%u)\n", 
aßp_cou¡_us
);

255 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG:ÅryÅÿö£π IMMEDIATE dow∆ök (cou¡_us=%uËbëwì¿ödex %dánd index %d?\n", 
aßp_cou¡_us
, 
i
, i+1);

256 i‡(
	`jô_cﬁlisi⁄_ã°
(
aßp_cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
+1].
pkt
.
cou¡_us
, queue->nodes[i+1].
¥e_dñay
, queue->nodes[i+1].
po°_dñay
Ë=
åue
) {

257 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: faûedÅÿö£π IMMEDIATE dow∆ök (cou¡_us=%u), c⁄töue...\n", 
aßp_cou¡_us
);

260 
	`MSG_DEBUG
(
DEBUG_JIT
, "DEBUG: in£π IMMEDIATE dow∆ök (cou¡_us=%u)\n", 
aßp_cou¡_us
);

268 
∑ckë
->
cou¡_us
 = 
aßp_cou¡_us
;

279 i‡((
∑ckë
->
cou¡_us
 - 
time_us
Ë<(
TX_START_DELAY
 + 
TX_MARGIN_DELAY
 + 
TX_JIT_DELAY
)) {

280 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë REJECTED,áÃódyÅoÿœãÅÿ£nd ià(cuºít=%u,Öackë=%u,Åy≥=%d)\n", 
time_us
, 
∑ckë
->
cou¡_us
, 
pkt_ty≥
);

281 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

282  
JIT_ERROR_TOO_LATE
;

296 i‡((
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_A
Ë|| (pkt_ty≥ =
JIT_PKT_TYPE_DOWNLINK_CLASS_B
)) {

297 i‡((
∑ckë
->
cou¡_us
 - 
time_us
Ë> 
TX_MAX_ADVANCE_DELAY
) {

298 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë REJECTED,Åime°am∞£em†wr⁄g,Åoÿmuch i¿adv™˚ (cuºít=%u,Öackë=%u,Åy≥=%d)\n", 
time_us
, 
∑ckë
->
cou¡_us
, 
pkt_ty≥
);

299 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

300  
JIT_ERROR_TOO_EARLY
;

309 
i
=0; i<
queue
->
num_pkt
; i++) {

311 i‡(((
pkt_ty≥
 =
JIT_PKT_TYPE_DOWNLINK_CLASS_A
Ë|| (pkt_ty≥ =
JIT_PKT_TYPE_DOWNLINK_CLASS_C
)Ë&& (
queue
->
nodes
[
i
].pkt_ty≥ =
JIT_PKT_TYPE_BEACON
)) {

312 
èrgë_¥e_dñay
 = 
TX_START_DELAY
;

314 
èrgë_¥e_dñay
 = 
queue
->
nodes
[
i
].
¥e_dñay
;

322 i‡(
	`jô_cﬁlisi⁄_ã°
(
∑ckë
->
cou¡_us
, 
∑ckë_¥e_dñay
, 
∑ckë_po°_dñay
, 
queue
->
nodes
[
i
].
pkt
.cou¡_us, 
èrgë_¥e_dñay
, queue->nodes[i].
po°_dñay
Ë=
åue
) {

323 
queue
->
nodes
[
i
].
pkt_ty≥
) {

324 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
:

325 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
:

326 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
:

327 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë (ty≥=%dËREJECTED, cﬁlisi⁄ wôhÖackëáÃódyÖrogømmedáà%u (%u)\n", 
pkt_ty≥
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, 
∑ckë
->count_us);

328 
îr_cﬁlisi⁄
 = 
JIT_ERROR_COLLISION_PACKET
;

330 
JIT_PKT_TYPE_BEACON
:

331 i‡(
pkt_ty≥
 !
JIT_PKT_TYPE_BEACON
) {

333 
	`MSG_DEBUG
(
DEBUG_JIT_ERROR
, "ERROR: Packë (ty≥=%dËREJECTED, cﬁlisi⁄ wôh bóc⁄áÃódyÖrogømmedáà%u (%u)\n", 
pkt_ty≥
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
, 
∑ckë
->count_us);

335 
îr_cﬁlisi⁄
 = 
JIT_ERROR_COLLISION_BEACON
;

338 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: UnknownÖacketÅype, shouldÇot occur, BUG?\n");

339 
	`as£π
(0);

342 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

343  
îr_cﬁlisi⁄
;

349 
	`mem˝y
(&(
queue
->
nodes
[queue->
num_pkt
].
pkt
), 
∑ckë
, (
lgw_pkt_tx_s
));

350 
queue
->
nodes
[queue->
num_pkt
].
¥e_dñay
 = 
∑ckë_¥e_dñay
;

351 
queue
->
nodes
[queue->
num_pkt
].
po°_dñay
 = 
∑ckë_po°_dñay
;

352 
queue
->
nodes
[queue->
num_pkt
].
pkt_ty≥
 =Ökt_type;

353 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

354 
queue
->
num_bóc⁄
++;

356 
queue
->
num_pkt
++;

358 
	`jô_s‹t_queue
(
queue
);

361 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

363 
	`jô_¥öt_queue
(
queue
, 
Ál£
, 
DEBUG_JIT
);

365 
	`MSG_DEBUG
(
DEBUG_JIT
, "íqueuedÖackë wôh cou¡_us=%u (size=%u byãs,Åﬂ=%u us,Åy≥=%u)\n", 
∑ckë
->
cou¡_us
,Öackë->
size
, 
∑ckë_po°_dñay
, 
pkt_ty≥
);

367  
JIT_ERROR_OK
;

368 
	}
}

370 
jô_îr‹_e
 
	$jô_dequeue
(
jô_queue_s
 *
queue
, 
ödex
, 
lgw_pkt_tx_s
 *
∑ckë
, 
jô_pkt_ty≥_e
 *
pkt_ty≥
) {

371 i‡(
∑ckë
 =
NULL
) {

372 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invalidÖarameter\n");

373  
JIT_ERROR_INVALID
;

376 i‡((
ödex
 < 0Ë|| (ödex >
JIT_QUEUE_MAX
)) {

377 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invalidÖarameter\n");

378  
JIT_ERROR_INVALID
;

381 i‡(
	`jô_queue_is_em±y
(
queue
)) {

382 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: cannot dequeueÖacket, JIT queue isÉmpty\n");

383  
JIT_ERROR_EMPTY
;

386 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

389 
	`mem˝y
(
∑ckë
, &(
queue
->
nodes
[
ödex
].
pkt
), (
lgw_pkt_tx_s
));

390 
queue
->
num_pkt
--;

391 *
pkt_ty≥
 = 
queue
->
nodes
[
ödex
].pkt_type;

392 i‡(*
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

393 
queue
->
num_bóc⁄
--;

394 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--- Beacon dequeued ---\n");

398 
	`mem˝y
(&(
queue
->
nodes
[
ödex
]), &(queue->nodes[queue->
num_pkt
]), (
jô_node_s
));

399 
	`mem£t
(&(
queue
->
nodes
[queue->
num_pkt
]), 0, (
jô_node_s
));

402 
	`jô_s‹t_queue
(
queue
);

405 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

407 
	`jô_¥öt_queue
(
queue
, 
Ál£
, 
DEBUG_JIT
);

409 
	`MSG_DEBUG
(
DEBUG_JIT
, "dequeuedÖackë wôh cou¡_us=%u from index %d\n", 
∑ckë
->
cou¡_us
, 
ödex
);

411  
JIT_ERROR_OK
;

412 
	}
}

414 
jô_îr‹_e
 
	$jô_≥ek
(
jô_queue_s
 *
queue
, 
timevÆ
 *
time
, *
pkt_idx
) {

416 
i
 = 0;

417 
idx_highe°_¥i‹ôy
 = -1;

418 
uöt32_t
 
time_us
;

420 i‡((
time
 =
NULL
Ë|| (
pkt_idx
 == NULL)) {

421 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invalidÖarameter\n");

422  
JIT_ERROR_INVALID
;

425 i‡(
	`jô_queue_is_em±y
(
queue
)) {

426  
JIT_ERROR_EMPTY
;

429 
time_us
 = 
time
->
tv_£c
 * 1000000UL +Åime->
tv_u£c
;

431 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

434 
i
=0; i<
queue
->
num_pkt
; i++) {

442 i‡((
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 - 
time_us
Ë>
TX_MAX_ADVANCE_DELAY
) {

444 
queue
->
num_pkt
--;

445 i‡(
queue
->
nodes
[
i
].
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

446 
queue
->
num_bóc⁄
--;

447 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: --- Bóc⁄ dr›≥d (cuºít_time=%u,Öackë_time=%uË---\n", 
time_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
);

449 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: --- Packë dr›≥d (cuºít_time=%u,Öackë_time=%uË---\n", 
time_us
, 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
);

453 
	`mem˝y
(&(
queue
->
nodes
[
i
]), &(queue->nodes[queue->
num_pkt
]), (
jô_node_s
));

454 
	`mem£t
(&(
queue
->
nodes
[queue->
num_pkt
]), 0, (
jô_node_s
));

457 
	`jô_s‹t_queue
(
queue
);

460 
i
 = 0;

468 i‡((
idx_highe°_¥i‹ôy
 =-1Ë|| (((
queue
->
nodes
[
i
].
pkt
.
cou¡_us
 - 
time_us
) < (queue->nodes[idx_highest_priority].pkt.count_us -Åime_us)))) {

469 
idx_highe°_¥i‹ôy
 = 
i
;

477 i‡((
queue
->
nodes
[
idx_highe°_¥i‹ôy
].
pkt
.
cou¡_us
 - 
time_us
Ë< 
TX_JIT_DELAY
) {

478 *
pkt_idx
 = 
idx_highe°_¥i‹ôy
;

479 
	`MSG_DEBUG
(
DEBUG_JIT
, "peekÖacket with count_us=%uát index %d\n",

480 
queue
->
nodes
[
idx_highe°_¥i‹ôy
].
pkt
.
cou¡_us
, idx_highest_priority);

482 *
pkt_idx
 = -1;

485 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

487  
JIT_ERROR_OK
;

488 
	}
}

490 
	$jô_¥öt_queue
(
jô_queue_s
 *
queue
, 
boﬁ
 
show_Æl
, 
debug_Àvñ
) {

491 
i
 = 0;

492 
lo›_íd
;

494 i‡(
	`jô_queue_is_em±y
(
queue
)) {

495 
	`MSG_DEBUG
(
debug_Àvñ
, "INFO: [jit] queue isÉmpty\n");

497 
	`±hªad_muãx_lock
(&
mx_jô_queue
);

499 
	`MSG_DEBUG
(
debug_Àvñ
, "INFO: [jô] queuêc⁄èö†%dÖackës:\n", 
queue
->
num_pkt
);

500 
	`MSG_DEBUG
(
debug_Àvñ
, "INFO: [jô] queuêc⁄èö†%d bóc⁄s:\n", 
queue
->
num_bóc⁄
);

501 
lo›_íd
 = (
show_Æl
 =
åue
Ë? 
JIT_QUEUE_MAX
 : 
queue
->
num_pkt
;

502 
i
=0; i<
lo›_íd
; i++) {

503 
	`MSG_DEBUG
(
debug_Àvñ
, " -Çode[%d]: count_us=%u -Åype=%d\n",

504 
i
,

505 
queue
->
nodes
[
i
].
pkt
.
cou¡_us
,

506 
queue
->
nodes
[
i
].
pkt_ty≥
);

509 
	`±hªad_muãx_u∆ock
(&
mx_jô_queue
);

511 
	}
}

	@lora_pkt_fwd/src/lora_pkt_fwd.c

23 #i‡
__STDC_VERSION__
 >= 199901L

24 
	#_XOPEN_SOURCE
 600

	)

26 
	#_XOPEN_SOURCE
 500

	)

29 
	~<°döt.h
>

30 
	~<°dboﬁ.h
>

31 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<sig«l.h
>

35 
	~<time.h
>

36 
	~<sys/time.h
>

37 
	~<uni°d.h
>

38 
	~<°dlib.h
>

39 
	~<î∫o.h
>

40 
	~<m©h.h
>

41 
	~<as£π.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~<√tdb.h
>

48 
	~<±hªad.h
>

50 
	~"åa˚.h
"

51 
	~"jôqueue.h
"

52 
	~"timîsync.h
"

53 
	~"∑rs⁄.h
"

54 
	~"ba£64.h
"

55 
	~"ødio.h
"

56 
	~"l‹agw_hÆ.h
"

57 
	~"l‹agw_gps.h
"

58 
	~"l‹agw_aux.h
"

59 
	~"l‹agw_ªg.h
"

64 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

65 
	#STRINGIFY
(
x
Ë#x

	)

66 
	#STR
(
x
Ë
	`STRINGIFY
(x)

	)

71 #i‚de‡
VERSION_STRING


72 
	#VERSION_STRING
 "undeföed"

	)

75 
	#DEFAULT_SERVER
 127.0.0.1

	)

76 
	#DEFAULT_PORT_UP
 1780

	)

77 
	#DEFAULT_PORT_DW
 1782

	)

78 
	#DEFAULT_KEEPALIVE
 5

	)

79 
	#DEFAULT_STAT
 30

	)

80 
	#PUSH_TIMEOUT_MS
 100

	)

81 
	#PULL_TIMEOUT_MS
 200

	)

82 
	#GPS_REF_MAX_AGE
 30

	)

83 
	#FETCH_SLEEP_MS
 10

	)

84 
	#BEACON_POLL_MS
 50

	)

86 
	#PROTOCOL_VERSION
 2

	)

88 
	#XERR_INIT_AVG
 128

	)

89 
	#XERR_FILT_COEF
 256

	)

91 
	#PKT_PUSH_DATA
 0

	)

92 
	#PKT_PUSH_ACK
 1

	)

93 
	#PKT_PULL_DATA
 2

	)

94 
	#PKT_PULL_RESP
 3

	)

95 
	#PKT_PULL_ACK
 4

	)

96 
	#PKT_TX_ACK
 5

	)

98 
	#NB_PKT_MAX
 8

	)

100 
	#MIN_LORA_PREAMB
 6

	)

101 
	#STD_LORA_PREAMB
 8

	)

102 
	#MIN_FSK_PREAMB
 3

	)

103 
	#STD_FSK_PREAMB
 5

	)

105 
	#STATUS_SIZE
 200

	)

106 
	#TX_BUFF_SIZE
 ((540 * 
NB_PKT_MAX
Ë+ 30 + 
STATUS_SIZE
)

	)

108 
	#UNIX_GPS_EPOCH_OFFSET
 315964800

	)

111 
	#DEFAULT_BEACON_FREQ_HZ
 869525000

	)

112 
	#DEFAULT_BEACON_FREQ_NB
 1

	)

113 
	#DEFAULT_BEACON_FREQ_STEP
 0

	)

114 
	#DEFAULT_BEACON_DATARATE
 9

	)

115 
	#DEFAULT_BEACON_BW_HZ
 125000

	)

116 
	#DEFAULT_BEACON_POWER
 14

	)

117 
	#DEFAULT_BEACON_INFODESC
 0

	)

123 vﬁ©ûê
boﬁ
 
	gexô_sig
 = 
Ál£
;

124 vﬁ©ûê
boﬁ
 
	gquô_sig
 = 
Ál£
;

127 
boﬁ
 
	gfwd_vÆid_pkt
 = 
åue
;

128 
boﬁ
 
	gfwd_îr‹_pkt
 = 
Ál£
;

129 
boﬁ
 
	gfwd_no¸c_pkt
 = 
Ál£
;

132 
uöt64_t
 
	glgwm
 = 0;

133 
	g£rv_addr
[64] = 
STR
(
DEFAULT_SERVER
);

134 
	g£rv_p‹t_up
[8] = 
STR
(
DEFAULT_PORT_UP
);

135 
	g£rv_p‹t_down
[8] = 
STR
(
DEFAULT_PORT_DW
);

136 
	gkì∑live_time
 = 
DEFAULT_KEEPALIVE
;

139 
	g°©_öãrvÆ
 = 
DEFAULT_STAT
;

142 
uöt32_t
 
	g√t_mac_h
;

143 
uöt32_t
 
	g√t_mac_l
;

146 
	gsock_up
;

147 
	gsock_down
;

150 
timevÆ
 
	gpush_timeout_hÆf
 = {0, (
PUSH_TIMEOUT_MS
 * 500)};

151 
timevÆ
 
	gpuŒ_timeout
 = {0, (
PULL_TIMEOUT_MS
 * 1000)};

154 
±hªad_muãx_t
 
	gmx_c⁄˚¡
 = 
PTHREAD_MUTEX_INITIALIZER
;

155 
±hªad_muãx_t
 
	gmx_xc‹r
 = 
PTHREAD_MUTEX_INITIALIZER
;

156 
boﬁ
 
	gxèl_c‹ª˘_ok
 = 
Ál£
;

157 
	gxèl_c‹ª˘
 = 1.0;

160 
	ggps_ây_∑th
[64] = "\0";

161 
	ggps_ây_fd
 = -1;

162 
boﬁ
 
	ggps_íabÀd
 = 
Ál£
;

165 
±hªad_muãx_t
 
	gmx_timîef
 = 
PTHREAD_MUTEX_INITIALIZER
;

166 
boﬁ
 
	ggps_ªf_vÆid
;

167 
åef
 
	gtime_ª„ªn˚_gps
;

170 
co‹d_s
 
	gª„ªn˚_co‹d
;

173 
boﬁ
 
	ggps_Áke_íabÀ
;

176 
±hªad_muãx_t
 
	gmx_mós_up
 = 
PTHREAD_MUTEX_INITIALIZER
;

177 
uöt32_t
 
	gmós_nb_rx_rcv
 = 0;

178 
uöt32_t
 
	gmós_nb_rx_ok
 = 0;

179 
uöt32_t
 
	gmós_nb_rx_bad
 = 0;

180 
uöt32_t
 
	gmós_nb_rx_no¸c
 = 0;

181 
uöt32_t
 
	gmós_up_pkt_fwd
 = 0;

182 
uöt32_t
 
	gmós_up_√tw‹k_byã
 = 0;

183 
uöt32_t
 
	gmós_up_∑ylﬂd_byã
 = 0;

184 
uöt32_t
 
	gmós_up_dgøm_£¡
 = 0;

185 
uöt32_t
 
	gmós_up_ack_rcv
 = 0;

187 
±hªad_muãx_t
 
	gmx_mós_dw
 = 
PTHREAD_MUTEX_INITIALIZER
;

188 
uöt32_t
 
	gmós_dw_puŒ_£¡
 = 0;

189 
uöt32_t
 
	gmós_dw_ack_rcv
 = 0;

190 
uöt32_t
 
	gmós_dw_dgøm_rcv
 = 0;

191 
uöt32_t
 
	gmós_dw_√tw‹k_byã
 = 0;

192 
uöt32_t
 
	gmós_dw_∑ylﬂd_byã
 = 0;

193 
uöt32_t
 
	gmós_nb_tx_ok
 = 0;

194 
uöt32_t
 
	gmós_nb_tx_Áû
 = 0;

195 
uöt32_t
 
	gmós_nb_tx_ªque°ed
 = 0;

196 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

197 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

198 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_too_œã
 = 0;

199 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_too_óæy
 = 0;

200 
uöt32_t
 
	gmós_nb_bóc⁄_queued
 = 0;

201 
uöt32_t
 
	gmós_nb_bóc⁄_£¡
 = 0;

202 
uöt32_t
 
	gmós_nb_bóc⁄_ªje˘ed
 = 0;

204 
±hªad_muãx_t
 
	gmx_mós_gps
 = 
PTHREAD_MUTEX_INITIALIZER
;

205 
boﬁ
 
	ggps_co‹d_vÆid
;

206 
co‹d_s
 
	gmós_gps_co‹d
;

207 
co‹d_s
 
	gmós_gps_îr
;

209 
±hªad_muãx_t
 
	gmx_°©_ªp
 = 
PTHREAD_MUTEX_INITIALIZER
;

210 
boﬁ
 
	gªp‹t_ªady
 = 
Ál£
;

211 
	g°©us_ªp‹t
[
STATUS_SIZE
];

214 
uöt32_t
 
	gbóc⁄_≥riod
 = 0;

215 
uöt32_t
 
	gbóc⁄_‰eq_hz
 = 
DEFAULT_BEACON_FREQ_HZ
;

216 
uöt8_t
 
	gbóc⁄_‰eq_nb
 = 
DEFAULT_BEACON_FREQ_NB
;

217 
uöt32_t
 
	gbóc⁄_‰eq_°ï
 = 
DEFAULT_BEACON_FREQ_STEP
;

218 
uöt8_t
 
	gbóc⁄_d©¨©e
 = 
DEFAULT_BEACON_DATARATE
;

219 
uöt32_t
 
	gbóc⁄_bw_hz
 = 
DEFAULT_BEACON_BW_HZ
;

220 
öt8_t
 
	gbóc⁄_powî
 = 
DEFAULT_BEACON_POWER
;

221 
uöt8_t
 
	gbóc⁄_öfodesc
 = 
DEFAULT_BEACON_INFODESC
;

224 
uöt32_t
 
	gautoquô_thªshﬁd
 = 0;

227 
jô_queue_s
 
	gjô_queue
;

230 
öt8_t
 
	g™ã¬a_gaö
 = 0;

233 
lgw_tx_gaö_lut_s
 
	gtxlut
;

234 
uöt32_t
 
	gtx_‰eq_mö
[
LGW_RF_CHAIN_NB
];

235 
uöt32_t
 
	gtx_‰eq_max
[
LGW_RF_CHAIN_NB
];

238 
ødiodev
 *
	gsxødio
;

239 
boﬁ
 
	gsx1276
 = 
Ál£
;

244 
sig_h™dÀr
(
sigio
);

246 
∑r£_SX1301_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

248 
∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

250 
uöt16_t
 
¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
);

252 
dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
);

254 
gps_¥o˚ss_sync
();

256 
gps_¥o˚ss_co‹ds
();

259 
thªad_up
();

260 
thªad_down
();

261 
thªad_gps
();

262 
thªad_vÆid
();

263 
thªad_jô
();

264 
thªad_timîsync
();

269 
	$sig_h™dÀr
(
sigio
) {

270 i‡(
sigio
 =
SIGQUIT
) {

271 
quô_sig
 = 
åue
;

272 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

273 
exô_sig
 = 
åue
;

276 
	}
}

278 
	$∑r£_SX1301_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

279 
i
;

280 
∑øm_«me
[32];

281 c⁄° *
°r
;

282 c⁄° 
c⁄f_obj_«me
[] = "SX1301_conf";

283 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

284 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

285 
JSON_Obje˘
 *
c⁄f_lbt_obj
 = 
NULL
;

286 
JSON_Obje˘
 *
c⁄f_lbtch™_obj
 = 
NULL
;

287 
JSON_VÆue
 *
vÆ
 = 
NULL
;

288 
JSON_Aºay
 *
c⁄f_¨øy
 = 
NULL
;

289 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

290 
lgw_c⁄f_lbt_s
 
lbtc⁄f
;

291 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

292 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

293 
uöt32_t
 
sf
, 
bw
, 
fdev
;

296 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

297 i‡(
roŸ_vÆ
 =
NULL
) {

298 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

299 
	`exô
(
EXIT_FAILURE
);

303 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

304 i‡(
c⁄f_obj
 =
NULL
) {

305 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

308 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög SX1301Ö¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

312 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

313 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "lorawan_public");

314 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

315 
bﬂrdc⁄f
.
l‹aw™_public
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

317 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: DataÅype forÜorawan_public seems wrong,Ölease check\n");

318 
bﬂrdc⁄f
.
l‹aw™_public
 = 
Ál£
;

320 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "clksrc");

321 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

322 
bﬂrdc⁄f
.
˛k§c
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

324 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: DataÅype for clksrc seems wrong,Ölease check\n");

325 
bﬂrdc⁄f
.
˛k§c
 = 0;

327 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Ü‹aw™_publi¯%d, clk§¯%d\n", 
bﬂrdc⁄f
.
l‹aw™_public
, bﬂrdc⁄f.
˛k§c
);

329 i‡(
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

330 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: FailedÅo configure board\n");

335 
	`mem£t
(&
lbtc⁄f
, 0, Übtconf);

336 
c⁄f_lbt_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
c⁄f_obj
, "lbt_cfg");

337 i‡(
c⁄f_lbt_obj
 =
NULL
) {

338 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Ço configuration for LBT\n");

340 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "enable");

341 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

342 
lbtc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

344 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: DataÅype forÜbt_cfg.enable seems wrong,Ölease check\n");

345 
lbtc⁄f
.
íabÀ
 = 
Ál£
;

347 i‡(
lbtc⁄f
.
íabÀ
 =
åue
) {

348 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "rssi_target");

349 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

350 
lbtc⁄f
.
rssi_èrgë
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

352 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: DataÅype forÜbt_cfg.rssi_target seems wrong,Ölease check\n");

353 
lbtc⁄f
.
rssi_èrgë
 = 0;

355 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "sx127x_rssi_offset");

356 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

357 
lbtc⁄f
.
rssi_off£t
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

359 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: DataÅype forÜbt_cfg.sx127x_rssi_offset seems wrong,Ölease check\n");

360 
lbtc⁄f
.
rssi_off£t
 = 0;

363 
c⁄f_¨øy
 = 
	`js⁄_obje˘_gë_¨øy
(
c⁄f_lbt_obj
, "chan_cfg");

364 i‡(
c⁄f_¨øy
 !
NULL
) {

365 
lbtc⁄f
.
nb_ch™√l
 = 
	`js⁄_¨øy_gë_cou¡
–
c⁄f_¨øy
 );

366 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: %u LBT ch™√l†c⁄figuªd\n", 
lbtc⁄f
.
nb_ch™√l
);

368 
i
 = 0; i < ()
lbtc⁄f
.
nb_ch™√l
; i++) {

370 i‡(
i
 >
LBT_CHANNEL_FREQ_NB
)

372 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: LBT ch™√»%dÇŸ suµ‹ãd, skù it\n", 
i
 );

376 
c⁄f_lbtch™_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_¨øy
, 
i
);

379 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "freq_hz");

380 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

381 
lbtc⁄f
.
ch™√ls
[
i
].
‰eq_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

383 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: D©®ty≥ f‹Übt_cfg.ch™√ls[%d].‰eq_hz sìm†wr⁄g,ÖÀa£ check\n", 
i
);

384 
lbtc⁄f
.
ch™√ls
[
i
].
‰eq_hz
 = 0;

388 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "scan_time_us");

389 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

390 
lbtc⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

392 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: D©®ty≥ f‹Übt_cfg.ch™√ls[%d].sˇn_time_u†£em†wr⁄g,ÖÀa£ check\n", 
i
);

393 
lbtc⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = 0;

398 i‡(
	`lgw_lbt_£tc⁄f
(
lbtc⁄f
Ë!
LGW_HAL_SUCCESS
) {

399 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: FailedÅo configure LBT\n");

403 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: LBT is disabled\n");

408 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "antenna_gain");

409 i‡(
vÆ
 !
NULL
) {

410 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

411 
™ã¬a_gaö
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

413 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: DataÅype forántenna_gain seems wrong,Ölease check\n");

414 
™ã¬a_gaö
 = 0;

417 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:á¡í«_gaö %d dBi\n", 
™ã¬a_gaö
);

420 
	`mem£t
(&
txlut
, 0, Åxlut);

421 
i
 = 0; i < 
TX_GAIN_LUT_SIZE_MAX
; i++) {

422 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i", 
i
);

423 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

424 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

425 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Çÿc⁄figuøti⁄ f‹Åx gaöÜuà%i\n", 
i
);

428 
txlut
.
size
++;

430 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.∑_gaö", 
i
);

431 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

432 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

433 
txlut
.
lut
[
i
].
∑_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

435 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

436 
txlut
.
lut
[
i
].
∑_gaö
 = 0;

438 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.dac_gaö", 
i
);

439 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

440 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

441 
txlut
.
lut
[
i
].
dac_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

443 
txlut
.
lut
[
i
].
dac_gaö
 = 3;

445 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.dig_gaö", 
i
);

446 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

447 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

448 
txlut
.
lut
[
i
].
dig_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

450 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

451 
txlut
.
lut
[
i
].
dig_gaö
 = 0;

453 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.mix_gaö", 
i
);

454 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

455 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

456 
txlut
.
lut
[
i
].
mix_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

458 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

459 
txlut
.
lut
[
i
].
mix_gaö
 = 0;

461 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.rf_powî", 
i
);

462 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

463 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

464 
txlut
.
lut
[
i
].
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

466 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

467 
txlut
.
lut
[
i
].
rf_powî
 = 0;

471 i‡(
txlut
.
size
 > 0) {

472 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: C⁄figurög TX LUT wôh %u indexes\n", 
txlut
.
size
);

473 i‡(
	`lgw_txgaö_£tc⁄f
(&
txlut
Ë!
LGW_HAL_SUCCESS
) {

474 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: FailedÅo configure concentrator TX Gain LUT\n");

478 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: No TX gain LUT defined\n");

482 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; ++i) {

483 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

484 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i", 
i
);

485 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

486 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

487 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Çÿc⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

491 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.íabÀ", 
i
);

492 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

493 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

494 
rfc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

496 
rfc⁄f
.
íabÀ
 = 
Ál£
;

498 i‡(
rfc⁄f
.
íabÀ
 =
Ál£
) {

499 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Ñadiÿ%òdißbÀd\n", 
i
);

501 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.‰eq", 
i
);

502 
rfc⁄f
.
‰eq_hz
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

503 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_off£t", 
i
);

504 
rfc⁄f
.
rssi_off£t
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

505 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.ty≥", 
i
);

506 
°r
 = 
	`js⁄_obje˘_dŸgë_°rög
(
c⁄f_obj
, 
∑øm_«me
);

507 i‡(!
	`°∫cmp
(
°r
, "SX1255", 6)) {

508 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

509 } i‡(!
	`°∫cmp
(
°r
, "SX1257", 6)) {

510 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

512 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: invÆidÑadiÿty≥: %†(should bêSX1255 o∏SX1257)\n", 
°r
);

514 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_íabÀ", 
i
);

515 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

516 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

517 
rfc⁄f
.
tx_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

518 i‡(
rfc⁄f
.
tx_íabÀ
 =
åue
) {

520 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_mö", 
i
);

521 
tx_‰eq_mö
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

522 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_max", 
i
);

523 
tx_‰eq_max
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

524 i‡((
tx_‰eq_mö
[
i
] =0Ë|| (
tx_‰eq_max
[i] == 0)) {

525 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING:Çÿ‰equícyÑ™gê•ecifõd f‹ TXÑ‡chaö %d\n", 
i
);

528 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_nŸch_‰eq", 
i
);

529 
rfc⁄f
.
tx_nŸch_‰eq
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

532 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

534 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Ñadiÿ%òíabÀd (ty≥ %s), cíã∏‰equícy %u, RSSI off£à%f,ÅxÉ«bÀd %d,Åx_nŸch_‰eq %u\n", 
i
, 
°r
, 
rfc⁄f
.
‰eq_hz
,Ñfc⁄f.
rssi_off£t
,Ñfc⁄f.
tx_íabÀ
,Ñfc⁄f.
tx_nŸch_‰eq
);

537 i‡(
	`lgw_rxrf_£tc⁄f
(
i
, 
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

538 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invÆid c⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

544 
i
 = 0; i < 
LGW_MULTI_NB
; ++i) {

545 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

546 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i", 
i
);

547 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

548 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

549 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Çÿc⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

553 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.íabÀ", 
i
);

554 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

555 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

556 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

558 
ifc⁄f
.
íabÀ
 = 
Ál£
;

560 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

561 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: L‹®mu…i-SF ch™√»%òdißbÀd\n", 
i
);

563 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.ødio", 
i
);

564 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

565 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.if", 
i
);

566 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

568 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: L‹®mu…i-SF ch™√»%i>Ñadiÿ%i, IF %òHz, 125 kHz bw, SF 7Åÿ12\n", 
i
, 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
);

571 i‡(
	`lgw_rxif_£tc⁄f
(
i
, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

572 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invÆid c⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

578 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

579 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_Lora_std");

580 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

581 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Ço configuration for Lora standard channel\n");

583 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.enable");

584 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

585 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

587 
ifc⁄f
.
íabÀ
 = 
Ál£
;

589 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

590 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: L‹®°™d¨d ch™√»%òdißbÀd\n", 
i
);

592 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.radio");

593 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.if");

594 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.bandwidth");

595 
bw
) {

596 500000: 
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
; ;

597 250000: 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
; ;

598 125000: 
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
; ;

599 : 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

601 
sf
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.spread_factor");

602 
sf
) {

603 7: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
; ;

604 8: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF8
; ;

605 9: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF9
; ;

606 10: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF10
; ;

607 11: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF11
; ;

608 12: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF12
; ;

609 : 
ifc⁄f
.
d©¨©e
 = 
DR_UNDEFINED
;

611 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: L‹®°d ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, SF %u\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, 
sf
);

613 i‡(
	`lgw_rxif_£tc⁄f
(8, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

614 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invalid configuration for Lora standard channel\n");

620 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

621 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_FSK");

622 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

623 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Ço configuration for FSK channel\n");

625 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_FSK.enable");

626 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

627 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

629 
ifc⁄f
.
íabÀ
 = 
Ál£
;

631 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

632 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: FSK ch™√»%òdißbÀd\n", 
i
);

634 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.radio");

635 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.if");

636 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.bandwidth");

637 
fdev
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.freq_deviation");

638 
ifc⁄f
.
d©¨©e
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.datarate");

641 i‡((
bw
 =0Ë&& (
fdev
 != 0)) {

642 
bw
 = 2 * 
fdev
 + 
ifc⁄f
.
d©¨©e
;

644 i‡(
bw
 =0Ë
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

645 i‡(
bw
 <7800Ë
ifc⁄f
.
b™dwidth
 = 
BW_7K8HZ
;

646 i‡(
bw
 <15600Ë
ifc⁄f
.
b™dwidth
 = 
BW_15K6HZ
;

647 i‡(
bw
 <31200Ë
ifc⁄f
.
b™dwidth
 = 
BW_31K2HZ
;

648 i‡(
bw
 <62500Ë
ifc⁄f
.
b™dwidth
 = 
BW_62K5HZ
;

649 i‡(
bw
 <125000Ë
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
;

650 i‡(
bw
 <250000Ë
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

651 i‡(
bw
 <500000Ë
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
;

652 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

654 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: FSK ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, %u bp†d©¨©e\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, ifc⁄f.
d©¨©e
);

656 i‡(
	`lgw_rxif_£tc⁄f
(9, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

657 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invalid configuration for FSK channel\n");

661 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

664 
	}
}

666 
	$∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

667 c⁄° 
c⁄f_obj_«me
[] = "gateway_conf";

668 
JSON_VÆue
 *
roŸ_vÆ
;

669 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

670 
JSON_VÆue
 *
vÆ
 = 
NULL
;

671 c⁄° *
°r
;

672 
uŒ
 = 0;

675 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

676 i‡(
roŸ_vÆ
 =
NULL
) {

677 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

678 
	`exô
(
EXIT_FAILURE
);

682 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

683 i‡(
c⁄f_obj
 =
NULL
) {

684 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

687 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög g©ewayÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

691 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gateway_ID");

692 i‡(
°r
 !
NULL
) {

693 
	`ssˇnf
(
°r
, "%Œx", &
uŒ
);

694 
lgwm
 = 
uŒ
;

695 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: g©eway MACáddªs†i†c⁄figuªdÅÿ%016ŒX\n", 
uŒ
);

699 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "server_address");

700 i‡(
°r
 !
NULL
) {

701 
	`°∫˝y
(
£rv_addr
, 
°r
,  serv_addr);

702 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: sîvî ho°«mê‹ IPáddªs†i†c⁄figuªdÅÿ\"%s\"\n", 
£rv_addr
);

706 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "serv_port_up");

707 i‡(
vÆ
 !
NULL
) {

708 
	`¢¥ötf
(
£rv_p‹t_up
,  sîv_p‹t_up, "%u", (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
));

709 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: up°ªamÖ‹ài†c⁄figuªdÅÿ\"%s\"\n", 
£rv_p‹t_up
);

711 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "serv_port_down");

712 i‡(
vÆ
 !
NULL
) {

713 
	`¢¥ötf
(
£rv_p‹t_down
,  sîv_p‹t_down, "%u", (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
));

714 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: down°ªamÖ‹ài†c⁄figuªdÅÿ\"%s\"\n", 
£rv_p‹t_down
);

718 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "keepalive_interval");

719 i‡(
vÆ
 !
NULL
) {

720 
kì∑live_time
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

721 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: down°ªam kìp-ÆivêöãrvÆ i†c⁄figuªdÅÿ%u sec⁄ds\n", 
kì∑live_time
);

725 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "stat_interval");

726 i‡(
vÆ
 !
NULL
) {

727 
°©_öãrvÆ
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

728 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: sèti°ic†di•œy i¡îvÆ i†c⁄figuªdÅÿ%u sec⁄ds\n", 
°©_öãrvÆ
);

732 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "push_timeout_ms");

733 i‡(
vÆ
 !
NULL
) {

734 
push_timeout_hÆf
.
tv_u£c
 = 500 * ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

735 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: up°ªam PUSH_DATAÅime-ouài†c⁄figuªdÅÿ%u ms\n", ()(
push_timeout_hÆf
.
tv_u£c
 / 500));

739 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_valid");

740 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

741 
fwd_vÆid_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

743 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Öackë†ª˚ived wôhá vÆid CRC wûl%†bêf‹w¨ded\n", (
fwd_vÆid_pkt
 ? "" : " NOT"));

744 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_error");

745 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

746 
fwd_îr‹_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

748 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Öackë†ª˚ived wôhá CRCÉº‹ wûl%†bêf‹w¨ded\n", (
fwd_îr‹_pkt
 ? "" : " NOT"));

749 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_disabled");

750 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

751 
fwd_no¸c_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

753 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:Öackë†ª˚ived wôhÇÿCRC wûl%†bêf‹w¨ded\n", (
fwd_no¸c_pkt
 ? "" : " NOT"));

756 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gps_tty_path");

757 i‡(
°r
 !
NULL
) {

758 
	`°∫˝y
(
gps_ây_∑th
, 
°r
,  gps_tty_path);

759 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
gps_ây_∑th
);

763 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_latitude");

764 i‡(
vÆ
 !
NULL
) {

765 
ª„ªn˚_co‹d
.
œt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

766 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Re„ªn˚Ü©ôudêi†c⁄figuªdÅÿ%‡deg\n", 
ª„ªn˚_co‹d
.
œt
);

768 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_longitude");

769 i‡(
vÆ
 !
NULL
) {

770 
ª„ªn˚_co‹d
.
l⁄
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

771 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Re„ªn˚Ü⁄gôudêi†c⁄figuªdÅÿ%‡deg\n", 
ª„ªn˚_co‹d
.
l⁄
);

773 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_altitude");

774 i‡(
vÆ
 !
NULL
) {

775 
ª„ªn˚_co‹d
.
Æt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

776 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Re„ªn˚á…ôudêi†c⁄figuªdÅÿ%òmëîs\n", 
ª„ªn˚_co‹d
.
Æt
);

780 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "fake_gps");

781 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

782 
gps_Áke_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

783 i‡(
gps_Áke_íabÀ
 =
åue
) {

784 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: fake GPS isÉnabled\n");

786 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: fake GPS is disabled\n");

791 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_period");

792 i‡(
vÆ
 !
NULL
) {

793 
bóc⁄_≥riod
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

794 i‡((
bóc⁄_≥riod
 > 0) && (beacon_period < 6)) {

795 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: invalid configuration for BeaconÖeriod, must be >= 6s\n");

798 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ögÖîiod i†c⁄figuªdÅÿ%u sec⁄ds\n", 
bóc⁄_≥riod
);

803 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_hz");

804 i‡(
vÆ
 !
NULL
) {

805 
bóc⁄_‰eq_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

806 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ög sig«»wû»bêemôãdáà%u Hz\n", 
bóc⁄_‰eq_hz
);

810 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_nb");

811 i‡(
vÆ
 !
NULL
) {

812 
bóc⁄_‰eq_nb
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

813 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ög ch™√»numbî i†£àtÿ%u\n", 
bóc⁄_‰eq_nb
);

817 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_step");

818 i‡(
vÆ
 !
NULL
) {

819 
bóc⁄_‰eq_°ï
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

820 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ög ch™√»‰equícy sã∞i†£àtÿ%uHz\n", 
bóc⁄_‰eq_°ï
);

824 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_datarate");

825 i‡(
vÆ
 !
NULL
) {

826 
bóc⁄_d©¨©e
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

827 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ög d©¨©êi†£àtÿSF%d\n", 
bóc⁄_d©¨©e
);

831 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_bw_hz");

832 i‡(
vÆ
 !
NULL
) {

833 
bóc⁄_bw_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

834 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ög moduœti⁄ b™dwidth i†£àtÿ%dHz\n", 
bóc⁄_bw_hz
);

838 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_power");

839 i‡(
vÆ
 !
NULL
) {

840 
bóc⁄_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

841 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ög TXÖowî i†£àtÿ%ddBm\n", 
bóc⁄_powî
);

845 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_infodesc");

846 i‡(
vÆ
 !
NULL
) {

847 
bóc⁄_öfodesc
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

848 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ög inf‹m©i⁄ des¸ùt‹ i†£àtÿ%u\n", 
bóc⁄_öfodesc
);

852 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "autoquit_threshold");

853 i‡(
vÆ
 !
NULL
) {

854 
autoquô_thªshﬁd
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

855 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Auto-quôá·î %uÇ⁄-acknowÀdged PULL_DATA\n", 
autoquô_thªshﬁd
);

859 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

861 
	}
}

863 
uöt16_t
 
	$¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
) {

864 c⁄° 
uöt16_t
 
¸c_pﬁy
 = 0x1021;

865 c⁄° 
uöt16_t
 
öô_vÆ
 = 0x0000;

866 
uöt16_t
 
x
 = 
öô_vÆ
;

867 
i
, 
j
;

869 i‡(
d©a
 =
NULL
) {

873 
i
=0; i<
size
; ++i) {

874 
x
 ^(
uöt16_t
)
d©a
[
i
] << 8;

875 
j
=0; j<8; ++j) {

876 
x
 = (x & 0x8000Ë? (x<<1Ë^ 
¸c_pﬁy
 : (x<<1);

880  
x
;

881 
	}
}

883 
	$dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
) {

884 
x
;

886 
x
 = 1E-9 * ()(
íd
.
tv_n£c
 - 
begönög
.tv_nsec);

887 
x
 +()(
íd
.
tv_£c
 - 
begönög
.tv_sec);

889  
x
;

890 
	}
}

892 
	$£nd_tx_ack
(
uöt8_t
 
tokí_h
, uöt8_à
tokí_l
, 
jô_îr‹_e
 
îr‹
) {

893 
uöt8_t
 
buff_ack
[64];

894 
buff_ödex
;

897 
	`mem£t
(&
buff_ack
, 0,  buff_ack);

900 
buff_ack
[0] = 
PROTOCOL_VERSION
;

901 
buff_ack
[1] = 
tokí_h
;

902 
buff_ack
[2] = 
tokí_l
;

903 
buff_ack
[3] = 
PKT_TX_ACK
;

904 *(
uöt32_t
 *)(
buff_ack
 + 4Ë
√t_mac_h
;

905 *(
uöt32_t
 *)(
buff_ack
 + 8Ë
√t_mac_l
;

906 
buff_ödex
 = 12;

909 i‡(
îr‹
 !
JIT_ERROR_OK
) {

911 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"{\"txpk_ack\":{", 13);

912 
buff_ödex
 += 13;

914 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"error\":", 8);

915 
buff_ödex
 += 8;

916 
îr‹
) {

917 
JIT_ERROR_FULL
:

918 
JIT_ERROR_COLLISION_PACKET
:

919 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_PACKET\"", 18);

920 
buff_ödex
 += 18;

922 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

923 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 += 1;

924 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

926 
JIT_ERROR_TOO_LATE
:

927 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_LATE\"", 10);

928 
buff_ödex
 += 10;

930 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

931 
mós_nb_tx_ªje˘ed_too_œã
 += 1;

932 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

934 
JIT_ERROR_TOO_EARLY
:

935 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_EARLY\"", 11);

936 
buff_ödex
 += 11;

938 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

939 
mós_nb_tx_ªje˘ed_too_óæy
 += 1;

940 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

942 
JIT_ERROR_COLLISION_BEACON
:

943 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_BEACON\"", 18);

944 
buff_ödex
 += 18;

946 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

947 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 += 1;

948 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

950 
JIT_ERROR_TX_FREQ
:

951 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_FREQ\"", 9);

952 
buff_ödex
 += 9;

954 
JIT_ERROR_TX_POWER
:

955 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_POWER\"", 10);

956 
buff_ödex
 += 10;

958 
JIT_ERROR_GPS_UNLOCKED
:

959 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"GPS_UNLOCKED\"", 14);

960 
buff_ödex
 += 14;

963 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"UNKNOWN\"", 9);

964 
buff_ödex
 += 9;

968 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"}}", 2);

969 
buff_ödex
 += 2;

972 
buff_ack
[
buff_ödex
] = 0;

975  
	`£nd
(
sock_down
, (*)
buff_ack
, 
buff_ödex
, 0);

976 
	}
}

981 
	$maö
()

983 
siga˘i⁄
 
siga˘
;

984 
i
;

985 
x
;

988 *
globÆ_cfg_∑th
= "/etc/lora/global_conf.json";

989 *
loˇl_cfg_∑th
 = "/etc/lora/local_conf.json";

990 *
debug_cfg_∑th
 = "/etc/lora/debug_conf.json";

993 
±hªad_t
 
thrid_up
;

994 
±hªad_t
 
thrid_down
;

995 
±hªad_t
 
thrid_gps
;

996 
±hªad_t
 
thrid_vÆid
;

997 
±hªad_t
 
thrid_jô
;

998 
±hªad_t
 
thrid_timîsync
;

1001 
addröfo
 
höts
;

1002 
addröfo
 *
ªsu…
;

1003 
addröfo
 *
q
;

1004 
ho°_«me
[64];

1005 
p‹t_«me
[64];

1008 
uöt32_t
 
˝_nb_rx_rcv
;

1009 
uöt32_t
 
˝_nb_rx_ok
;

1010 
uöt32_t
 
˝_nb_rx_bad
;

1011 
uöt32_t
 
˝_nb_rx_no¸c
;

1012 
uöt32_t
 
˝_up_pkt_fwd
;

1013 
uöt32_t
 
˝_up_√tw‹k_byã
;

1014 
uöt32_t
 
˝_up_∑ylﬂd_byã
;

1015 
uöt32_t
 
˝_up_dgøm_£¡
;

1016 
uöt32_t
 
˝_up_ack_rcv
;

1017 
uöt32_t
 
˝_dw_puŒ_£¡
;

1018 
uöt32_t
 
˝_dw_ack_rcv
;

1019 
uöt32_t
 
˝_dw_dgøm_rcv
;

1020 
uöt32_t
 
˝_dw_√tw‹k_byã
;

1021 
uöt32_t
 
˝_dw_∑ylﬂd_byã
;

1022 
uöt32_t
 
˝_nb_tx_ok
;

1023 
uöt32_t
 
˝_nb_tx_Áû
;

1024 
uöt32_t
 
˝_nb_tx_ªque°ed
 = 0;

1025 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

1026 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

1027 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_œã
 = 0;

1028 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_óæy
 = 0;

1029 
uöt32_t
 
˝_nb_bóc⁄_queued
 = 0;

1030 
uöt32_t
 
˝_nb_bóc⁄_£¡
 = 0;

1031 
uöt32_t
 
˝_nb_bóc⁄_ªje˘ed
 = 0;

1034 
boﬁ
 
co‹d_ok
 = 
Ál£
;

1035 
co‹d_s
 
˝_gps_co‹d
 = {0.0, 0.0, 0};

1038 
uöt32_t
 
åig_t°amp
;

1041 
time_t
 
t
, 
now_time
;

1042 
°©_time°amp
[24];

1043 
rx_ok_øtio
;

1044 
rx_bad_øtio
;

1045 
rx_no¸c_øtio
;

1046 
up_ack_øtio
;

1047 
dw_ack_øtio
;

1050 
	`time
(&
now_time
);

1051 
	`°r·ime
(
°©_time°amp
, (°©_time°amp), "%Y%m%d%H%M%S", 
	`gmtime
(&
now_time
));

1052 
	`MSG
("Sèπög Packë F‹w¨dîáà%s\n", 
°©_time°amp
);

1056 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


1057 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: LittleÉndian host\n");

1058 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


1059 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: BigÉndian host\n");

1061 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: HostÉndianness unknown\n");

1065 i‡(
	`ac˚ss
(
debug_cfg_∑th
, 
R_OK
) == 0) {

1066 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: found debug c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
debug_cfg_∑th
);

1067 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: other configuration files will be ignored\n");

1068 
x
 = 
	`∑r£_SX1301_c⁄figuøti⁄
(
debug_cfg_∑th
);

1069 i‡(
x
 != 0) {

1070 
	`exô
(
EXIT_FAILURE
);

1072 
x
 = 
	`∑r£_g©eway_c⁄figuøti⁄
(
debug_cfg_∑th
);

1073 i‡(
x
 != 0) {

1074 
	`exô
(
EXIT_FAILURE
);

1076 } i‡(
	`ac˚ss
(
globÆ_cfg_∑th
, 
R_OK
) == 0) {

1077 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: found globÆ c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
globÆ_cfg_∑th
);

1078 
x
 = 
	`∑r£_SX1301_c⁄figuøti⁄
(
globÆ_cfg_∑th
);

1079 i‡(
x
 != 0) {

1080 
	`exô
(
EXIT_FAILURE
);

1082 
x
 = 
	`∑r£_g©eway_c⁄figuøti⁄
(
globÆ_cfg_∑th
);

1083 i‡(
x
 != 0) {

1084 
	`exô
(
EXIT_FAILURE
);

1086 i‡(
	`ac˚ss
(
loˇl_cfg_∑th
, 
R_OK
) == 0) {

1087 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: foundÜoˇ»c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
loˇl_cfg_∑th
);

1088 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO:ÑedefinedÖarameters will overwrite globalÖarameters\n");

1089 
	`∑r£_SX1301_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1090 
	`∑r£_g©eway_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1092 } i‡(
	`ac˚ss
(
loˇl_cfg_∑th
, 
R_OK
) == 0) {

1093 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: foundÜoˇ»c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
loˇl_cfg_∑th
);

1094 
x
 = 
	`∑r£_SX1301_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1095 i‡(
x
 != 0) {

1096 
	`exô
(
EXIT_FAILURE
);

1098 
x
 = 
	`∑r£_g©eway_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1099 i‡(
x
 != 0) {

1100 
	`exô
(
EXIT_FAILURE
);

1103 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [maö] faûedÅÿfödány c⁄figuøti⁄ fûê«med %s, %†OR %s\n", 
globÆ_cfg_∑th
, 
loˇl_cfg_∑th
, 
debug_cfg_∑th
);

1104 
	`exô
(
EXIT_FAILURE
);

1108 i‡(
gps_ây_∑th
[0] != '\0') {

1109 
i
 = 
	`lgw_gps_íabÀ
(
gps_ây_∑th
, "ubx7", 0, &
gps_ây_fd
);

1110 i‡(
i
 !
LGW_GPS_SUCCESS
) {

1111 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [maö] impossibÀÅÿ›í %†f‹ GPS syn¯(checkÖîmissi⁄s)\n", 
gps_ây_∑th
);

1112 
gps_íabÀd
 = 
Ál£
;

1113 
gps_ªf_vÆid
 = 
Ál£
;

1115 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [maö] TTYÖ‹à%†›í f‹ GPS synchr⁄iz©i⁄\n", 
gps_ây_∑th
);

1116 
gps_íabÀd
 = 
åue
;

1117 
gps_ªf_vÆid
 = 
Ál£
;

1122 
	`tz£t
();

1128 
√t_mac_h
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & (
lgwm
>>32)));

1129 
√t_mac_l
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & 
lgwm
 ));

1132 
	`mem£t
(&
höts
, 0,  hints);

1133 
höts
.
ai_Ámûy
 = 
AF_INET
;

1134 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

1137 
i
 = 
	`gëaddröfo
(
£rv_addr
, 
£rv_p‹t_up
, &
höts
, &
ªsu…
);

1138 i‡(
i
 != 0) {

1139 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] gëaddröfÿ⁄áddªs†%†(PORT %sËªtu∫ed %s\n", 
£rv_addr
, 
£rv_p‹t_up
, 
	`gai_°ªº‹
(
i
));

1140 
	`exô
(
EXIT_FAILURE
);

1144 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1145 
sock_up
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

1146 i‡(
sock_up
 == -1) ;

1149 i‡(
q
 =
NULL
) {

1150 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
£rv_addr
, 
£rv_p‹t_up
);

1151 
i
 = 1;

1152 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1153 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

1154 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [up]Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

1155 ++
i
;

1157 
	`exô
(
EXIT_FAILURE
);

1161 
i
 = 
	`c⁄√˘
(
sock_up
, 
q
->
ai_addr
, q->
ai_addæí
);

1162 i‡(
i
 != 0) {

1163 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1164 
	`exô
(
EXIT_FAILURE
);

1166 
	`‰ìaddröfo
(
ªsu…
);

1169 
i
 = 
	`gëaddröfo
(
£rv_addr
, 
£rv_p‹t_down
, &
höts
, &
ªsu…
);

1170 i‡(
i
 != 0) {

1171 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [down] gëaddröfÿ⁄áddªs†%†’‹à%sËªtu∫ed %s\n", 
£rv_addr
, 
£rv_p‹t_up
, 
	`gai_°ªº‹
(
i
));

1172 
	`exô
(
EXIT_FAILURE
);

1176 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1177 
sock_down
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

1178 i‡(
sock_down
 == -1) ;

1181 i‡(
q
 =
NULL
) {

1182 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [down] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
£rv_addr
, 
£rv_p‹t_up
);

1183 
i
 = 1;

1184 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1185 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

1186 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down]Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

1187 ++
i
;

1189 
	`exô
(
EXIT_FAILURE
);

1193 
i
 = 
	`c⁄√˘
(
sock_down
, 
q
->
ai_addr
, q->
ai_addæí
);

1194 i‡(
i
 != 0) {

1195 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [down] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1196 
	`exô
(
EXIT_FAILURE
);

1198 
	`‰ìaddröfo
(
ªsu…
);

1201 
sxødio
 = (
ødiodev
 *Ë
	`mÆloc
((radiodev));

1202 
sxødio
->
nss
 = 15;

1203 
sxødio
->
r°
 = 8;

1204 
sxødio
->
dio
[0] = 7;

1205 
sxødio
->
dio
[1] = 6;

1206 
sxødio
->
dio
[2] = 0;

1207 
sxødio
->
•ù‹t
 = 
	`lgw_•i_›í
(
SPI_DEV_RADIO
);

1208 i‡(
sxødio
->
•ù‹t
 < 0) {

1209 
	`MSG_DEBUG
(
DEBUG_ERROR
, "open spi_dev_sx1276Érror!\n");

1210 
	`‰ì
(
sxødio
);

1213 if(
	`gë_ødio_vîsi⁄
(
sxødio
))

1214 
sx1276
 = 
åue
;

1217 
i
 = 
	`lgw_°¨t
();

1218 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1219 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [main] concentrator started,Öacket canÇow beÑeceived\n");

1221 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [main] failedÅo startÅhe concentrator\n");

1222 
	`exô
(
EXIT_FAILURE
);

1226 
i
 = 
	`±hªad_¸óã
–&
thrid_up
, 
NULL
, (* (*)(*))
thªad_up
, NULL);

1227 i‡(
i
 != 0) {

1228 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [main] impossibleÅo create upstreamÅhread\n");

1229 
	`exô
(
EXIT_FAILURE
);

1231 
i
 = 
	`±hªad_¸óã
–&
thrid_down
, 
NULL
, (* (*)(*))
thªad_down
, NULL);

1232 i‡(
i
 != 0) {

1233 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [main] impossibleÅo create downstreamÅhread\n");

1234 
	`exô
(
EXIT_FAILURE
);

1236 
i
 = 
	`±hªad_¸óã
–&
thrid_jô
, 
NULL
, (* (*)(*))
thªad_jô
, NULL);

1237 i‡(
i
 != 0) {

1238 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [main] impossibleÅo create JITÅhread\n");

1239 
	`exô
(
EXIT_FAILURE
);

1241 
i
 = 
	`±hªad_¸óã
–&
thrid_timîsync
, 
NULL
, (* (*)(*))
thªad_timîsync
, NULL);

1242 i‡(
i
 != 0) {

1243 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [main] impossibleÅo create Timer SyncÅhread\n");

1244 
	`exô
(
EXIT_FAILURE
);

1248 i‡(
gps_íabÀd
 =
åue
) {

1249 
i
 = 
	`±hªad_¸óã
–&
thrid_gps
, 
NULL
, (* (*)(*))
thªad_gps
, NULL);

1250 i‡(
i
 != 0) {

1251 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [main] impossibleÅo create GPSÅhread\n");

1252 
	`exô
(
EXIT_FAILURE
);

1254 
i
 = 
	`±hªad_¸óã
–&
thrid_vÆid
, 
NULL
, (* (*)(*))
thªad_vÆid
, NULL);

1255 i‡(
i
 != 0) {

1256 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [main] impossibleÅo create validationÅhread\n");

1257 
	`exô
(
EXIT_FAILURE
);

1262 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

1263 
siga˘
.
ß_Êags
 = 0;

1264 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

1265 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

1266 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

1267 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

1270 !
exô_sig
 && !
quô_sig
) {

1272 
	`waô_ms
(1000 * 
°©_öãrvÆ
);

1275 
t
 = 
	`time
(
NULL
);

1276 
	`°r·ime
(
°©_time°amp
,  sèt_time°amp, "%F %T %Z", 
	`gmtime
(&
t
));

1279 
	`±hªad_muãx_lock
(&
mx_mós_up
);

1280 
˝_nb_rx_rcv
 = 
mós_nb_rx_rcv
;

1281 
˝_nb_rx_ok
 = 
mós_nb_rx_ok
;

1282 
˝_nb_rx_bad
 = 
mós_nb_rx_bad
;

1283 
˝_nb_rx_no¸c
 = 
mós_nb_rx_no¸c
;

1284 
˝_up_pkt_fwd
 = 
mós_up_pkt_fwd
;

1285 
˝_up_√tw‹k_byã
 = 
mós_up_√tw‹k_byã
;

1286 
˝_up_∑ylﬂd_byã
 = 
mós_up_∑ylﬂd_byã
;

1287 
˝_up_dgøm_£¡
 = 
mós_up_dgøm_£¡
;

1288 
˝_up_ack_rcv
 = 
mós_up_ack_rcv
;

1289 
mós_nb_rx_rcv
 = 0;

1290 
mós_nb_rx_ok
 = 0;

1291 
mós_nb_rx_bad
 = 0;

1292 
mós_nb_rx_no¸c
 = 0;

1293 
mós_up_pkt_fwd
 = 0;

1294 
mós_up_√tw‹k_byã
 = 0;

1295 
mós_up_∑ylﬂd_byã
 = 0;

1296 
mós_up_dgøm_£¡
 = 0;

1297 
mós_up_ack_rcv
 = 0;

1298 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1299 i‡(
˝_nb_rx_rcv
 > 0) {

1300 
rx_ok_øtio
 = ()
˝_nb_rx_ok
 / ()
˝_nb_rx_rcv
;

1301 
rx_bad_øtio
 = ()
˝_nb_rx_bad
 / ()
˝_nb_rx_rcv
;

1302 
rx_no¸c_øtio
 = ()
˝_nb_rx_no¸c
 / ()
˝_nb_rx_rcv
;

1304 
rx_ok_øtio
 = 0.0;

1305 
rx_bad_øtio
 = 0.0;

1306 
rx_no¸c_øtio
 = 0.0;

1308 i‡(
˝_up_dgøm_£¡
 > 0) {

1309 
up_ack_øtio
 = ()
˝_up_ack_rcv
 / ()
˝_up_dgøm_£¡
;

1311 
up_ack_øtio
 = 0.0;

1315 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

1316 
˝_dw_puŒ_£¡
 = 
mós_dw_puŒ_£¡
;

1317 
˝_dw_ack_rcv
 = 
mós_dw_ack_rcv
;

1318 
˝_dw_dgøm_rcv
 = 
mós_dw_dgøm_rcv
;

1319 
˝_dw_√tw‹k_byã
 = 
mós_dw_√tw‹k_byã
;

1320 
˝_dw_∑ylﬂd_byã
 = 
mós_dw_∑ylﬂd_byã
;

1321 
˝_nb_tx_ok
 = 
mós_nb_tx_ok
;

1322 
˝_nb_tx_Áû
 = 
mós_nb_tx_Áû
;

1323 
˝_nb_tx_ªque°ed
 +
mós_nb_tx_ªque°ed
;

1324 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 +
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
;

1325 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 +
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
;

1326 
˝_nb_tx_ªje˘ed_too_œã
 +
mós_nb_tx_ªje˘ed_too_œã
;

1327 
˝_nb_tx_ªje˘ed_too_óæy
 +
mós_nb_tx_ªje˘ed_too_óæy
;

1328 
˝_nb_bóc⁄_queued
 +
mós_nb_bóc⁄_queued
;

1329 
˝_nb_bóc⁄_£¡
 +
mós_nb_bóc⁄_£¡
;

1330 
˝_nb_bóc⁄_ªje˘ed
 +
mós_nb_bóc⁄_ªje˘ed
;

1331 
mós_dw_puŒ_£¡
 = 0;

1332 
mós_dw_ack_rcv
 = 0;

1333 
mós_dw_dgøm_rcv
 = 0;

1334 
mós_dw_√tw‹k_byã
 = 0;

1335 
mós_dw_∑ylﬂd_byã
 = 0;

1336 
mós_nb_tx_ok
 = 0;

1337 
mós_nb_tx_Áû
 = 0;

1338 
mós_nb_tx_ªque°ed
 = 0;

1339 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

1340 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

1341 
mós_nb_tx_ªje˘ed_too_œã
 = 0;

1342 
mós_nb_tx_ªje˘ed_too_óæy
 = 0;

1343 
mós_nb_bóc⁄_queued
 = 0;

1344 
mós_nb_bóc⁄_£¡
 = 0;

1345 
mós_nb_bóc⁄_ªje˘ed
 = 0;

1346 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

1347 i‡(
˝_dw_puŒ_£¡
 > 0) {

1348 
dw_ack_øtio
 = ()
˝_dw_ack_rcv
 / ()
˝_dw_puŒ_£¡
;

1350 
dw_ack_øtio
 = 0.0;

1354 i‡(
gps_íabÀd
 =
åue
) {

1355 
	`±hªad_muãx_lock
(&
mx_mós_gps
);

1356 
co‹d_ok
 = 
gps_co‹d_vÆid
;

1357 
˝_gps_co‹d
 = 
mós_gps_co‹d
;

1358 
	`±hªad_muãx_u∆ock
(&
mx_mós_gps
);

1362 i‡(
gps_Áke_íabÀ
 =
åue
) {

1363 
˝_gps_co‹d
 = 
ª„ªn˚_co‹d
;

1367 
	`¥ötf
("\n################## Rï‹à©: %†##################\n", 
°©_time°amp
);

1368 
	`¥ötf
("### [UPSTREAM] ###\n");

1369 
	`¥ötf
("# RFÖackë†ª˚ived by c⁄˚¡øt‹: %u\n", 
˝_nb_rx_rcv
);

1370 
	`¥ötf
("# CRC_OK: %.2f%%, CRC_FAIL: %.2f%%, NO_CRC: %.2f%%\n", 100.0 * 
rx_ok_øtio
, 100.0 * 
rx_bad_øtio
, 100.0 * 
rx_no¸c_øtio
);

1371 
	`¥ötf
("# RFÖackë†f‹w¨ded: %u (%u byãs)\n", 
˝_up_pkt_fwd
, 
˝_up_∑ylﬂd_byã
);

1372 
	`¥ötf
("# PUSH_DATA d©agøm†£¡: %u (%u byãs)\n", 
˝_up_dgøm_£¡
, 
˝_up_√tw‹k_byã
);

1373 
	`¥ötf
("# PUSH_DATAácknowÀdged: %.2f%%\n", 100.0 * 
up_ack_øtio
);

1374 
	`¥ötf
("### [DOWNSTREAM] ###\n");

1375 
	`¥ötf
("# PULL_DATA sít: %u (%.2f%%ácknowÀdged)\n", 
˝_dw_puŒ_£¡
, 100.0 * 
dw_ack_øtio
);

1376 
	`¥ötf
("# PULL_RESP(⁄£Ëd©agøm†ª˚ived: %u (%u byãs)\n", 
˝_dw_dgøm_rcv
, 
˝_dw_√tw‹k_byã
);

1377 
	`¥ötf
("# RFÖackë†£¡Åÿc⁄˚¡øt‹: %u (%u byãs)\n", (
˝_nb_tx_ok
+
˝_nb_tx_Áû
), 
˝_dw_∑ylﬂd_byã
);

1378 
	`¥ötf
("# TXÉº‹s: %u\n", 
˝_nb_tx_Áû
);

1379 i‡(
˝_nb_tx_ªque°ed
 != 0 ) {

1380 
	`¥ötf
("# TXÑeje˘ed (cﬁlisi⁄Öackë): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_collision_packet);

1381 
	`¥ötf
("# TXÑeje˘ed (cﬁlisi⁄ bóc⁄): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_collision_beacon);

1382 
	`¥ötf
("# TXÑeje˘ed (toÿœã): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_too_œã
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_too_late);

1383 
	`¥ötf
("# TXÑeje˘ed (toÿóæy): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_too_óæy
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_too_early);

1385 
	`¥ötf
("# BEACON queued: %u\n", 
˝_nb_bóc⁄_queued
);

1386 
	`¥ötf
("# BEACON síàsÿÁr: %u\n", 
˝_nb_bóc⁄_£¡
);

1387 
	`¥ötf
("# BEACONÑeje˘ed: %u\n", 
˝_nb_bóc⁄_ªje˘ed
);

1388 
	`¥ötf
("### [JIT] ###\n");

1391 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

1392 
i
 = 
	`lgw_gë_åig˙t
(&
åig_t°amp
);

1393 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

1394 i‡(
i
 !
LGW_HAL_SUCCESS
) {

1395 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: # SX1301Åime (PPS): unknown\n");

1397 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: # SX1301Åimê(PPS): %u\n", 
åig_t°amp
);

1399 
	`jô_¥öt_queue
 (&
jô_queue
, 
Ál£
, 
DEBUG_LOG
);

1400 
	`MSG_DEBUG
(
DEBUG_GPS
, "### [GPS] ###\n");

1401 i‡(
gps_íabÀd
 =
åue
) {

1403 i‡(
gps_ªf_vÆid
 =
åue
) {

1404 
	`MSG_DEBUG
(
DEBUG_GPS
, "# VÆidÅimêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
));

1406 
	`MSG_DEBUG
(
DEBUG_GPS
, "# InvÆidÅimêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
));

1408 i‡(
co‹d_ok
 =
åue
) {

1409 
	`MSG_DEBUG
(
DEBUG_GPS
, "# GPS co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

1411 
	`MSG_DEBUG
(
DEBUG_GPS
, "#Ço valid GPS coordinatesávailable yet\n");

1413 } i‡(
gps_Áke_íabÀ
 =
åue
) {

1414 
	`MSG_DEBUG
(
DEBUG_GPS
, "# GPS *FAKE* co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

1416 
	`MSG_DEBUG
(
DEBUG_GPS
, "# GPS sync is disabled\n");

1418 
	`MSG_DEBUG
(
DEBUG_GPS
, "##### END #####\n");

1421 
	`±hªad_muãx_lock
(&
mx_°©_ªp
);

1422 i‡(((
gps_íabÀd
 =
åue
Ë&& (
co‹d_ok
 =åue)Ë|| (
gps_Áke_íabÀ
 ==Årue)) {

1423 
	`¢¥ötf
(
°©us_ªp‹t
, 
STATUS_SIZE
, "\"°©\":{\"time\":\"%s\",\"œti\":%.5f,\"l⁄g\":%.5f,\"Æti\":%i,\"rxnb\":%u,\"rxok\":%u,\"rxfw\":%u,\"ackr\":%.1f,\"dwnb\":%u,\"txnb\":%u}", 
°©_time°amp
, 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
, 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
, 
˝_nb_tx_ok
);

1425 
	`¢¥ötf
(
°©us_ªp‹t
, 
STATUS_SIZE
, "\"°©\":{\"time\":\"%s\",\"rxnb\":%u,\"rxok\":%u,\"rxfw\":%u,\"ackr\":%.1f,\"dwnb\":%u,\"txnb\":%u}", 
°©_time°amp
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
, 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
, 
˝_nb_tx_ok
);

1427 
ªp‹t_ªady
 = 
åue
;

1428 
	`±hªad_muãx_u∆ock
(&
mx_°©_ªp
);

1432 
	`±hªad_joö
(
thrid_up
, 
NULL
);

1433 
	`±hªad_ˇn˚l
(
thrid_down
);

1434 
	`±hªad_ˇn˚l
(
thrid_jô
);

1435 
	`±hªad_ˇn˚l
(
thrid_timîsync
);

1436 i‡(
gps_íabÀd
 =
åue
) {

1437 
	`±hªad_ˇn˚l
(
thrid_gps
);

1438 
	`±hªad_ˇn˚l
(
thrid_vÆid
);

1440 
i
 = 
	`lgw_gps_dißbÀ
(
gps_ây_fd
);

1441 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1442 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: GPS closed successfully\n");

1444 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: failedÅo close GPS successfully\n");

1449 i‡(
exô_sig
) {

1451 
	`shutdown
(
sock_up
, 
SHUT_RDWR
);

1452 
	`shutdown
(
sock_down
, 
SHUT_RDWR
);

1454 
i
 = 
	`lgw_°›
();

1455 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1456 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: concentrator stopped successfully\n");

1458 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: failedÅo stop concentrator successfully\n");

1462 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: ExitingÖacket forwarderÖrogram\n");

1463 
	`exô
(
EXIT_SUCCESS
);

1464 
	}
}

1469 
	$thªad_up
() {

1470 
i
, 
j
;

1471 
pkt_ö_dgøm
;

1474 
lgw_pkt_rx_s
 
rxpkt
[
NB_PKT_MAX
];

1475 
lgw_pkt_rx_s
 *
p
;

1476 
nb_pkt
;

1479 
boﬁ
 
ªf_ok
 = 
Ál£
;

1480 
åef
 
loˇl_ªf
;

1483 
uöt8_t
 
buff_up
[
TX_BUFF_SIZE
];

1484 
buff_ödex
;

1485 
uöt8_t
 
buff_ack
[32];

1488 
uöt8_t
 
tokí_h
;

1489 
uöt8_t
 
tokí_l
;

1492 
time•ec
 
£nd_time
;

1493 
time•ec
 
ªcv_time
;

1496 
time•ec
 
pkt_utc_time
;

1497 
tm
 * 
x
;

1498 
time•ec
 
pkt_gps_time
;

1499 
uöt64_t
 
pkt_gps_time_ms
;

1502 
boﬁ
 
£nd_ªp‹t
 = 
Ál£
;

1505 
uöt32_t
 
mŸe_addr
 = 0;

1506 
uöt16_t
 
mŸe_f˙t
 = 0;

1509 
i
 = 
	`£tsock›t
(
sock_up
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
push_timeout_hÆf
, Öush_timeout_half);

1510 i‡(
i
 != 0) {

1511 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1512 
	`exô
(
EXIT_FAILURE
);

1516 
buff_up
[0] = 
PROTOCOL_VERSION
;

1517 
buff_up
[3] = 
PKT_PUSH_DATA
;

1518 *(
uöt32_t
 *)(
buff_up
 + 4Ë
√t_mac_h
;

1519 *(
uöt32_t
 *)(
buff_up
 + 8Ë
√t_mac_l
;

1521 !
exô_sig
 && !
quô_sig
) {

1524 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

1525 
nb_pkt
 = 
	`lgw_ª˚ive
(
NB_PKT_MAX
, 
rxpkt
);

1526 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

1527 i‡(
nb_pkt
 =
LGW_HAL_ERROR
) {

1528 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] failedÖacket fetch,Éxiting\n");

1529 
	`exô
(
EXIT_FAILURE
);

1533 
£nd_ªp‹t
 = 
ªp‹t_ªady
;

1537 i‡((
nb_pkt
 =0Ë&& (
£nd_ªp‹t
 =
Ál£
)) {

1538 
	`waô_ms
(
FETCH_SLEEP_MS
);

1543 i‡((
nb_pkt
 > 0Ë&& (
gps_íabÀd
 =
åue
)) {

1544 
	`±hªad_muãx_lock
(&
mx_timîef
);

1545 
ªf_ok
 = 
gps_ªf_vÆid
;

1546 
loˇl_ªf
 = 
time_ª„ªn˚_gps
;

1547 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

1549 
ªf_ok
 = 
Ál£
;

1553 
tokí_h
 = (
uöt8_t
)
	`ønd
();

1554 
tokí_l
 = (
uöt8_t
)
	`ønd
();

1555 
buff_up
[1] = 
tokí_h
;

1556 
buff_up
[2] = 
tokí_l
;

1557 
buff_ödex
 = 12;

1560 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"{\"rxpk\":[", 9);

1561 
buff_ödex
 += 9;

1564 
pkt_ö_dgøm
 = 0;

1565 
i
=0; i < 
nb_pkt
; ++i) {

1566 
p
 = &
rxpkt
[
i
];

1570 
mŸe_addr
 = 
p
->
∑ylﬂd
[1];

1571 
mŸe_addr
 |
p
->
∑ylﬂd
[2] << 8;

1572 
mŸe_addr
 |
p
->
∑ylﬂd
[3] << 16;

1573 
mŸe_addr
 |
p
->
∑ylﬂd
[4] << 24;

1575 
mŸe_f˙t
 = 
p
->
∑ylﬂd
[6];

1576 
mŸe_f˙t
 |
p
->
∑ylﬂd
[7] << 8;

1579 
	`±hªad_muãx_lock
(&
mx_mós_up
);

1580 
mós_nb_rx_rcv
 += 1;

1581 
p
->
°©us
) {

1582 
STAT_CRC_OK
:

1583 
mós_nb_rx_ok
 += 1;

1584 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Re˚ivedÖkà‰om mŸe: %08X (f˙t=%u)\n", 
mŸe_addr
, 
mŸe_f˙t
 );

1585 i‡(!
fwd_vÆid_pkt
) {

1586 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1590 
STAT_CRC_BAD
:

1591 
mós_nb_rx_bad
 += 1;

1592 i‡(!
fwd_îr‹_pkt
) {

1593 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1597 
STAT_NO_CRC
:

1598 
mós_nb_rx_no¸c
 += 1;

1599 i‡(!
fwd_no¸c_pkt
) {

1600 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1605 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [up]Ñe˚ivedÖackë wôh unknow¿°©u†%u (sizê%u, moduœti⁄ %u, BW %u, DR %u, RSSI %.1f)\n", 
p
->
°©us
,Ö->
size
,Ö->
moduœti⁄
,Ö->
b™dwidth
,Ö->
d©¨©e
,Ö->
rssi
);

1606 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1610 
mós_up_pkt_fwd
 += 1;

1611 
mós_up_∑ylﬂd_byã
 +
p
->
size
;

1612 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1615 i‡(
pkt_ö_dgøm
 == 0) {

1616 
buff_up
[
buff_ödex
] = '{';

1617 ++
buff_ödex
;

1619 
buff_up
[
buff_ödex
] = ',';

1620 
buff_up
[
buff_ödex
+1] = '{';

1621 
buff_ödex
 += 2;

1625 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "\"tm°\":%u", 
p
->
cou¡_us
);

1626 i‡(
j
 > 0) {

1627 
buff_ödex
 +
j
;

1629 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1630 
	`exô
(
EXIT_FAILURE
);

1634 i‡(
ªf_ok
 =
åue
) {

1636 
j
 = 
	`lgw_˙t2utc
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_utc_time
);

1637 i‡(
j
 =
LGW_GPS_SUCCESS
) {

1639 
x
 = 
	`gmtime
(&(
pkt_utc_time
.
tv_£c
));

1640 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"time\":\"%04i-%02i-%02iT%02i:%02i:%02i.%06liZ\"", (
x
->
tm_yór
)+1900, (x->
tm_m⁄
)+1, x->
tm_mday
, x->
tm_hour
, x->
tm_mö
, x->
tm_£c
, (
pkt_utc_time
.
tv_n£c
)/1000);

1641 i‡(
j
 > 0) {

1642 
buff_ödex
 +
j
;

1644 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1645 
	`exô
(
EXIT_FAILURE
);

1649 
j
 = 
	`lgw_˙t2gps
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_gps_time
);

1650 i‡(
j
 =
LGW_GPS_SUCCESS
) {

1651 
pkt_gps_time_ms
 = 
pkt_gps_time
.
tv_£c
 * 1E3 +Ökt_gps_time.
tv_n£c
 / 1E6;

1652 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_index, ",\"tmms\":%llu",

1653 
pkt_gps_time_ms
);

1654 i‡(
j
 > 0) {

1655 
buff_ödex
 +
j
;

1657 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1658 
	`exô
(
EXIT_FAILURE
);

1664 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"ch™\":%1u,\"rfch\":%1u,\"‰eq\":%.6lf", 
p
->
if_chaö
,Ö->
rf_chaö
, ((Ì->
‰eq_hz
 / 1e6));

1665 i‡(
j
 > 0) {

1666 
buff_ödex
 +
j
;

1668 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1669 
	`exô
(
EXIT_FAILURE
);

1673 
p
->
°©us
) {

1674 
STAT_CRC_OK
:

1675 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":1", 9);

1676 
buff_ödex
 += 9;

1678 
STAT_CRC_BAD
:

1679 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":-1", 10);

1680 
buff_ödex
 += 10;

1682 
STAT_NO_CRC
:

1683 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":0", 9);

1684 
buff_ödex
 += 9;

1687 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up]ÑeceivedÖacket with unknown status\n");

1688 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":?", 9);

1689 
buff_ödex
 += 9;

1690 
	`exô
(
EXIT_FAILURE
);

1694 i‡(
p
->
moduœti⁄
 =
MOD_LORA
) {

1695 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"LORA\"", 14);

1696 
buff_ödex
 += 14;

1699 
p
->
d©¨©e
) {

1700 
DR_LORA_SF7
:

1701 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF7", 12);

1702 
buff_ödex
 += 12;

1704 
DR_LORA_SF8
:

1705 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF8", 12);

1706 
buff_ödex
 += 12;

1708 
DR_LORA_SF9
:

1709 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF9", 12);

1710 
buff_ödex
 += 12;

1712 
DR_LORA_SF10
:

1713 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF10", 13);

1714 
buff_ödex
 += 13;

1716 
DR_LORA_SF11
:

1717 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF11", 13);

1718 
buff_ödex
 += 13;

1720 
DR_LORA_SF12
:

1721 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF12", 13);

1722 
buff_ödex
 += 13;

1725 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up]ÜoraÖacket with unknown datarate\n");

1726 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF?", 12);

1727 
buff_ödex
 += 12;

1728 
	`exô
(
EXIT_FAILURE
);

1730 
p
->
b™dwidth
) {

1731 
BW_125KHZ
:

1732 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW125\"", 6);

1733 
buff_ödex
 += 6;

1735 
BW_250KHZ
:

1736 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW250\"", 6);

1737 
buff_ödex
 += 6;

1739 
BW_500KHZ
:

1740 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW500\"", 6);

1741 
buff_ödex
 += 6;

1744 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up]ÜoraÖacket with unknown bandwidth\n");

1745 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW?\"", 4);

1746 
buff_ödex
 += 4;

1747 
	`exô
(
EXIT_FAILURE
);

1751 
p
->
codî©e
) {

1752 
CR_LORA_4_5
:

1753 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/5\"", 13);

1754 
buff_ödex
 += 13;

1756 
CR_LORA_4_6
:

1757 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/6\"", 13);

1758 
buff_ödex
 += 13;

1760 
CR_LORA_4_7
:

1761 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/7\"", 13);

1762 
buff_ödex
 += 13;

1764 
CR_LORA_4_8
:

1765 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/8\"", 13);

1766 
buff_ödex
 += 13;

1769 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"OFF\"", 13);

1770 
buff_ödex
 += 13;

1773 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up]ÜoraÖacket with unknown coderate\n");

1774 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"?\"", 11);

1775 
buff_ödex
 += 11;

1776 
	`exô
(
EXIT_FAILURE
);

1780 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"l¢r\":%.1f", 
p
->
¢r
);

1781 i‡(
j
 > 0) {

1782 
buff_ödex
 +
j
;

1784 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1785 
	`exô
(
EXIT_FAILURE
);

1787 } i‡(
p
->
moduœti⁄
 =
MOD_FSK
) {

1788 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"FSK\"", 13);

1789 
buff_ödex
 += 13;

1792 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"d©r\":%u", 
p
->
d©¨©e
);

1793 i‡(
j
 > 0) {

1794 
buff_ödex
 +
j
;

1796 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1797 
	`exô
(
EXIT_FAILURE
);

1800 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up]ÑeceivedÖacket with unknown modulation\n");

1801 
	`exô
(
EXIT_FAILURE
);

1805 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"rssi\":%.0f,\"size\":%u", 
p
->
rssi
,Ö->
size
);

1806 i‡(
j
 > 0) {

1807 
buff_ödex
 +
j
;

1809 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1810 
	`exô
(
EXIT_FAILURE
);

1814 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"data\":\"", 9);

1815 
buff_ödex
 += 9;

1816 
j
 = 
	`bö_to_b64
(
p
->
∑ylﬂd
,Ö->
size
, (*)(
buff_up
 + 
buff_ödex
), 341);

1817 i‡(
j
>=0) {

1818 
buff_ödex
 +
j
;

1820 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] bö_to_b64 faûedÜöê%u\n", (
__LINE__
 - 5));

1821 
	`exô
(
EXIT_FAILURE
);

1823 
buff_up
[
buff_ödex
] = '"';

1824 ++
buff_ödex
;

1827 
buff_up
[
buff_ödex
] = '}';

1828 ++
buff_ödex
;

1829 ++
pkt_ö_dgøm
;

1833 i‡(
pkt_ö_dgøm
 == 0) {

1834 i‡(
£nd_ªp‹t
 =
åue
) {

1836 
buff_ödex
 -= 8;

1843 
buff_up
[
buff_ödex
] = ']';

1844 ++
buff_ödex
;

1846 i‡(
£nd_ªp‹t
 =
åue
) {

1847 
buff_up
[
buff_ödex
] = ',';

1848 ++
buff_ödex
;

1853 i‡(
£nd_ªp‹t
 =
åue
) {

1854 
	`±hªad_muãx_lock
(&
mx_°©_ªp
);

1855 
ªp‹t_ªady
 = 
Ál£
;

1856 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "%s", 
°©us_ªp‹t
);

1857 
	`±hªad_muãx_u∆ock
(&
mx_°©_ªp
);

1858 i‡(
j
 > 0) {

1859 
buff_ödex
 +
j
;

1861 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 5));

1862 
	`exô
(
EXIT_FAILURE
);

1867 
buff_up
[
buff_ödex
] = '}';

1868 ++
buff_ödex
;

1869 
buff_up
[
buff_ödex
] = 0;

1871 
	`Ârötf
(
°dout
, "%s\n", (*)(
buff_up
 + 12));

1873 
	`£nd
(
sock_up
, (*)
buff_up
, 
buff_ödex
, 0);

1874 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

1875 
	`±hªad_muãx_lock
(&
mx_mós_up
);

1876 
mós_up_dgøm_£¡
 += 1;

1877 
mós_up_√tw‹k_byã
 +
buff_ödex
;

1880 
i
=0; i<2; ++i) {

1881 
j
 = 
	`ªcv
(
sock_up
, (*)
buff_ack
,  buff_ack, 0);

1882 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

1883 i‡(
j
 == -1) {

1884 i‡(
î∫o
 =
EAGAIN
) {

1889 } i‡((
j
 < 4Ë|| (
buff_ack
[0] !
PROTOCOL_VERSION
Ë|| (buff_ack[3] !
PKT_PUSH_ACK
)) {

1892 } i‡((
buff_ack
[1] !
tokí_h
Ë|| (buff_ack[2] !
tokí_l
)) {

1896 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [up] PUSH_ACKÑe˚ived i¿%òms\n", ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

1897 
mós_up_ack_rcv
 += 1;

1901 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1903 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: End of upstreamÅhread\n");

1904 
	}
}

1909 
	$thªad_down
() {

1910 
i
;

1913 
lgw_pkt_tx_s
 
txpkt
;

1914 
boﬁ
 
£¡_immedüã
 = 
Ál£
;

1917 
time•ec
 
£nd_time
;

1918 
time•ec
 
ªcv_time
;

1921 
uöt8_t
 
buff_down
[1000];

1922 
uöt8_t
 
buff_ªq
[12];

1923 
msg_Àn
;

1926 
uöt8_t
 
tokí_h
;

1927 
uöt8_t
 
tokí_l
;

1928 
boﬁ
 
ªq_ack
 = 
Ál£
;

1931 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

1932 
JSON_Obje˘
 *
txpk_obj
 = 
NULL
;

1933 
JSON_VÆue
 *
vÆ
 = 
NULL
;

1934 c⁄° *
°r
;

1935 
x0
, 
x1
;

1936 
uöt64_t
 
x2
;

1937 
x3
, 
x4
;

1940 
åef
 
loˇl_ªf
;

1941 
time•ec
 
gps_tx
;

1944 
lgw_pkt_tx_s
 
bóc⁄_pkt
;

1945 
uöt8_t
 
bóc⁄_ch™
;

1946 
uöt8_t
 
bóc⁄_lo›
;

1947 
size_t
 
bóc⁄_RFU1_size
 = 0;

1948 
size_t
 
bóc⁄_RFU2_size
 = 0;

1949 
uöt8_t
 
bóc⁄_pyld_idx
 = 0;

1950 
time_t
 
diff_bóc⁄_time
;

1951 
time•ec
 
√xt_bóc⁄_gps_time
;

1952 
time•ec
 
œ°_bóc⁄_gps_time
;

1953 
ªåy
;

1956 
öt32_t
 
fõld_œtôude
;

1957 
öt32_t
 
fõld_l⁄gôude
;

1958 
uöt16_t
 
fõld_¸c1
, 
fõld_¸c2
;

1961 
uöt32_t
 
autoquô_˙t
 = 0;

1964 
timevÆ
 
cuºít_unix_time
;

1965 
timevÆ
 
cuºít_c⁄˚¡øt‹_time
;

1966 
jô_îr‹_e
 
jô_ªsu…
 = 
JIT_ERROR_OK
;

1967 
jô_pkt_ty≥_e
 
dow∆ök_ty≥
;

1970 
i
 = 
	`£tsock›t
(
sock_down
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
puŒ_timeout
, Öull_timeout);

1971 i‡(
i
 != 0) {

1972 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: [down] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1973 
	`exô
(
EXIT_FAILURE
);

1977 
buff_ªq
[0] = 
PROTOCOL_VERSION
;

1978 
buff_ªq
[3] = 
PKT_PULL_DATA
;

1979 *(
uöt32_t
 *)(
buff_ªq
 + 4Ë
√t_mac_h
;

1980 *(
uöt32_t
 *)(
buff_ªq
 + 8Ë
√t_mac_l
;

1983 
œ°_bóc⁄_gps_time
.
tv_£c
 = 0;

1984 
œ°_bóc⁄_gps_time
.
tv_n£c
 = 0;

1987 
bóc⁄_pkt
.
tx_mode
 = 
ON_GPS
;

1988 
bóc⁄_pkt
.
rf_chaö
 = 0;

1989 
bóc⁄_pkt
.
rf_powî
 = 
bóc⁄_powî
;

1990 
bóc⁄_pkt
.
moduœti⁄
 = 
MOD_LORA
;

1991 
bóc⁄_bw_hz
) {

1993 
bóc⁄_pkt
.
b™dwidth
 = 
BW_125KHZ
;

1996 
bóc⁄_pkt
.
b™dwidth
 = 
BW_500KHZ
;

2000 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: unsupported bandwidth for beacon\n");

2001 
	`exô
(
EXIT_FAILURE
);

2003 
bóc⁄_d©¨©e
) {

2005 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF8
;

2006 
bóc⁄_RFU1_size
 = 1;

2007 
bóc⁄_RFU2_size
 = 3;

2010 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF9
;

2011 
bóc⁄_RFU1_size
 = 2;

2012 
bóc⁄_RFU2_size
 = 0;

2015 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF10
;

2016 
bóc⁄_RFU1_size
 = 3;

2017 
bóc⁄_RFU2_size
 = 1;

2020 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF12
;

2021 
bóc⁄_RFU1_size
 = 5;

2022 
bóc⁄_RFU2_size
 = 3;

2026 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: unsupported datarate for beacon\n");

2027 
	`exô
(
EXIT_FAILURE
);

2029 
bóc⁄_pkt
.
size
 = 
bóc⁄_RFU1_size
 + 4 + 2 + 7 + 
bóc⁄_RFU2_size
 + 2;

2030 
bóc⁄_pkt
.
codî©e
 = 
CR_LORA_4_5
;

2031 
bóc⁄_pkt
.
övît_pﬁ
 = 
Ál£
;

2032 
bóc⁄_pkt
.
¥ómbÀ
 = 10;

2033 
bóc⁄_pkt
.
no_¸c
 = 
åue
;

2034 
bóc⁄_pkt
.
no_hódî
 = 
åue
;

2037 
i
 = 0; i < ()
bóc⁄_RFU1_size
; i++) {

2038 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

2042 
bóc⁄_pyld_idx
 += 4;

2043 
bóc⁄_pyld_idx
 += 2;

2046 
fõld_œtôude
 = (
öt32_t
)((
ª„ªn˚_co‹d
.
œt
 / 90.0) * ()(1<<23));

2047 i‡(
fõld_œtôude
 > (
öt32_t
)0x007FFFFF) {

2048 
fõld_œtôude
 = (
öt32_t
)0x007FFFFF;

2049 } i‡(
fõld_œtôude
 < (
öt32_t
)0xFF800000) {

2050 
fõld_œtôude
 = (
öt32_t
)0xFF800000;

2052 
fõld_l⁄gôude
 = (
öt32_t
)((
ª„ªn˚_co‹d
.
l⁄
 / 180.0) * ()(1<<23));

2053 i‡(
fõld_l⁄gôude
 > (
öt32_t
)0x007FFFFF) {

2054 
fõld_l⁄gôude
 = (
öt32_t
)0x007FFFFF;

2055 } i‡(
fõld_l⁄gôude
 < (
öt32_t
)0xFF800000) {

2056 
fõld_l⁄gôude
 = (
öt32_t
)0xFF800000;

2060 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 
bóc⁄_öfodesc
;

2061 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_œtôude
;

2062 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 8);

2063 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 16);

2064 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_l⁄gôude
;

2065 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 8);

2066 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 16);

2069 
i
 = 0; i < ()
bóc⁄_RFU2_size
; i++) {

2070 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

2074 
fõld_¸c2
 = 
	`¸c16
((
bóc⁄_pkt
.
∑ylﬂd
 + 6 + 
bóc⁄_RFU1_size
), 7 + 
bóc⁄_RFU2_size
);

2075 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c2
;

2076 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c2
 >> 8);

2079 
	`jô_queue_öô
(&
jô_queue
);

2081 !
exô_sig
 && !
quô_sig
) {

2084 i‡((
autoquô_thªshﬁd
 > 0Ë&& (
autoquô_˙t
 >=áutoquit_threshold)) {

2085 
exô_sig
 = 
åue
;

2086 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down]Åhêœ° %u PULL_DATA wîênŸ ACKed,Éxôögáµliˇti⁄\n", 
autoquô_thªshﬁd
);

2091 
tokí_h
 = (
uöt8_t
)
	`ønd
();

2092 
tokí_l
 = (
uöt8_t
)
	`ønd
();

2093 
buff_ªq
[1] = 
tokí_h
;

2094 
buff_ªq
[2] = 
tokí_l
;

2097 
	`£nd
(
sock_down
, (*)
buff_ªq
,  buff_req, 0);

2098 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

2099 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2100 
mós_dw_puŒ_£¡
 += 1;

2101 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2102 
ªq_ack
 = 
Ál£
;

2103 
autoquô_˙t
++;

2106 
ªcv_time
 = 
£nd_time
;

2107 ()
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
Ë< 
kì∑live_time
) {

2110 
msg_Àn
 = 
	`ªcv
(
sock_down
, (*)
buff_down
, ( buff_down)-1, 0);

2111 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

2114 
bóc⁄_lo›
 = 
JIT_NUM_BEACON_IN_QUEUE
 - 
jô_queue
.
num_bóc⁄
;

2115 
ªåy
 = 0;

2116 
bóc⁄_lo›
 && (
bóc⁄_≥riod
 != 0)) {

2117 
	`±hªad_muãx_lock
(&
mx_timîef
);

2119 i‡((
gps_ªf_vÆid
 =
åue
Ë&& (
xèl_c‹ª˘_ok
 ==Årue)) {

2124 i‡(
œ°_bóc⁄_gps_time
.
tv_£c
 == 0) {

2126 
diff_bóc⁄_time
 = 
time_ª„ªn˚_gps
.
gps
.
tv_£c
 % ((
time_t
)
bóc⁄_≥riod
);

2127 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
time_ª„ªn˚_gps
.
gps
.tv_sec +

2128 ((
time_t
)
bóc⁄_≥riod
 - 
diff_bóc⁄_time
);

2131 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
œ°_bóc⁄_gps_time
.tv_£¯+ 
bóc⁄_≥riod
;

2134 
√xt_bóc⁄_gps_time
.
tv_£c
 +(
ªåy
 * 
bóc⁄_≥riod
);

2135 
√xt_bóc⁄_gps_time
.
tv_n£c
 = 0;

2137 #i‡
DEBUG_BEACON


2139 
time_t
 
time_unix
;

2141 
time_unix
 = 
time_ª„ªn˚_gps
.
gps
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2142 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-now : %s", 
	`˘ime
(&
time_unix
));

2143 
time_unix
 = 
œ°_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2144 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-œ°: %s", 
	`˘ime
(&
time_unix
));

2145 
time_unix
 = 
√xt_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2146 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-√xt: %s", 
	`˘ime
(&
time_unix
));

2151 
	`lgw_gps2˙t
(
time_ª„ªn˚_gps
, 
√xt_bóc⁄_gps_time
, &(
bóc⁄_pkt
.
cou¡_us
));

2152 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2155 i‡(
bóc⁄_‰eq_nb
 > 1) {

2156 
bóc⁄_ch™
 = (
√xt_bóc⁄_gps_time
.
tv_£c
 / 
bóc⁄_≥riod
Ë% 
bóc⁄_‰eq_nb
;

2158 
bóc⁄_ch™
 = 0;

2161 
bóc⁄_pkt
.
‰eq_hz
 = 
bóc⁄_‰eq_hz
 + (
bóc⁄_ch™
 * 
bóc⁄_‰eq_°ï
);

2164 
bóc⁄_pyld_idx
 = 
bóc⁄_RFU1_size
;

2165 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
√xt_bóc⁄_gps_time
.
tv_£c
;

2166 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 8);

2167 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 16);

2168 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 24);

2171 
fõld_¸c1
 = 
	`¸c16
(
bóc⁄_pkt
.
∑ylﬂd
, 4 + 
bóc⁄_RFU1_size
);

2172 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c1
;

2173 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c1
 >> 8);

2176 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

2177 
	`gë_c⁄˚¡øt‹_time
(&
cuºít_c⁄˚¡øt‹_time
, 
cuºít_unix_time
);

2178 
jô_ªsu…
 = 
	`jô_íqueue
(&
jô_queue
, &
cuºít_c⁄˚¡øt‹_time
, &
bóc⁄_pkt
, 
JIT_PKT_TYPE_BEACON
);

2179 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2181 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2182 
mós_nb_bóc⁄_queued
 += 1;

2183 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2186 
bóc⁄_lo›
--;

2187 
ªåy
 = 0;

2188 
œ°_bóc⁄_gps_time
.
tv_£c
 = 
√xt_bóc⁄_gps_time
.tv_sec;

2191 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ queued (cou¡_us=%u, fªq_hz=%u, size=%u):\n", 
bóc⁄_pkt
.
cou¡_us
, bóc⁄_pkt.
‰eq_hz
, bóc⁄_pkt.
size
);

2192 
	`MSG
( " => " );

2193 
i
 = 0; i < 
bóc⁄_pkt
.
size
; ++i) {

2194 
	`MSG
("%02X ", 
bóc⁄_pkt
.
∑ylﬂd
[
i
]);

2196 
	`MSG
("\n");

2198 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--> bóc⁄ queuög faûed wôh %d\n", 
jô_ªsu…
);

2200 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2201 i‡(
jô_ªsu…
 !
JIT_ERROR_COLLISION_BEACON
) {

2202 
mós_nb_bóc⁄_ªje˘ed
 += 1;

2204 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2208 
ªåy
++;

2209 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--> bóc⁄ queuögÑëry=%d\n", 
ªåy
);

2212 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2218 i‡(
msg_Àn
 == -1) {

2224 i‡((
msg_Àn
 < 4Ë|| (
buff_down
[0] !
PROTOCOL_VERSION
Ë|| ((buff_down[3] !
PKT_PULL_RESP
Ë&& (buff_down[3] !
PKT_PULL_ACK
))) {

2225 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] ignoring invalidÖacketÜen=%d,Örotocol_version=%d, id=%d\n",

2226 
msg_Àn
, 
buff_down
[0], buff_down[3]);

2231 i‡(
buff_down
[3] =
PKT_PULL_ACK
) {

2232 i‡((
buff_down
[1] =
tokí_h
Ë&& (buff_down[2] =
tokí_l
)) {

2233 i‡(
ªq_ack
) {

2234 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down] duplicate ACKÑeceived :)\n");

2236 
ªq_ack
 = 
åue
;

2237 
autoquô_˙t
 = 0;

2238 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2239 
mós_dw_ack_rcv
 += 1;

2240 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2241 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down] PULL_ACKÑe˚ived i¿%òms\n", ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

2244 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down]Ñeceived out-of-sync ACK\n");

2250 
buff_down
[
msg_Àn
] = 0;

2251 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down] PULL_RESPÑe˚ived -Åokí[%d:%d] :)\n", 
buff_down
[1], buff_down[2]);

2252 
	`Ârötf
(
°dout
, "%s\n", (*)(
buff_down
 + 4));

2255 
	`mem£t
(&
txpkt
, 0, Åxpkt);

2256 
roŸ_vÆ
 = 
	`js⁄_∑r£_°rög_wôh_commíts
((c⁄° *)(
buff_down
 + 4));

2257 i‡(
roŸ_vÆ
 =
NULL
) {

2258 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] invalid JSON, TXáborted\n");

2263 
txpk_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), "txpk");

2264 i‡(
txpk_obj
 =
NULL
) {

2265 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço \"txpk\" object in JSON, TXáborted\n");

2266 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2271 
i
 = 
	`js⁄_obje˘_gë_boﬁón
(
txpk_obj
,"imme");

2272 i‡(
i
 == 1) {

2274 
£¡_immedüã
 = 
åue
;

2275 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
;

2276 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down]áÖacket will be sent in \"immediate\" mode\n");

2278 
£¡_immedüã
 = 
Ál£
;

2279 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"tmst");

2280 i‡(
vÆ
 !
NULL
) {

2282 
txpkt
.
cou¡_us
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2285 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
;

2288 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
, "tmms");

2289 i‡(
vÆ
 =
NULL
) {

2290 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.tmst\" or \"txpk.tmms\" objects in JSON, TXáborted\n");

2291 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2294 i‡(
gps_íabÀd
 =
åue
) {

2295 
	`±hªad_muãx_lock
(&
mx_timîef
);

2296 i‡(
gps_ªf_vÆid
 =
åue
) {

2297 
loˇl_ªf
 = 
time_ª„ªn˚_gps
;

2298 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2300 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2301 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço valid GPSÅimeÑeference yet, impossibleÅo sendÖacket on specific GPSÅime, TXáborted\n");

2302 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2305 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
);

2309 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] GPS disabled, impossibleÅo sendÖacket on specific GPSÅime, TXáborted\n");

2310 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2313 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
);

2318 
x2
 = (
uöt64_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2321 
x3
 = 
	`modf
(()
x2
/1E3, &
x4
);

2322 
gps_tx
.
tv_£c
 = (
time_t
)
x4
;

2323 
gps_tx
.
tv_n£c
 = ()(
x3
 * 1E9);

2326 
i
 = 
	`lgw_gps2˙t
(
loˇl_ªf
, 
gps_tx
, &(
txpkt
.
cou¡_us
));

2327 i‡(
i
 !
LGW_GPS_SUCCESS
) {

2328 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] couldÇot convert GPSÅimeÅoÅimestamp, TXáborted\n");

2329 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2332 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [down]áÖackë wû»bê£¡ o¿time°am∞vÆuê%u (ˇlcuœãd from GPSÅime)\n", 
txpkt
.
cou¡_us
);

2336 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
;

2341 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ncrc");

2342 i‡(
vÆ
 !
NULL
) {

2343 
txpkt
.
no_¸c
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

2347 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"freq");

2348 i‡(
vÆ
 =
NULL
) {

2349 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.freq\" object in JSON, TXáborted\n");

2350 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2353 
txpkt
.
‰eq_hz
 = (
uöt32_t
)(()(1.0e6Ë* 
	`js⁄_vÆue_gë_numbî
(
vÆ
));

2356 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"rfch");

2357 i‡(
vÆ
 =
NULL
) {

2358 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.rfch\" object in JSON, TXáborted\n");

2359 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2362 
txpkt
.
rf_chaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2365 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"powe");

2366 i‡(
vÆ
 !
NULL
) {

2367 
txpkt
.
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
Ë- 
™ã¬a_gaö
;

2371 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "modu");

2372 i‡(
°r
 =
NULL
) {

2373 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.modu\" object in JSON, TXáborted\n");

2374 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2377 i‡(
	`°rcmp
(
°r
, "LORA") == 0) {

2379 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

2382 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "datr");

2383 i‡(
°r
 =
NULL
) {

2384 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.datr\" object in JSON, TXáborted\n");

2385 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2388 
i
 = 
	`ssˇnf
(
°r
, "SF%2hdBW%3hd", &
x0
, &
x1
);

2389 i‡(
i
 != 2) {

2390 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] formatÉrror in \"txpk.datr\", TXáborted\n");

2391 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2394 
x0
) {

2395 7: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF7
; ;

2396 8: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF8
; ;

2397 9: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
; ;

2398 10: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF10
; ;

2399 11: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF11
; ;

2400 12: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF12
; ;

2402 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] formatÉrror in \"txpk.datr\", invalid SF, TXáborted\n");

2403 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2406 
x1
) {

2407 125: 
txpkt
.
b™dwidth
 = 
BW_125KHZ
; ;

2408 250: 
txpkt
.
b™dwidth
 = 
BW_250KHZ
; ;

2409 500: 
txpkt
.
b™dwidth
 = 
BW_500KHZ
; ;

2411 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] formatÉrror in \"txpk.datr\", invalid BW, TXáborted\n");

2412 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2417 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "codr");

2418 i‡(
°r
 =
NULL
) {

2419 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.codr\" object in json, TXáborted\n");

2420 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2423 i‡(
	`°rcmp
(
°r
, "4/5"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

2424 i‡(
	`°rcmp
(
°r
, "4/6"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

2425 i‡(
	`°rcmp
(
°r
, "2/3"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

2426 i‡(
	`°rcmp
(
°r
, "4/7"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_7
;

2427 i‡(
	`°rcmp
(
°r
, "4/8"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

2428 i‡(
	`°rcmp
(
°r
, "1/2"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

2430 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] formatÉrror in \"txpk.codr\", TXáborted\n");

2431 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2436 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ipol");

2437 i‡(
vÆ
 !
NULL
) {

2438 
txpkt
.
övît_pﬁ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

2442 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

2443 i‡(
vÆ
 !
NULL
) {

2444 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2445 i‡(
i
 >
MIN_LORA_PREAMB
) {

2446 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

2448 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_LORA_PREAMB
;

2451 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_LORA_PREAMB
;

2454 } i‡(
	`°rcmp
(
°r
, "FSK") == 0) {

2456 
txpkt
.
moduœti⁄
 = 
MOD_FSK
;

2459 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"datr");

2460 i‡(
vÆ
 =
NULL
) {

2461 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.datr\" object in JSON, TXáborted\n");

2462 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2465 
txpkt
.
d©¨©e
 = (
uöt32_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
));

2468 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"fdev");

2469 i‡(
vÆ
 =
NULL
) {

2470 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.fdev\" object in JSON, TXáborted\n");

2471 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2474 
txpkt
.
f_dev
 = (
uöt8_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
) / 1000.0);

2477 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

2478 i‡(
vÆ
 !
NULL
) {

2479 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2480 i‡(
i
 >
MIN_FSK_PREAMB
) {

2481 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

2483 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_FSK_PREAMB
;

2486 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_FSK_PREAMB
;

2490 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] invalid modulation in \"txpk.modu\", TXáborted\n");

2491 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2496 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"size");

2497 i‡(
vÆ
 =
NULL
) {

2498 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.size\" object in JSON, TXáborted\n");

2499 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2502 
txpkt
.
size
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2505 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "data");

2506 i‡(
°r
 =
NULL
) {

2507 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down]Ço mandatory \"txpk.data\" object in JSON, TXáborted\n");

2508 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2511 
i
 = 
	`b64_to_bö
(
°r
, 
	`°æí
(°r), 
txpkt
.
∑ylﬂd
, Åxpkt.payload);

2512 i‡(
i
 !
txpkt
.
size
) {

2513 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [down] mismatch between .sizeánd .data size once converterÅo binary\n");

2517 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2520 i‡(
£¡_immedüã
) {

2521 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

2523 
txpkt
.
tx_mode
 = 
TIMESTAMPED
;

2527 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2528 
mós_dw_dgøm_rcv
 += 1;

2529 
mós_dw_√tw‹k_byã
 +
msg_Àn
;

2530 
mós_dw_∑ylﬂd_byã
 +
txpkt
.
size
;

2531 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2534 
jô_ªsu…
 = 
JIT_ERROR_OK
;

2535 i‡((
txpkt
.
‰eq_hz
 < 
tx_‰eq_mö
[txpkt.
rf_chaö
]Ë|| (txpkt.‰eq_hz > 
tx_‰eq_max
[txpkt.rf_chain])) {

2536 
jô_ªsu…
 = 
JIT_ERROR_TX_FREQ
;

2537 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: Packë REJECTED, unsuµ‹ãd fªquícy - %u (mö:%u,max:%u)\n", 
txpkt
.
‰eq_hz
, 
tx_‰eq_mö
[txpkt.
rf_chaö
], 
tx_‰eq_max
[txpkt.rf_chain]);

2539 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2540 
i
=0; i<
txlut
.
size
; i++) {

2541 i‡(
txlut
.
lut
[
i
].
rf_powî
 =
txpkt
.rf_power) {

2546 i‡(
i
 =
txlut
.
size
) {

2548 
jô_ªsu…
 = 
JIT_ERROR_TX_POWER
;

2549 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: Packë REJECTED, unsuµ‹ãd RFÖowî f‹ TX - %d\n", 
txpkt
.
rf_powî
);

2554 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2555 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

2556 
	`gë_c⁄˚¡øt‹_time
(&
cuºít_c⁄˚¡øt‹_time
, 
cuºít_unix_time
);

2557 
jô_ªsu…
 = 
	`jô_íqueue
(&
jô_queue
, &
cuºít_c⁄˚¡øt‹_time
, &
txpkt
, 
dow∆ök_ty≥
);

2558 i‡(
jô_ªsu…
 !
JIT_ERROR_OK
) {

2559 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: Packë REJECTED (jôÉº‹=%d)\n", 
jô_ªsu…
);

2561 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2562 
mós_nb_tx_ªque°ed
 += 1;

2563 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2567 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
jô_ªsu…
);

2570 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: End of downstreamÅhread\n");

2571 
	}
}

2573 
	$¥öt_tx_°©us
(
uöt8_t
 
tx_°©us
) {

2574 
tx_°©us
) {

2575 
TX_OFF
:

2576 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [jit]Ügw_statusÑeturned TX_OFF\n");

2578 
TX_FREE
:

2579 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [jit]Ügw_statusÑeturned TX_FREE\n");

2581 
TX_EMITTING
:

2582 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [jit]Ügw_statusÑeturned TX_EMITTING\n");

2584 
TX_SCHEDULED
:

2585 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [jit]Ügw_statusÑeturned TX_SCHEDULED\n");

2588 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: [jô]Ügw_°©u†ªtu∫ed UNKNOWN (%d)\n", 
tx_°©us
);

2591 
	}
}

2597 
	$thªad_jô
() {

2598 
ªsu…
 = 
LGW_HAL_SUCCESS
;

2599 
lgw_pkt_tx_s
 
pkt
;

2600 
pkt_ödex
 = -1;

2601 
timevÆ
 
cuºít_unix_time
;

2602 
timevÆ
 
cuºít_c⁄˚¡øt‹_time
;

2603 
jô_îr‹_e
 
jô_ªsu…
;

2604 
jô_pkt_ty≥_e
 
pkt_ty≥
;

2605 
uöt8_t
 
tx_°©us
;

2607 !
exô_sig
 && !
quô_sig
) {

2608 
	`waô_ms
(10);

2611 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

2612 
	`gë_c⁄˚¡øt‹_time
(&
cuºít_c⁄˚¡øt‹_time
, 
cuºít_unix_time
);

2613 
jô_ªsu…
 = 
	`jô_≥ek
(&
jô_queue
, &
cuºít_c⁄˚¡øt‹_time
, &
pkt_ödex
);

2614 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2615 i‡(
pkt_ödex
 > -1) {

2616 
jô_ªsu…
 = 
	`jô_dequeue
(&
jô_queue
, 
pkt_ödex
, &
pkt
, &
pkt_ty≥
);

2617 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2619 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

2621 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

2622 
pkt
.
‰eq_hz
 = (
uöt32_t
)(
xèl_c‹ª˘
 * ()pkt.freq_hz);

2623 
	`MSG_DEBUG
(
DEBUG_BEACON
, "bóc⁄_pkt.‰eq_hz=%u (xèl_c‹ª˘=%.15lf)\n", 
pkt
.
‰eq_hz
, 
xèl_c‹ª˘
);

2624 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

2627 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2628 
mós_nb_bóc⁄_£¡
 += 1;

2629 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2630 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: Bóc⁄ dequeued (cou¡_us=%u)\n", 
pkt
.
cou¡_us
);

2634 i‡(
sx1276
) {

2635 
	`txl‹a
(
sxødio
, &
pkt
);

2636 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2637 
mós_nb_tx_ok
 += 1;

2638 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2639 
	`MSG_DEBUG
(
DEBUG_PKT_FWD
, "lgw_£nd d⁄e: cou¡_us=%u\n", 
pkt
.
cou¡_us
);

2642 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2643 
ªsu…
 = 
	`lgw_°©us
(
TX_STATUS
, &
tx_°©us
);

2644 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2645 i‡(
ªsu…
 =
LGW_HAL_ERROR
) {

2646 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [jit]Ügw_status failed\n");

2648 i‡(
tx_°©us
 =
TX_EMITTING
) {

2649 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: concentrator is currentlyÉmitting\n");

2650 
	`¥öt_tx_°©us
(
tx_°©us
);

2652 } i‡(
tx_°©us
 =
TX_SCHEDULED
) {

2653 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING:á downlink wasálready scheduled, overwritting it...\n");

2654 
	`¥öt_tx_°©us
(
tx_°©us
);

2659 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2660 
ªsu…
 = 
	`lgw_£nd
(
pkt
);

2661 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2662 i‡(
ªsu…
 =
LGW_HAL_ERROR
) {

2663 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2664 
mós_nb_tx_Áû
 += 1;

2665 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2666 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [jit]Ügw_send failed\n");

2669 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2670 
mós_nb_tx_ok
 += 1;

2671 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2672 
	`MSG_DEBUG
(
DEBUG_PKT_FWD
, "lgw_£nd d⁄e: cou¡_us=%u\n", 
pkt
.
cou¡_us
);

2677 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: jô_dequeuêÁûed wôh %d\n", 
jô_ªsu…
);

2680 } i‡(
jô_ªsu…
 =
JIT_ERROR_EMPTY
) {

2683 
	`MSG_DEBUG
(
DEBUG_ERROR
, "ERROR: jô_≥ek faûed wôh %d\n", 
jô_ªsu…
);

2686 
	}
}

2691 
	$gps_¥o˚ss_sync
() {

2692 
time•ec
 
gps_time
;

2693 
time•ec
 
utc
;

2694 
uöt32_t
 
åig_t°amp
;

2695 
i
 = 
	`lgw_gps_gë
(&
utc
, &
gps_time
, 
NULL
, NULL);

2698 i‡(
i
 !
LGW_GPS_SUCCESS
) {

2699 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [gps] couldÇot get GPSÅime from GPS\n");

2704 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2705 
i
 = 
	`lgw_gë_åig˙t
(&
åig_t°amp
);

2706 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2707 i‡(
i
 !
LGW_HAL_SUCCESS
) {

2708 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [gps] failedÅoÑead concentratorÅimestamp\n");

2713 
	`±hªad_muãx_lock
(&
mx_timîef
);

2714 
i
 = 
	`lgw_gps_sync
(&
time_ª„ªn˚_gps
, 
åig_t°amp
, 
utc
, 
gps_time
);

2715 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2716 i‡(
i
 !
LGW_GPS_SUCCESS
) {

2717 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [gps] GPS out of sync, keepingÖreviousÅimeÑeference\n");

2719 
	}
}

2721 
	$gps_¥o˚ss_co‹ds
() {

2723 
co‹d_s
 
co‹d
;

2724 
co‹d_s
 
gp£º
;

2725 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

2728 
	`±hªad_muãx_lock
(&
mx_mós_gps
);

2729 i‡(
i
 =
LGW_GPS_SUCCESS
) {

2730 
gps_co‹d_vÆid
 = 
åue
;

2731 
mós_gps_co‹d
 = 
co‹d
;

2732 
mós_gps_îr
 = 
gp£º
;

2735 
gps_co‹d_vÆid
 = 
Ál£
;

2737 
	`±hªad_muãx_u∆ock
(&
mx_mós_gps
);

2738 
	}
}

2740 
	$thªad_gps
() {

2742 
£rül_buff
[128];

2743 
size_t
 
wr_idx
 = 0;

2746 
gps_msg
 
œã°_msg
;

2749 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

2751 !
exô_sig
 && !
quô_sig
) {

2752 
size_t
 
rd_idx
 = 0;

2753 
size_t
 
‰ame_íd_idx
 = 0;

2756 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
gps_ây_fd
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

2757 i‡(
nb_ch¨
 <= 0) {

2758 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [gps]Ñód(Ëªtu∫ed vÆuê%d\n", 
nb_ch¨
);

2761 
wr_idx
 +(
size_t
)
nb_ch¨
;

2767 
rd_idx
 < 
wr_idx
) {

2768 
size_t
 
‰ame_size
 = 0;

2771 if(
£rül_buff
[
rd_idx
] =()
LGW_GPS_UBX_SYNC_CHAR
) {

2776 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

2778 i‡(
‰ame_size
 > 0) {

2779 i‡(
œã°_msg
 =
INCOMPLETE
) {

2781 
‰ame_size
 = 0;

2782 } i‡(
œã°_msg
 =
INVALID
) {

2784 
	`MSG_DEBUG
(
DEBUG_WARNING
, "WARNING: [gps] couldÇot getá valid message from GPS (noÅime)\n");

2785 
‰ame_size
 = 0;

2786 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

2787 
	`gps_¥o˚ss_sync
();

2790 } if(
£rül_buff
[
rd_idx
] =
LGW_GPS_NMEA_SYNC_CHAR
) {

2795 * 
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
],()0x0a, (
wr_idx
 -Ñd_idx));

2797 if(
nmó_íd_±r
) {

2799 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

2800 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

2802 if(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

2804 
‰ame_size
 = 0;

2805 } i‡(
œã°_msg
 =
NMEA_RMC
) {

2806 
	`gps_¥o˚ss_co‹ds
();

2811 if(
‰ame_size
 > 0) {

2814 
rd_idx
 +
‰ame_size
;

2815 
‰ame_íd_idx
 = 
rd_idx
;

2817 
rd_idx
++;

2821 if(
‰ame_íd_idx
) {

2823 
	`mem˝y
(
£rül_buff
, &£rül_buff[
‰ame_íd_idx
], 
wr_idx
 - frame_end_idx);

2824 
wr_idx
 -
‰ame_íd_idx
;

2828 if(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

2829 
	`mem˝y
(
£rül_buff
, &£rül_buff[
LGW_GPS_MIN_MSG_SIZE
], 
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

2830 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

2833 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: End of GPSÅhread\n");

2834 
	}
}

2839 
	$thªad_vÆid
() {

2842 
gps_ªf_age
 = 0;

2843 
boﬁ
 
ªf_vÆid_loˇl
 = 
Ál£
;

2844 
xèl_îr_˝y
;

2847 
öô_˝t
 = 0;

2848 
öô_acc
 = 0.0;

2849 
x
;

2864 !
exô_sig
 && !
quô_sig
) {

2865 
	`waô_ms
(1000);

2868 
	`±hªad_muãx_lock
(&
mx_timîef
);

2869 
gps_ªf_age
 = ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
);

2870 i‡((
gps_ªf_age
 >0Ë&& (gps_ªf_agê<
GPS_REF_MAX_AGE
)) {

2872 
gps_ªf_vÆid
 = 
åue
;

2873 
ªf_vÆid_loˇl
 = 
åue
;

2874 
xèl_îr_˝y
 = 
time_ª„ªn˚_gps
.
xèl_îr
;

2878 
gps_ªf_vÆid
 = 
Ál£
;

2879 
ªf_vÆid_loˇl
 = 
Ál£
;

2881 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2884 i‡(
ªf_vÆid_loˇl
 =
Ál£
) {

2886 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

2887 
xèl_c‹ª˘_ok
 = 
Ál£
;

2888 
xèl_c‹ª˘
 = 1.0;

2889 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

2890 
öô_˝t
 = 0;

2891 
öô_acc
 = 0.0;

2893 i‡(
öô_˝t
 < 
XERR_INIT_AVG
) {

2895 
öô_acc
 +
xèl_îr_˝y
;

2896 ++
öô_˝t
;

2897 } i‡(
öô_˝t
 =
XERR_INIT_AVG
) {

2899 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

2900 
xèl_c‹ª˘
 = ()(
XERR_INIT_AVG
Ë/ 
öô_acc
;

2902 
xèl_c‹ª˘_ok
 = 
åue
;

2903 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

2904 ++
öô_˝t
;

2908 
x
 = 1 / 
xèl_îr_˝y
;

2909 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

2910 
xèl_c‹ª˘
 = xèl_c‹ª˘ - xèl_c‹ª˘/
XERR_FILT_COEF
 + 
x
/XERR_FILT_COEF;

2911 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

2917 
	`MSG_DEBUG
(
DEBUG_INFO
, "INFO: End of validationÅhread\n");

2918 
	}
}

	@lora_pkt_fwd/src/parson.c

23 #ifde‡
_MSC_VER


24 
	#_CRT_SECURE_NO_WARNINGS


	)

27 
	~"∑rs⁄.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

33 
	~<m©h.h
>

35 
	#STARTING_CAPACITY
 15

	)

36 
	#ARRAY_MAX_CAPACITY
 122880

	)

37 
	#OBJECT_MAX_CAPACITY
 960

	)

38 
	#MAX_NESTING
 19

	)

39 
	#DOUBLE_SERIALIZATION_FORMAT
 "%f"

	)

41 
	#SIZEOF_TOKEN
(
a
Ë(◊Ë- 1)

	)

42 
	#SKIP_CHAR
(
°r
Ë((*°r)++)

	)

43 
	#SKIP_WHITESPACES
(
°r
Ë
	`is•a˚
(**°r)Ë{ 
	`SKIP_CHAR
(°r); }

	)

44 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

46 #unde‡
mÆloc


47 #unde‡
‰ì


49 
JSON_MÆloc_Fun˘i⁄
 
	g∑rs⁄_mÆloc
 = 
mÆloc
;

50 
JSON_Fªe_Fun˘i⁄
 
	g∑rs⁄_‰ì
 = 
‰ì
;

52 
	#IS_CONT
(
b
Ë((()(bË& 0xC0Ë=0x80Ë

	)

55 
	ujs⁄_vÆue_vÆue
 {

56 *
	m°rög
;

57 
	mnumbî
;

58 
JSON_Obje˘
 *
	mobje˘
;

59 
JSON_Aºay
 *
	m¨øy
;

60 
	mboﬁón
;

61 
	mnuŒ
;

62 } 
	tJSON_VÆue_VÆue
;

64 
	sjs⁄_vÆue_t
 {

65 
JSON_VÆue_Ty≥
 
	mty≥
;

66 
JSON_VÆue_VÆue
 
	mvÆue
;

69 
	sjs⁄_obje˘_t
 {

70 **
	m«mes
;

71 
JSON_VÆue
 **
	mvÆues
;

72 
size_t
 
	mcou¡
;

73 
size_t
 
	mˇ∑côy
;

76 
	sjs⁄_¨øy_t
 {

77 
JSON_VÆue
 **
	môems
;

78 
size_t
 
	mcou¡
;

79 
size_t
 
	mˇ∑côy
;

83 * 
ªad_fûe
(c⁄° *
fûíame
);

84 
ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
);

85 * 
∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
);

86 * 
∑rs⁄_°rdup
(c⁄° *
°rög
);

87 
is_utf16_hex
(c⁄° *
°rög
);

88 
num_byãs_ö_utf8_£quí˚
(
c
);

89 
vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
);

90 
is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
);

91 
is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
);

94 
JSON_Obje˘
 * 
js⁄_obje˘_öô
();

95 
JSON_Sètus
 
js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

96 
JSON_Sètus
 
js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
);

97 
JSON_VÆue
 * 
js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
);

98 
js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
);

101 
JSON_Aºay
 * 
js⁄_¨øy_öô
();

102 
JSON_Sètus
 
js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

103 
JSON_Sètus
 
js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
);

104 
js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
);

107 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
);

110 
skù_quŸes
(c⁄° **
°rög
);

111 
∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
);

112 * 
¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
);

113 * 
gë_quŸed_°rög
(c⁄° **
°rög
);

114 
JSON_VÆue
 * 
∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

115 
JSON_VÆue
 * 
∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

116 
JSON_VÆue
 * 
∑r£_°rög_vÆue
(c⁄° **
°rög
);

117 
JSON_VÆue
 * 
∑r£_boﬁón_vÆue
(c⁄° **
°rög
);

118 
JSON_VÆue
 * 
∑r£_numbî_vÆue
(c⁄° **
°rög
);

119 
JSON_VÆue
 * 
∑r£_nuŒ_vÆue
(c⁄° **
°rög
);

120 
JSON_VÆue
 * 
∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

123 
js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
);

124 
js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
);

125 
≠≥nd_ödít
(*
buf
, 
Àvñ
);

126 
≠≥nd_°rög
(*
buf
, c⁄° *
°rög
);

129 * 
	$∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
) {

130 *
ouçut_°rög
 = (*)
	`∑rs⁄_mÆloc
(
n
 + 1);

131 i‡(!
ouçut_°rög
)

132  
NULL
;

133 
ouçut_°rög
[
n
] = '\0';

134 
	`°∫˝y
(
ouçut_°rög
, 
°rög
, 
n
);

135  
ouçut_°rög
;

136 
	}
}

138 * 
	$∑rs⁄_°rdup
(c⁄° *
°rög
) {

139  
	`∑rs⁄_°∫dup
(
°rög
, 
	`°æí
(string));

140 
	}
}

142 
	$is_utf16_hex
(c⁄° *
s
) {

143  
	`isxdigô
(
s
[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);

144 
	}
}

146 
	$num_byãs_ö_utf8_£quí˚
(
c
) {

147 i‡(
c
 =0xC0 || c =0xC1 || c > 0xF4 || 
	`IS_CONT
(c)) {

149 } i‡((
c
 & 0x80) == 0) {

151 } i‡((
c
 & 0xE0) == 0xC0) {

153 } i‡((
c
 & 0xF0) == 0xE0) {

155 } i‡((
c
 & 0xF8) == 0xF0) {

159 
	}
}

161 
	$vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
) {

162 
˝
 = 0;

163 *
Àn
 = 
	`num_byãs_ö_utf8_£quí˚
(
°rög
[0]);

165 i‡(*
Àn
 == 1) {

166 
˝
 = 
°rög
[0];

167 } i‡(*
Àn
 =2 && 
	`IS_CONT
(
°rög
[1])) {

168 
˝
 = 
°rög
[0] & 0x1F;

169 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

170 } i‡(*
Àn
 =3 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2])) {

171 
˝
 = (()
°rög
[0]) & 0xF;

172 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

173 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

174 } i‡(*
Àn
 =4 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {

175 
˝
 = 
°rög
[0] & 0x7;

176 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

177 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

178 
˝
 = (˝ << 6Ë| (
°rög
[3] & 0x3F);

184 i‡((
˝
 < 0x80 && *
Àn
 > 1) ||

185 (
˝
 < 0x800 && *
Àn
 > 2) ||

186 (
˝
 < 0x10000 && *
Àn
 > 3)) {

191 i‡(
˝
 > 0x10FFFF) {

196 i‡(
˝
 >= 0xD800 && cp <= 0xDFFF) {

201 
	}
}

203 
	$is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
) {

204 
Àn
 = 0;

205 c⁄° *
°rög_íd
 = 
°rög
 + 
°rög_Àn
;

206 
°rög
 < 
°rög_íd
) {

207 i‡(!
	`vîify_utf8_£quí˚
((c⁄° *)
°rög
, &
Àn
)) {

210 
°rög
 +
Àn
;

213 
	}
}

215 
	$is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
) {

216 i‡(
Àngth
 > 1 && 
°rög
[0] == '0' && string[1] != '.')

218 i‡(
Àngth
 > 2 && !
	`°∫cmp
(
°rög
, "-0", 2) && string[2] != '.')

220 
Àngth
--)

221 i‡(
	`°rchr
("xX", 
°rög
[
Àngth
]))

224 
	}
}

226 * 
	$ªad_fûe
(c⁄° * 
fûíame
) {

227 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

228 
size_t
 
fûe_size
;

229 
pos
;

230 *
fûe_c⁄ã¡s
;

231 i‡(!
Â
)

232  
NULL
;

233 
	`f£ek
(
Â
, 0L, 
SEEK_END
);

234 
pos
 = 
	`·ñl
(
Â
);

235 i‡(
pos
 < 0) {

236 
	`f˛o£
(
Â
);

237  
NULL
;

239 
fûe_size
 = 
pos
;

240 
	`ªwöd
(
Â
);

241 
fûe_c⁄ã¡s
 = (*)
	`∑rs⁄_mÆloc
((Ë* (
fûe_size
 + 1));

242 i‡(!
fûe_c⁄ã¡s
) {

243 
	`f˛o£
(
Â
);

244  
NULL
;

246 i‡(
	`‰ód
(
fûe_c⁄ã¡s
, 
fûe_size
, 1, 
Â
) < 1) {

247 i‡(
	`„º‹
(
Â
)) {

248 
	`f˛o£
(
Â
);

249 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

250  
NULL
;

253 
	`f˛o£
(
Â
);

254 
fûe_c⁄ã¡s
[
fûe_size
] = '\0';

255  
fûe_c⁄ã¡s
;

256 
	}
}

258 
	$ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
) {

259 
ö_°rög
 = 0, 
esˇ≥d
 = 0;

260 
size_t
 
i
;

261 *
±r
 = 
NULL
, 
cuºít_ch¨
;

262 
size_t
 
°¨t_tokí_Àn
 = 
	`°æí
(
°¨t_tokí
);

263 
size_t
 
íd_tokí_Àn
 = 
	`°æí
(
íd_tokí
);

264 i‡(
°¨t_tokí_Àn
 =0 || 
íd_tokí_Àn
 == 0)

266 (
cuºít_ch¨
 = *
°rög
) != '\0') {

267 i‡(
cuºít_ch¨
 ='\\' && !
esˇ≥d
) {

268 
esˇ≥d
 = 1;

269 
°rög
++;

271 } i‡(
cuºít_ch¨
 ='\"' && !
esˇ≥d
) {

272 
ö_°rög
 = !in_string;

273 } i‡(!
ö_°rög
 && 
	`°∫cmp
(
°rög
, 
°¨t_tokí
, 
°¨t_tokí_Àn
) == 0) {

274 
i
 = 0; i < 
°¨t_tokí_Àn
; i++)

275 
°rög
[
i
] = ' ';

276 
°rög
 = såög + 
°¨t_tokí_Àn
;

277 
±r
 = 
	`°r°r
(
°rög
, 
íd_tokí
);

278 i‡(!
±r
)

280 
i
 = 0; i < (
±r
 - 
°rög
Ë+ 
íd_tokí_Àn
; i++)

281 
°rög
[
i
] = ' ';

282 
°rög
 = 
±r
 + 
íd_tokí_Àn
 - 1;

284 
esˇ≥d
 = 0;

285 
°rög
++;

287 
	}
}

290 
JSON_Obje˘
 * 
	$js⁄_obje˘_öô
() {

291 
JSON_Obje˘
 *
√w_obj
 = (JSON_Obje˘*)
	`∑rs⁄_mÆloc
((JSON_Object));

292 i‡(!
√w_obj
)

293  
NULL
;

294 
√w_obj
->
«mes
 = (**)
NULL
;

295 
√w_obj
->
vÆues
 = (
JSON_VÆue
**)
NULL
;

296 
√w_obj
->
ˇ∑côy
 = 0;

297 
√w_obj
->
cou¡
 = 0;

298  
√w_obj
;

299 
	}
}

301 
JSON_Sètus
 
	$js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

302 
size_t
 
ödex
 = 0;

303 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL) {

304  
JSONFaûuª
;

306 i‡(
obje˘
->
cou¡
 >obje˘->
ˇ∑côy
) {

307 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
obje˘
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

308 i‡(
√w_ˇ∑côy
 > 
OBJECT_MAX_CAPACITY
)

309  
JSONFaûuª
;

310 i‡(
	`js⁄_obje˘_ªsize
(
obje˘
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

311  
JSONFaûuª
;

313 i‡(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
Ë!
NULL
)

314  
JSONFaûuª
;

315 
ödex
 = 
obje˘
->
cou¡
;

316 
obje˘
->
«mes
[
ödex
] = 
	`∑rs⁄_°rdup
(
«me
);

317 i‡(
obje˘
->
«mes
[
ödex
] =
NULL
)

318  
JSONFaûuª
;

319 
obje˘
->
vÆues
[
ödex
] = 
vÆue
;

320 
obje˘
->
cou¡
++;

321  
JSONSuc˚ss
;

322 
	}
}

324 
JSON_Sètus
 
	$js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
) {

325 **
ãmp_«mes
 = 
NULL
;

326 
JSON_VÆue
 **
ãmp_vÆues
 = 
NULL
;

328 i‡((
obje˘
->
«mes
 =
NULL
 && obje˘->
vÆues
 != NULL) ||

329 (
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 == NULL) ||

330 
√w_ˇ∑côy
 == 0) {

331  
JSONFaûuª
;

334 
ãmp_«mes
 = (**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (*));

335 i‡(
ãmp_«mes
 =
NULL
)

336  
JSONFaûuª
;

338 
ãmp_vÆues
 = (
JSON_VÆue
**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

339 i‡(
ãmp_vÆues
 =
NULL
) {

340 
	`∑rs⁄_‰ì
(
ãmp_«mes
);

341  
JSONFaûuª
;

344 i‡(
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 !NULL && obje˘->
cou¡
 > 0) {

345 
	`mem˝y
(
ãmp_«mes
, 
obje˘
->
«mes
, obje˘->
cou¡
 * (*));

346 
	`mem˝y
(
ãmp_vÆues
, 
obje˘
->
vÆues
, obje˘->
cou¡
 * (
JSON_VÆue
*));

348 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
);

349 
	`∑rs⁄_‰ì
(
obje˘
->
vÆues
);

350 
obje˘
->
«mes
 = 
ãmp_«mes
;

351 
obje˘
->
vÆues
 = 
ãmp_vÆues
;

352 
obje˘
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

353  
JSONSuc˚ss
;

354 
	}
}

356 
JSON_VÆue
 * 
	$js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
) {

357 
size_t
 
i
, 
«me_Àngth
;

358 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

359 
«me_Àngth
 = 
	`°æí
(
obje˘
->
«mes
[
i
]);

360 i‡(
«me_Àngth
 !
n
)

362 i‡(
	`°∫cmp
(
obje˘
->
«mes
[
i
], 
«me
, 
n
) == 0)

363  
obje˘
->
vÆues
[
i
];

365  
NULL
;

366 
	}
}

368 
	$js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
) {

369 
obje˘
->
cou¡
--) {

370 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[obje˘->
cou¡
]);

371 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[obje˘->
cou¡
]);

373 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
);

374 
	`∑rs⁄_‰ì
(
obje˘
->
vÆues
);

375 
	`∑rs⁄_‰ì
(
obje˘
);

376 
	}
}

379 
JSON_Aºay
 * 
	$js⁄_¨øy_öô
() {

380 
JSON_Aºay
 *
√w_¨øy
 = (JSON_Aºay*)
	`∑rs⁄_mÆloc
((JSON_Array));

381 i‡(!
√w_¨øy
)

382  
NULL
;

383 
√w_¨øy
->
ôems
 = (
JSON_VÆue
**)
NULL
;

384 
√w_¨øy
->
ˇ∑côy
 = 0;

385 
√w_¨øy
->
cou¡
 = 0;

386  
√w_¨øy
;

387 
	}
}

389 
JSON_Sètus
 
	$js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

390 i‡(
¨øy
->
cou¡
 >¨øy->
ˇ∑côy
) {

391 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
¨øy
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

392 i‡(
√w_ˇ∑côy
 > 
ARRAY_MAX_CAPACITY
)

393  
JSONFaûuª
;

394 i‡(
	`js⁄_¨øy_ªsize
(
¨øy
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

395  
JSONFaûuª
;

397 
¨øy
->
ôems
[¨øy->
cou¡
] = 
vÆue
;

398 
¨øy
->
cou¡
++;

399  
JSONSuc˚ss
;

400 
	}
}

402 
JSON_Sètus
 
	$js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
) {

403 
JSON_VÆue
 **
√w_ôems
 = 
NULL
;

404 i‡(
√w_ˇ∑côy
 == 0) {

405  
JSONFaûuª
;

407 
√w_ôems
 = (
JSON_VÆue
**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

408 i‡(
√w_ôems
 =
NULL
) {

409  
JSONFaûuª
;

411 i‡(
¨øy
->
ôems
 !
NULL
 &&áºay->
cou¡
 > 0) {

412 
	`mem˝y
(
√w_ôems
, 
¨øy
->
ôems
,áºay->
cou¡
 * (
JSON_VÆue
*));

414 
	`∑rs⁄_‰ì
(
¨øy
->
ôems
);

415 
¨øy
->
ôems
 = 
√w_ôems
;

416 
¨øy
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

417  
JSONSuc˚ss
;

418 
	}
}

420 
	$js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
) {

421 
¨øy
->
cou¡
--)

422 
	`js⁄_vÆue_‰ì
(
¨øy
->
ôems
[¨øy->
cou¡
]);

423 
	`∑rs⁄_‰ì
(
¨øy
->
ôems
);

424 
	`∑rs⁄_‰ì
(
¨øy
);

425 
	}
}

428 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
) {

429 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

430 i‡(!
√w_vÆue
)

431  
NULL
;

432 
√w_vÆue
->
ty≥
 = 
JSONSåög
;

433 
√w_vÆue
->
vÆue
.
°rög
 = string;

434  
√w_vÆue
;

435 
	}
}

438 
	$skù_quŸes
(c⁄° **
°rög
) {

439 
	`SKIP_CHAR
(
°rög
);

440 **
°rög
 != '\"') {

441 i‡(**
°rög
 == '\0')

443 i‡(**
°rög
 == '\\') {

444 
	`SKIP_CHAR
(
°rög
);

445 i‡(**
°rög
 == '\0')

448 
	`SKIP_CHAR
(
°rög
);

450 
	`SKIP_CHAR
(
°rög
);

451 
	}
}

453 
	$∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
) {

454 
˝
, 
Àad
, 
åaû
;

455 *
¥o˚s£d_±r
 = *
¥o˚s£d
;

456 c⁄° *
u≈ro˚s£d_±r
 = *
u≈ro˚s£d
;

457 
u≈ro˚s£d_±r
++;

458 i‡(!
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
Ë|| 
	`ssˇnf
(u≈ro˚s£d_±r, "%4x", &
˝
Ë=
EOF
)

459  
JSONFaûuª
;

460 i‡(
˝
 < 0x80) {

461 *
¥o˚s£d_±r
 = 
˝
;

462 } i‡(
˝
 < 0x800) {

463 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x1F) | 0xC0;

464 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

465 } i‡(
˝
 < 0xD800 || cp > 0xDFFF) {

466 *
¥o˚s£d_±r
++ = ((
˝
 >> 12) & 0x0F) | 0xE0;

467 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x3F) | 0x80;

468 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

469 } i‡(
˝
 >= 0xD800 && cp <= 0xDBFF) {

470 
Àad
 = 
˝
;

471 
u≈ro˚s£d_±r
 += 4;

472 i‡(*
u≈ro˚s£d_±r
++ != '\\' || *unprocessed_ptr++ != 'u' ||

473 !
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
) ||

474 
	`ssˇnf
(
u≈ro˚s£d_±r
, "%4x", &
åaû
Ë=
EOF
 ||

475 
åaû
 < 0xDC00 ||Årail > 0xDFFF) {

476  
JSONFaûuª
;

478 
˝
 = ((((
Àad
-0xD800)&0x3FF)<<10)|((
åaû
-0xDC00)&0x3FF))+0x010000;

479 *
¥o˚s£d_±r
++ = (((
˝
 >> 18) & 0x07) | 0xF0);

480 *
¥o˚s£d_±r
++ = (((
˝
 >> 12) & 0x3F) | 0x80);

481 *
¥o˚s£d_±r
++ = (((
˝
 >> 6) & 0x3F) | 0x80);

482 *
¥o˚s£d_±r
 = (((
˝
 ) & 0x3F) | 0x80);

484  
JSONFaûuª
;

486 
u≈ro˚s£d_±r
 += 3;

487 *
¥o˚s£d
 = 
¥o˚s£d_±r
;

488 *
u≈ro˚s£d
 = 
u≈ro˚s£d_±r
;

489  
JSONSuc˚ss
;

490 
	}
}

495 * 
	$¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
) {

496 c⁄° *
öput_±r
 = 
öput
;

497 
size_t
 
öôül_size
 = (
Àn
 + 1) * ();

498 
size_t
 
föÆ_size
 = 0;

499 *
ouçut
 = (*)
	`∑rs⁄_mÆloc
(
öôül_size
);

500 *
ouçut_±r
 = 
ouçut
;

501 *
ªsized_ouçut
 = 
NULL
;

502 (*
öput_±r
 !'\0'Ë&& (
size_t
)(öput_±∏- 
öput
Ë< 
Àn
) {

503 i‡(*
öput_±r
 == '\\') {

504 
öput_±r
++;

505 *
öput_±r
) {

506 '\"': *
ouçut_±r
 = '\"'; ;

507 '\\': *
ouçut_±r
 = '\\'; ;

508 '/': *
ouçut_±r
 = '/'; ;

509 'b': *
ouçut_±r
 = '\b'; ;

510 'f': *
ouçut_±r
 = '\f'; ;

511 'n': *
ouçut_±r
 = '\n'; ;

512 'r': *
ouçut_±r
 = '\r'; ;

513 't': *
ouçut_±r
 = '\t'; ;

515 i‡(
	`∑r£_utf_16
(&
öput_±r
, &
ouçut_±r
Ë=
JSONFaûuª
)

516 
îr‹
;

519 
îr‹
;

521 } i‡(()*
öput_±r
 < 0x20) {

522 
îr‹
;

524 *
ouçut_±r
 = *
öput_±r
;

526 
ouçut_±r
++;

527 
öput_±r
++;

529 *
ouçut_±r
 = '\0';

531 
föÆ_size
 = (
size_t
)(
ouçut_±r
-
ouçut
) + 1;

532 
ªsized_ouçut
 = (*)
	`∑rs⁄_mÆloc
(
föÆ_size
);

533 i‡(
ªsized_ouçut
 =
NULL
)

534 
îr‹
;

535 
	`mem˝y
(
ªsized_ouçut
, 
ouçut
, 
föÆ_size
);

536 
	`∑rs⁄_‰ì
(
ouçut
);

537  
ªsized_ouçut
;

538 
îr‹
:

539 
	`∑rs⁄_‰ì
(
ouçut
);

540  
NULL
;

541 
	}
}

545 * 
	$gë_quŸed_°rög
(c⁄° **
°rög
) {

546 c⁄° *
°rög_°¨t
 = *
°rög
;

547 
size_t
 
°rög_Àn
 = 0;

548 
	`skù_quŸes
(
°rög
);

549 i‡(**
°rög
 == '\0')

550  
NULL
;

551 
°rög_Àn
 = *
°rög
 - 
°rög_°¨t
 - 2;

552  
	`¥o˚ss_°rög
(
°rög_°¨t
 + 1, 
°rög_Àn
);

553 
	}
}

555 
JSON_VÆue
 * 
	$∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

556 i‡(
√°ög
 > 
MAX_NESTING
)

557  
NULL
;

558 
	`SKIP_WHITESPACES
(
°rög
);

559 **
°rög
) {

561  
	`∑r£_obje˘_vÆue
(
°rög
, 
√°ög
 + 1);

563  
	`∑r£_¨øy_vÆue
(
°rög
, 
√°ög
 + 1);

565  
	`∑r£_°rög_vÆue
(
°rög
);

567  
	`∑r£_boﬁón_vÆue
(
°rög
);

571  
	`∑r£_numbî_vÆue
(
°rög
);

573  
	`∑r£_nuŒ_vÆue
(
°rög
);

575  
NULL
;

577 
	}
}

579 
JSON_VÆue
 * 
	$∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

580 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
(), *
√w_vÆue
 = 
NULL
;

581 
JSON_Obje˘
 *
ouçut_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
ouçut_vÆue
);

582 *
√w_key
 = 
NULL
;

583 i‡(
ouçut_vÆue
 =
NULL
)

584  
NULL
;

585 
	`SKIP_CHAR
(
°rög
);

586 
	`SKIP_WHITESPACES
(
°rög
);

587 i‡(**
°rög
 == '}') {

588 
	`SKIP_CHAR
(
°rög
);

589  
ouçut_vÆue
;

591 **
°rög
 != '\0') {

592 
√w_key
 = 
	`gë_quŸed_°rög
(
°rög
);

593 
	`SKIP_WHITESPACES
(
°rög
);

594 i‡(
√w_key
 =
NULL
 || **
°rög
 != ':') {

595 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

596  
NULL
;

598 
	`SKIP_CHAR
(
°rög
);

599 
√w_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

600 i‡(
√w_vÆue
 =
NULL
) {

601 
	`∑rs⁄_‰ì
(
√w_key
);

602 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

603  
NULL
;

605 if(
	`js⁄_obje˘_add
(
ouçut_obje˘
, 
√w_key
, 
√w_vÆue
Ë=
JSONFaûuª
) {

606 
	`∑rs⁄_‰ì
(
√w_key
);

607 
	`∑rs⁄_‰ì
(
√w_vÆue
);

608 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

609  
NULL
;

611 
	`∑rs⁄_‰ì
(
√w_key
);

612 
	`SKIP_WHITESPACES
(
°rög
);

613 i‡(**
°rög
 != ',')

615 
	`SKIP_CHAR
(
°rög
);

616 
	`SKIP_WHITESPACES
(
°rög
);

618 
	`SKIP_WHITESPACES
(
°rög
);

619 i‡(**
°rög
 != '}' ||

620 
	`js⁄_obje˘_ªsize
(
ouçut_obje˘
, 
	`js⁄_obje˘_gë_cou¡
(ouçut_obje˘)Ë=
JSONFaûuª
) {

621 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

622  
NULL
;

624 
	`SKIP_CHAR
(
°rög
);

625  
ouçut_vÆue
;

626 
	}
}

628 
JSON_VÆue
 * 
	$∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

629 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
(), *
√w_¨øy_vÆue
 = 
NULL
;

630 
JSON_Aºay
 *
ouçut_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
ouçut_vÆue
);

631 i‡(!
ouçut_vÆue
)

632  
NULL
;

633 
	`SKIP_CHAR
(
°rög
);

634 
	`SKIP_WHITESPACES
(
°rög
);

635 i‡(**
°rög
 == ']') {

636 
	`SKIP_CHAR
(
°rög
);

637  
ouçut_vÆue
;

639 **
°rög
 != '\0') {

640 
√w_¨øy_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

641 i‡(!
√w_¨øy_vÆue
) {

642 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

643  
NULL
;

645 if(
	`js⁄_¨øy_add
(
ouçut_¨øy
, 
√w_¨øy_vÆue
Ë=
JSONFaûuª
) {

646 
	`∑rs⁄_‰ì
(
√w_¨øy_vÆue
);

647 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

648  
NULL
;

650 
	`SKIP_WHITESPACES
(
°rög
);

651 i‡(**
°rög
 != ',')

653 
	`SKIP_CHAR
(
°rög
);

654 
	`SKIP_WHITESPACES
(
°rög
);

656 
	`SKIP_WHITESPACES
(
°rög
);

657 i‡(**
°rög
 != ']' ||

658 
	`js⁄_¨øy_ªsize
(
ouçut_¨øy
, 
	`js⁄_¨øy_gë_cou¡
(ouçut_¨øy)Ë=
JSONFaûuª
) {

659 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

660  
NULL
;

662 
	`SKIP_CHAR
(
°rög
);

663  
ouçut_vÆue
;

664 
	}
}

666 
JSON_VÆue
 * 
	$∑r£_°rög_vÆue
(c⁄° **
°rög
) {

667 
JSON_VÆue
 *
vÆue
 = 
NULL
;

668 *
√w_°rög
 = 
	`gë_quŸed_°rög
(
°rög
);

669 i‡(
√w_°rög
 =
NULL
)

670  
NULL
;

671 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
√w_°rög
);

672 i‡(
vÆue
 =
NULL
) {

673 
	`∑rs⁄_‰ì
(
√w_°rög
);

674  
NULL
;

676  
vÆue
;

677 
	}
}

679 
JSON_VÆue
 * 
	$∑r£_boﬁón_vÆue
(c⁄° **
°rög
) {

680 
size_t
 
åue_tokí_size
 = 
	`SIZEOF_TOKEN
("true");

681 
size_t
 
Ál£_tokí_size
 = 
	`SIZEOF_TOKEN
("false");

682 i‡(
	`°∫cmp
("åue", *
°rög
, 
åue_tokí_size
) == 0) {

683 *
°rög
 +
åue_tokí_size
;

684  
	`js⁄_vÆue_öô_boﬁón
(1);

685 } i‡(
	`°∫cmp
("Ál£", *
°rög
, 
Ál£_tokí_size
) == 0) {

686 *
°rög
 +
Ál£_tokí_size
;

687  
	`js⁄_vÆue_öô_boﬁón
(0);

689  
NULL
;

690 
	}
}

692 
JSON_VÆue
 * 
	$∑r£_numbî_vÆue
(c⁄° **
°rög
) {

693 *
íd
;

694 
numbî
 = 
	`°πod
(*
°rög
, &
íd
);

695 
JSON_VÆue
 *
ouçut_vÆue
;

696 i‡(
	`is_decimÆ
(*
°rög
, 
íd
 - *string)) {

697 *
°rög
 = 
íd
;

698 
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

700 
ouçut_vÆue
 = 
NULL
;

702  
ouçut_vÆue
;

703 
	}
}

705 
JSON_VÆue
 * 
	$∑r£_nuŒ_vÆue
(c⁄° **
°rög
) {

706 
size_t
 
tokí_size
 = 
	`SIZEOF_TOKEN
("null");

707 i‡(
	`°∫cmp
("nuŒ", *
°rög
, 
tokí_size
) == 0) {

708 *
°rög
 +
tokí_size
;

709  
	`js⁄_vÆue_öô_nuŒ
();

711  
NULL
;

712 
	}
}

715 
	#APPEND_STRING
(
°r
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_°rög
(
buf
, (str)); \

716 i‡(
wrôãn
 < 0) {  -1; } \

717 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

718 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

720 
	#APPEND_INDENT
(
Àvñ
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_ödít
(
buf
, (level)); \

721 i‡(
wrôãn
 < 0) {  -1; } \

722 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

723 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

725 
	$js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
)

727 c⁄° *
key
 = 
NULL
, *
°rög
 = NULL;

728 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

729 
JSON_Aºay
 *
¨øy
 = 
NULL
;

730 
JSON_Obje˘
 *
obje˘
 = 
NULL
;

731 
size_t
 
i
 = 0, 
cou¡
 = 0;

732 
num
 = 0.0;

733 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

735 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

736 
JSONAºay
:

737 
¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

738 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
);

739 
	`APPEND_STRING
("[");

740 i‡(
cou¡
 > 0 && 
is_¥ëty
)

741 
	`APPEND_STRING
("\n");

742 
i
 = 0; i < 
cou¡
; i++) {

743 i‡(
is_¥ëty
)

744 
	`APPEND_INDENT
(
Àvñ
+1);

745 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
);

746 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

747 i‡(
wrôãn
 < 0)

749 i‡(
buf
 !
NULL
)

750 
buf
 +
wrôãn
;

751 
wrôãn_tŸÆ
 +
wrôãn
;

752 i‡(
i
 < (
cou¡
 - 1))

753 
	`APPEND_STRING
(",");

754 i‡(
is_¥ëty
)

755 
	`APPEND_STRING
("\n");

757 i‡(
cou¡
 > 0 && 
is_¥ëty
)

758 
	`APPEND_INDENT
(
Àvñ
);

759 
	`APPEND_STRING
("]");

760  
wrôãn_tŸÆ
;

761 
JSONObje˘
:

762 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

763 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
);

764 
	`APPEND_STRING
("{");

765 i‡(
cou¡
 > 0 && 
is_¥ëty
)

766 
	`APPEND_STRING
("\n");

767 
i
 = 0; i < 
cou¡
; i++) {

768 
key
 = 
	`js⁄_obje˘_gë_«me
(
obje˘
, 
i
);

769 i‡(
is_¥ëty
)

770 
	`APPEND_INDENT
(
Àvñ
+1);

771 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
key
, 
buf
);

772 i‡(
wrôãn
 < 0)

774 i‡(
buf
 !
NULL
)

775 
buf
 +
wrôãn
;

776 
wrôãn_tŸÆ
 +
wrôãn
;

777 
	`APPEND_STRING
(":");

778 i‡(
is_¥ëty
)

779 
	`APPEND_STRING
(" ");

780 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
key
);

781 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

782 i‡(
wrôãn
 < 0)

784 i‡(
buf
 !
NULL
)

785 
buf
 +
wrôãn
;

786 
wrôãn_tŸÆ
 +
wrôãn
;

787 i‡(
i
 < (
cou¡
 - 1))

788 
	`APPEND_STRING
(",");

789 i‡(
is_¥ëty
)

790 
	`APPEND_STRING
("\n");

792 i‡(
cou¡
 > 0 && 
is_¥ëty
)

793 
	`APPEND_INDENT
(
Àvñ
);

794 
	`APPEND_STRING
("}");

795  
wrôãn_tŸÆ
;

796 
JSONSåög
:

797 
°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

798 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
°rög
, 
buf
);

799 i‡(
wrôãn
 < 0)

801 i‡(
buf
 !
NULL
)

802 
buf
 +
wrôãn
;

803 
wrôãn_tŸÆ
 +
wrôãn
;

804  
wrôãn_tŸÆ
;

805 
JSONBoﬁón
:

806 i‡(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
))

807 
	`APPEND_STRING
("true");

809 
	`APPEND_STRING
("false");

810  
wrôãn_tŸÆ
;

811 
JSONNumbî
:

812 
num
 = 
	`js⁄_vÆue_gë_numbî
(
vÆue
);

813 i‡(
buf
 !
NULL
)

814 
num_buf
 = 
buf
;

815 i‡(
num
 == (()()num))

816 
wrôãn
 = 
	`•rötf
(
num_buf
, "%d", ()
num
);

818 
wrôãn
 = 
	`•rötf
(
num_buf
, 
DOUBLE_SERIALIZATION_FORMAT
, 
num
);

819 i‡(
wrôãn
 < 0)

821 i‡(
buf
 !
NULL
)

822 
buf
 +
wrôãn
;

823 
wrôãn_tŸÆ
 +
wrôãn
;

824  
wrôãn_tŸÆ
;

825 
JSONNuŒ
:

826 
	`APPEND_STRING
("null");

827  
wrôãn_tŸÆ
;

828 
JSONEº‹
:

833 
	}
}

835 
	$js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
) {

836 
size_t
 
i
 = 0, 
Àn
 = 
	`°æí
(
°rög
);

837 
c
 = '\0';

838 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

839 
	`APPEND_STRING
("\"");

840 
i
 = 0; i < 
Àn
; i++) {

841 
c
 = 
°rög
[
i
];

842 
c
) {

843 '\"': 
	`APPEND_STRING
("\\\""); ;

844 '\\': 
	`APPEND_STRING
("\\\\"); ;

845 '/': 
	`APPEND_STRING
("\\/"); ;

846 '\b': 
	`APPEND_STRING
("\\b"); ;

847 '\f': 
	`APPEND_STRING
("\\f"); ;

848 '\n': 
	`APPEND_STRING
("\\n"); ;

849 '\r': 
	`APPEND_STRING
("\\r"); ;

850 '\t': 
	`APPEND_STRING
("\\t"); ;

852 i‡(
buf
 !
NULL
) {

853 
buf
[0] = 
c
;

854 
buf
 += 1;

856 
wrôãn_tŸÆ
 += 1;

860 
	`APPEND_STRING
("\"");

861  
wrôãn_tŸÆ
;

862 
	}
}

864 
	$≠≥nd_ödít
(*
buf
, 
Àvñ
) {

865 
i
;

866 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

867 
i
 = 0; i < 
Àvñ
; i++) {

868 
	`APPEND_STRING
(" ");

870  
wrôãn_tŸÆ
;

871 
	}
}

873 
	$≠≥nd_°rög
(*
buf
, c⁄° *
°rög
) {

874 i‡(
buf
 =
NULL
) {

875  ()
	`°æí
(
°rög
);

877  
	`•rötf
(
buf
, "%s", 
°rög
);

878 
	}
}

880 #unde‡
APPEND_STRING


881 #unde‡
APPEND_INDENT


884 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe
(c⁄° *
fûíame
) {

885 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

886 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

887 i‡(
fûe_c⁄ã¡s
 =
NULL
)

888  
NULL
;

889 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög
(
fûe_c⁄ã¡s
);

890 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

891  
ouçut_vÆue
;

892 
	}
}

894 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
) {

895 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

896 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

897 i‡(
fûe_c⁄ã¡s
 =
NULL
)

898  
NULL
;

899 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög_wôh_commíts
(
fûe_c⁄ã¡s
);

900 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

901  
ouçut_vÆue
;

902 
	}
}

904 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög
(c⁄° *
°rög
) {

905 i‡(
°rög
 =
NULL
)

906  
NULL
;

907 
	`SKIP_WHITESPACES
(&
°rög
);

908 i‡(*
°rög
 != '{' && *string != '[')

909  
NULL
;

910  
	`∑r£_vÆue
((c⁄° **)&
°rög
, 0);

911 
	}
}

913 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
) {

914 
JSON_VÆue
 *
ªsu…
 = 
NULL
;

915 *
°rög_muèbÀ_c›y
 = 
NULL
, *
°rög_muèbÀ_c›y_±r
 = NULL;

916 
°rög_muèbÀ_c›y
 = 
	`∑rs⁄_°rdup
(
°rög
);

917 i‡(
°rög_muèbÀ_c›y
 =
NULL
)

918  
NULL
;

919 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "/*", "*/");

920 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "//", "\n");

921 
°rög_muèbÀ_c›y_±r
 = 
°rög_muèbÀ_c›y
;

922 
	`SKIP_WHITESPACES
(&
°rög_muèbÀ_c›y_±r
);

923 i‡(*
°rög_muèbÀ_c›y_±r
 != '{' && *string_mutable_copy_ptr != '[') {

924 
	`∑rs⁄_‰ì
(
°rög_muèbÀ_c›y
);

925  
NULL
;

927 
ªsu…
 = 
	`∑r£_vÆue
((c⁄° **)&
°rög_muèbÀ_c›y_±r
, 0);

928 
	`∑rs⁄_‰ì
(
°rög_muèbÀ_c›y
);

929  
ªsu…
;

930 
	}
}

935 
JSON_VÆue
 * 
	$js⁄_obje˘_gë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

936 i‡(
obje˘
 =
NULL
 || 
«me
 == NULL)

937  
NULL
;

938  
	`js⁄_obje˘_ngë_vÆue
(
obje˘
, 
«me
, 
	`°æí
(name));

939 
	}
}

941 c⁄° * 
	$js⁄_obje˘_gë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

942  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

943 
	}
}

945 
	$js⁄_obje˘_gë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

946  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

947 
	}
}

949 
JSON_Obje˘
 * 
	$js⁄_obje˘_gë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

950  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

951 
	}
}

953 
JSON_Aºay
 * 
	$js⁄_obje˘_gë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

954  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

955 
	}
}

957 
	$js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

958  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

959 
	}
}

961 
JSON_VÆue
 * 
	$js⁄_obje˘_dŸgë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

962 c⁄° *
dŸ_posôi⁄
 = 
	`°rchr
(
«me
, '.');

963 i‡(!
dŸ_posôi⁄
)

964  
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

965 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_ngë_vÆue
(obje˘, 
«me
, 
dŸ_posôi⁄
 -Çame));

966  
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
dŸ_posôi⁄
 + 1);

967 
	}
}

969 c⁄° * 
	$js⁄_obje˘_dŸgë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

970  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

971 
	}
}

973 
	$js⁄_obje˘_dŸgë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

974  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

975 
	}
}

977 
JSON_Obje˘
 * 
	$js⁄_obje˘_dŸgë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

978  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

979 
	}
}

981 
JSON_Aºay
 * 
	$js⁄_obje˘_dŸgë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

982  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

983 
	}
}

985 
	$js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

986  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

987 
	}
}

989 
size_t
 
	$js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
) {

990  
obje˘
 ? obje˘->
cou¡
 : 0;

991 
	}
}

993 c⁄° * 
	$js⁄_obje˘_gë_«me
(c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
) {

994 i‡(
ödex
 >
	`js⁄_obje˘_gë_cou¡
(
obje˘
))

995  
NULL
;

996  
obje˘
->
«mes
[
ödex
];

997 
	}
}

1000 
JSON_VÆue
 * 
	$js⁄_¨øy_gë_vÆue
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1001 i‡(
ödex
 >
	`js⁄_¨øy_gë_cou¡
(
¨øy
))

1002  
NULL
;

1003  
¨øy
->
ôems
[
ödex
];

1004 
	}
}

1006 c⁄° * 
	$js⁄_¨øy_gë_°rög
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1007  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1008 
	}
}

1010 
	$js⁄_¨øy_gë_numbî
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1011  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1012 
	}
}

1014 
JSON_Obje˘
 * 
	$js⁄_¨øy_gë_obje˘
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1015  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1016 
	}
}

1018 
JSON_Aºay
 * 
	$js⁄_¨øy_gë_¨øy
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1019  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1020 
	}
}

1022 
	$js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1023  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1024 
	}
}

1026 
size_t
 
	$js⁄_¨øy_gë_cou¡
(c⁄° 
JSON_Aºay
 *
¨øy
) {

1027  
¨øy
 ?áºay->
cou¡
 : 0;

1028 
	}
}

1031 
JSON_VÆue_Ty≥
 
	$js⁄_vÆue_gë_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1032  
vÆue
 ? vÆue->
ty≥
 : 
JSONEº‹
;

1033 
	}
}

1035 
JSON_Obje˘
 * 
	$js⁄_vÆue_gë_obje˘
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1036  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONObje˘
 ? vÆue->vÆue.
obje˘
 : 
NULL
;

1037 
	}
}

1039 
JSON_Aºay
 * 
	$js⁄_vÆue_gë_¨øy
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1040  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONAºay
 ? vÆue->vÆue.
¨øy
 : 
NULL
;

1041 
	}
}

1043 c⁄° * 
	$js⁄_vÆue_gë_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1044  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONSåög
 ? vÆue->vÆue.
°rög
 : 
NULL
;

1045 
	}
}

1047 
	$js⁄_vÆue_gë_numbî
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1048  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONNumbî
 ? vÆue->vÆue.
numbî
 : 0;

1049 
	}
}

1051 
	$js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1052  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONBoﬁón
 ? vÆue->vÆue.
boﬁón
 : -1;

1053 
	}
}

1055 
	$js⁄_vÆue_‰ì
(
JSON_VÆue
 *
vÆue
) {

1056 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1057 
JSONObje˘
:

1058 
	`js⁄_obje˘_‰ì
(
vÆue
->vÆue.
obje˘
);

1060 
JSONSåög
:

1061 i‡(
vÆue
->vÆue.
°rög
Ë{ 
	`∑rs⁄_‰ì
(value->value.string); }

1063 
JSONAºay
:

1064 
	`js⁄_¨øy_‰ì
(
vÆue
->vÆue.
¨øy
);

1069 
	`∑rs⁄_‰ì
(
vÆue
);

1070 
	}
}

1072 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_obje˘
() {

1073 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1074 i‡(!
√w_vÆue
)

1075  
NULL
;

1076 
√w_vÆue
->
ty≥
 = 
JSONObje˘
;

1077 
√w_vÆue
->
vÆue
.
obje˘
 = 
	`js⁄_obje˘_öô
();

1078 i‡(!
√w_vÆue
->
vÆue
.
obje˘
) {

1079 
	`∑rs⁄_‰ì
(
√w_vÆue
);

1080  
NULL
;

1082  
√w_vÆue
;

1083 
	}
}

1085 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_¨øy
() {

1086 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1087 i‡(!
√w_vÆue
)

1088  
NULL
;

1089 
√w_vÆue
->
ty≥
 = 
JSONAºay
;

1090 
√w_vÆue
->
vÆue
.
¨øy
 = 
	`js⁄_¨øy_öô
();

1091 i‡(!
√w_vÆue
->
vÆue
.
¨øy
) {

1092 
	`∑rs⁄_‰ì
(
√w_vÆue
);

1093  
NULL
;

1095  
√w_vÆue
;

1096 
	}
}

1098 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög
(c⁄° *
°rög
) {

1099 *
c›y
 = 
NULL
;

1100 
JSON_VÆue
 *
vÆue
;

1101 
size_t
 
°rög_Àn
 = 0;

1102 i‡(
°rög
 =
NULL
)

1103  
NULL
;

1104 
°rög_Àn
 = 
	`°æí
(
°rög
);

1105 i‡(!
	`is_vÆid_utf8
(
°rög
, 
°rög_Àn
))

1106  
NULL
;

1107 
c›y
 = 
	`∑rs⁄_°∫dup
(
°rög
, 
°rög_Àn
);

1108 i‡(
c›y
 =
NULL
)

1109  
NULL
;

1110 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
c›y
);

1111 i‡(
vÆue
 =
NULL
)

1112 
	`∑rs⁄_‰ì
(
c›y
);

1113  
vÆue
;

1114 
	}
}

1116 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_numbî
(
numbî
) {

1117 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1118 i‡(!
√w_vÆue
)

1119  
NULL
;

1120 
√w_vÆue
->
ty≥
 = 
JSONNumbî
;

1121 
√w_vÆue
->
vÆue
.
numbî
 =Çumber;

1122  
√w_vÆue
;

1123 
	}
}

1125 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_boﬁón
(
boﬁón
) {

1126 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1127 i‡(!
√w_vÆue
)

1128  
NULL
;

1129 
√w_vÆue
->
ty≥
 = 
JSONBoﬁón
;

1130 
√w_vÆue
->
vÆue
.
boﬁón
 = boolean ? 1 : 0;

1131  
√w_vÆue
;

1132 
	}
}

1134 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_nuŒ
() {

1135 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1136 i‡(!
√w_vÆue
)

1137  
NULL
;

1138 
√w_vÆue
->
ty≥
 = 
JSONNuŒ
;

1139  
√w_vÆue
;

1140 
	}
}

1142 
JSON_VÆue
 * 
	$js⁄_vÆue_dìp_c›y
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1143 
size_t
 
i
 = 0;

1144 
JSON_VÆue
 *
ªtu∫_vÆue
 = 
NULL
, *
ãmp_vÆue_c›y
 = NULL, *
ãmp_vÆue
 = NULL;

1145 c⁄° *
ãmp_°rög
 = 
NULL
, *
ãmp_key
 = NULL;

1146 *
ãmp_°rög_c›y
 = 
NULL
;

1147 
JSON_Aºay
 *
ãmp_¨øy
 = 
NULL
, *
ãmp_¨øy_c›y
 = NULL;

1148 
JSON_Obje˘
 *
ãmp_obje˘
 = 
NULL
, *
ãmp_obje˘_c›y
 = NULL;

1150 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1151 
JSONAºay
:

1152 
ãmp_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1153 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
();

1154 i‡(
ªtu∫_vÆue
 =
NULL
)

1155  
NULL
;

1156 
ãmp_¨øy_c›y
 = 
	`js⁄_vÆue_gë_¨øy
(
ªtu∫_vÆue
);

1157 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
ãmp_¨øy
); i++) {

1158 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
ãmp_¨øy
, 
i
);

1159 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1160 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1161 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1162  
NULL
;

1164 i‡(
	`js⁄_¨øy_add
(
ãmp_¨øy_c›y
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1165 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1166 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1167  
NULL
;

1170  
ªtu∫_vÆue
;

1171 
JSONObje˘
:

1172 
ãmp_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1173 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1174 i‡(
ªtu∫_vÆue
 =
NULL
)

1175  
NULL
;

1176 
ãmp_obje˘_c›y
 = 
	`js⁄_vÆue_gë_obje˘
(
ªtu∫_vÆue
);

1177 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
ãmp_obje˘
); i++) {

1178 
ãmp_key
 = 
	`js⁄_obje˘_gë_«me
(
ãmp_obje˘
, 
i
);

1179 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
ãmp_obje˘
, 
ãmp_key
);

1180 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1181 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1182 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1183  
NULL
;

1185 i‡(
	`js⁄_obje˘_add
(
ãmp_obje˘_c›y
, 
ãmp_key
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1186 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1187 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1188  
NULL
;

1191  
ªtu∫_vÆue
;

1192 
JSONBoﬁón
:

1193  
	`js⁄_vÆue_öô_boﬁón
(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
));

1194 
JSONNumbî
:

1195  
	`js⁄_vÆue_öô_numbî
(
	`js⁄_vÆue_gë_numbî
(
vÆue
));

1196 
JSONSåög
:

1197 
ãmp_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1198 
ãmp_°rög_c›y
 = 
	`∑rs⁄_°rdup
(
ãmp_°rög
);

1199 i‡(
ãmp_°rög_c›y
 =
NULL
)

1200  
NULL
;

1201 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
ãmp_°rög_c›y
);

1202 i‡(
ªtu∫_vÆue
 =
NULL
)

1203 
	`∑rs⁄_‰ì
(
ãmp_°rög_c›y
);

1204  
ªtu∫_vÆue
;

1205 
JSONNuŒ
:

1206  
	`js⁄_vÆue_öô_nuŒ
();

1207 
JSONEº‹
:

1208  
NULL
;

1210  
NULL
;

1212 
	}
}

1214 
size_t
 
	$js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1215 
num_buf
[1100];

1216 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 0, 
num_buf
);

1217  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1218 
	}
}

1220 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1221 
wrôãn
 = -1;

1222 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1223 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes) {

1224  
JSONFaûuª
;

1226 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 0, 
NULL
);

1227 i‡(
wrôãn
 < 0)

1228  
JSONFaûuª
;

1229  
JSONSuc˚ss
;

1230 
	}
}

1232 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1233 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1234 
FILE
 *
Â
 = 
NULL
;

1235 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög
(
vÆue
);

1236 i‡(
£rülized_°rög
 =
NULL
) {

1237  
JSONFaûuª
;

1239 
Â
 = 
	`f›í
 (
fûíame
, "w");

1240 i‡(
Â
 !
NULL
) {

1241 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1242 
ªtu∫_code
 = 
JSONFaûuª
;

1244 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1245 
ªtu∫_code
 = 
JSONFaûuª
;

1248 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1249  
ªtu∫_code
;

1250 
	}
}

1252 * 
	$js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1253 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1254 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1255 *
buf
 = 
NULL
;

1256 i‡(
buf_size_byãs
 == 0) {

1257  
NULL
;

1259 
buf
 = (*)
	`∑rs⁄_mÆloc
(
buf_size_byãs
);

1260 i‡(
buf
 =
NULL
)

1261  
NULL
;

1262 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r
(
vÆue
, 
buf
, 
buf_size_byãs
);

1263 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1264 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1265  
NULL
;

1267  
buf
;

1268 
	}
}

1270 
size_t
 
	$js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1271 
num_buf
[1100];

1272 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 1, 
num_buf
);

1273  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1274 
	}
}

1276 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1277 
wrôãn
 = -1;

1278 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1279 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes)

1280  
JSONFaûuª
;

1281 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 1, 
NULL
);

1282 i‡(
wrôãn
 < 0)

1283  
JSONFaûuª
;

1284  
JSONSuc˚ss
;

1285 
	}
}

1287 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1288 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1289 
FILE
 *
Â
 = 
NULL
;

1290 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög_¥ëty
(
vÆue
);

1291 i‡(
£rülized_°rög
 =
NULL
) {

1292  
JSONFaûuª
;

1294 
Â
 = 
	`f›í
 (
fûíame
, "w");

1295 i‡(
Â
 !
NULL
) {

1296 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1297 
ªtu∫_code
 = 
JSONFaûuª
;

1299 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1300 
ªtu∫_code
 = 
JSONFaûuª
;

1303 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1304  
ªtu∫_code
;

1305 
	}
}

1307 * 
	$js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1308 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1309 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1310 *
buf
 = 
NULL
;

1311 i‡(
buf_size_byãs
 == 0) {

1312  
NULL
;

1314 
buf
 = (*)
	`∑rs⁄_mÆloc
(
buf_size_byãs
);

1315 i‡(
buf
 =
NULL
)

1316  
NULL
;

1317 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r_¥ëty
(
vÆue
, 
buf
, 
buf_size_byãs
);

1318 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1319 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1320  
NULL
;

1322  
buf
;

1323 
	}
}

1325 
	$js⁄_‰ì_£rülized_°rög
(*
°rög
) {

1326 
	`∑rs⁄_‰ì
(
°rög
);

1327 
	}
}

1329 
JSON_Sètus
 
	$js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
) {

1330 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

1331 
size_t
 
œ°_ñemít_ix
 = 0;

1332 i‡(
¨øy
 =
NULL
 || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1333  
JSONFaûuª
;

1335 
œ°_ñemít_ix
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
) - 1;

1336 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1337 i‡(
ix
 !
œ°_ñemít_ix
) {

1338 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
œ°_ñemít_ix
);

1339 i‡(
ãmp_vÆue
 =
NULL
) {

1340  
JSONFaûuª
;

1342 
¨øy
->
ôems
[
ix
] = 
ãmp_vÆue
;

1344 
¨øy
->
cou¡
 -= 1;

1345  
JSONSuc˚ss
;

1346 
	}
}

1348 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
, 
JSON_VÆue
 *
vÆue
) {

1349 i‡(
¨øy
 =
NULL
 || 
vÆue
 =NULL || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1350  
JSONFaûuª
;

1352 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1353 
¨øy
->
ôems
[
ix
] = 
vÆue
;

1354  
JSONSuc˚ss
;

1355 
	}
}

1357 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
) {

1358 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1359 i‡(
vÆue
 =
NULL
)

1360  
JSONFaûuª
;

1361 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1362 
	`js⁄_vÆue_‰ì
(
vÆue
);

1363  
JSONFaûuª
;

1365  
JSONSuc˚ss
;

1366 
	}
}

1368 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
) {

1369 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1370 i‡(
vÆue
 =
NULL
)

1371  
JSONFaûuª
;

1372 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1373 
	`js⁄_vÆue_‰ì
(
vÆue
);

1374  
JSONFaûuª
;

1376  
JSONSuc˚ss
;

1377 
	}
}

1379 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
) {

1380 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1381 i‡(
vÆue
 =
NULL
)

1382  
JSONFaûuª
;

1383 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1384 
	`js⁄_vÆue_‰ì
(
vÆue
);

1385  
JSONFaûuª
;

1387  
JSONSuc˚ss
;

1388 
	}
}

1390 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
) {

1391 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1392 i‡(
vÆue
 =
NULL
)

1393  
JSONFaûuª
;

1394 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1395 
	`js⁄_vÆue_‰ì
(
vÆue
);

1396  
JSONFaûuª
;

1398  
JSONSuc˚ss
;

1399 
	}
}

1401 
JSON_Sètus
 
	$js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
) {

1402 
size_t
 
i
 = 0;

1403 i‡(
¨øy
 =
NULL
)

1404  
JSONFaûuª
;

1405 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
¨øy
); i++) {

1406 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
));

1408 
¨øy
->
cou¡
 = 0;

1409  
JSONSuc˚ss
;

1410 
	}
}

1412 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

1413 i‡(
¨øy
 =
NULL
 || 
vÆue
 == NULL)

1414  
JSONFaûuª
;

1415  
	`js⁄_¨øy_add
(
¨øy
, 
vÆue
);

1416 
	}
}

1418 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
) {

1419 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1420 i‡(
vÆue
 =
NULL
)

1421  
JSONFaûuª
;

1422 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1423 
	`js⁄_vÆue_‰ì
(
vÆue
);

1424  
JSONFaûuª
;

1426  
JSONSuc˚ss
;

1427 
	}
}

1429 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
) {

1430 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1431 i‡(
vÆue
 =
NULL
)

1432  
JSONFaûuª
;

1433 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1434 
	`js⁄_vÆue_‰ì
(
vÆue
);

1435  
JSONFaûuª
;

1437  
JSONSuc˚ss
;

1438 
	}
}

1440 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
) {

1441 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1442 i‡(
vÆue
 =
NULL
)

1443  
JSONFaûuª
;

1444 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1445 
	`js⁄_vÆue_‰ì
(
vÆue
);

1446  
JSONFaûuª
;

1448  
JSONSuc˚ss
;

1449 
	}
}

1451 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
) {

1452 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1453 i‡(
vÆue
 =
NULL
)

1454  
JSONFaûuª
;

1455 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1456 
	`js⁄_vÆue_‰ì
(
vÆue
);

1457  
JSONFaûuª
;

1459  
JSONSuc˚ss
;

1460 
	}
}

1462 
JSON_Sètus
 
	$js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1463 
size_t
 
i
 = 0;

1464 
JSON_VÆue
 *
ﬁd_vÆue
;

1465 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL)

1466  
JSONFaûuª
;

1467 
ﬁd_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

1468 i‡(
ﬁd_vÆue
 !
NULL
) {

1469 
	`js⁄_vÆue_‰ì
(
ﬁd_vÆue
);

1470 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1471 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1472 
obje˘
->
vÆues
[
i
] = 
vÆue
;

1473  
JSONSuc˚ss
;

1478  
	`js⁄_obje˘_add
(
obje˘
, 
«me
, 
vÆue
);

1479 
	}
}

1481 
JSON_Sètus
 
	$js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1482  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_°rög
(
°rög
));

1483 
	}
}

1485 
JSON_Sètus
 
	$js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1486  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_numbî
(
numbî
));

1487 
	}
}

1489 
JSON_Sètus
 
	$js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1490  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
));

1491 
	}
}

1493 
JSON_Sètus
 
	$js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1494  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_nuŒ
());

1495 
	}
}

1497 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1498 c⁄° *
dŸ_pos
 = 
NULL
;

1499 *
cuºít_«me
 = 
NULL
;

1500 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1501 
JSON_VÆue
 *
√w_vÆue
 = 
NULL
;

1502 i‡(
vÆue
 =
NULL
 || 
«me
 == NULL || value == NULL)

1503  
JSONFaûuª
;

1504 
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1505 i‡(
dŸ_pos
 =
NULL
) {

1506  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
vÆue
);

1508 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1509 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1510 i‡(
ãmp_obj
 =
NULL
) {

1511 
√w_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1512 i‡(
√w_vÆue
 =
NULL
) {

1513 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1514  
JSONFaûuª
;

1516 i‡(
	`js⁄_obje˘_add
(
obje˘
, 
cuºít_«me
, 
√w_vÆue
Ë=
JSONFaûuª
) {

1517 
	`js⁄_vÆue_‰ì
(
√w_vÆue
);

1518 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1519  
JSONFaûuª
;

1521 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1523 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1524  
	`js⁄_obje˘_dŸ£t_vÆue
(
ãmp_obj
, 
dŸ_pos
 + 1, 
vÆue
);

1526 
	}
}

1528 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1529 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1530 i‡(
vÆue
 =
NULL
)

1531  
JSONFaûuª
;

1532 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1533 
	`js⁄_vÆue_‰ì
(
vÆue
);

1534  
JSONFaûuª
;

1536  
JSONSuc˚ss
;

1537 
	}
}

1539 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1540 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1541 i‡(
vÆue
 =
NULL
)

1542  
JSONFaûuª
;

1543 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1544 
	`js⁄_vÆue_‰ì
(
vÆue
);

1545  
JSONFaûuª
;

1547  
JSONSuc˚ss
;

1548 
	}
}

1550 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1551 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1552 i‡(
vÆue
 =
NULL
)

1553  
JSONFaûuª
;

1554 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1555 
	`js⁄_vÆue_‰ì
(
vÆue
);

1556  
JSONFaûuª
;

1558  
JSONSuc˚ss
;

1559 
	}
}

1561 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1562 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1563 i‡(
vÆue
 =
NULL
)

1564  
JSONFaûuª
;

1565 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1566 
	`js⁄_vÆue_‰ì
(
vÆue
);

1567  
JSONFaûuª
;

1569  
JSONSuc˚ss
;

1570 
	}
}

1572 
JSON_Sètus
 
	$js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1573 
size_t
 
i
 = 0, 
œ°_ôem_ödex
 = 0;

1574 i‡(
obje˘
 =
NULL
 || 
	`js⁄_obje˘_gë_vÆue
(obje˘, 
«me
) == NULL)

1575  
JSONFaûuª
;

1576 
œ°_ôem_ödex
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
) - 1;

1577 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1578 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1579 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[
i
]);

1580 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1581 i‡(
i
 !
œ°_ôem_ödex
) {

1582 
obje˘
->
«mes
[
i
] = obje˘->«mes[
œ°_ôem_ödex
];

1583 
obje˘
->
vÆues
[
i
] = obje˘->vÆues[
œ°_ôem_ödex
];

1585 
obje˘
->
cou¡
 -= 1;

1586  
JSONSuc˚ss
;

1589  
JSONFaûuª
;

1590 
	}
}

1592 
JSON_Sètus
 
	$js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1593 c⁄° *
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1594 *
cuºít_«me
 = 
NULL
;

1595 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1596 i‡(
dŸ_pos
 =
NULL
) {

1597  
	`js⁄_obje˘_ªmove
(
obje˘
, 
«me
);

1599 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1600 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1601 i‡(
ãmp_obj
 =
NULL
) {

1602 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1603  
JSONFaûuª
;

1605 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1606  
	`js⁄_obje˘_dŸªmove
(
ãmp_obj
, 
dŸ_pos
 + 1);

1608 
	}
}

1610 
JSON_Sètus
 
	$js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
) {

1611 
size_t
 
i
 = 0;

1612 i‡(
obje˘
 =
NULL
) {

1613  
JSONFaûuª
;

1615 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1616 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[
i
]);

1617 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1619 
obje˘
->
cou¡
 = 0;

1620  
JSONSuc˚ss
;

1621 
	}
}

1623 
JSON_Sètus
 
	$js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
) {

1624 
JSON_VÆue
 *
ãmp_schema_vÆue
 = 
NULL
, *
ãmp_vÆue
 = NULL;

1625 
JSON_Aºay
 *
schema_¨øy
 = 
NULL
, *
vÆue_¨øy
 = NULL;

1626 
JSON_Obje˘
 *
schema_obje˘
 = 
NULL
, *
vÆue_obje˘
 = NULL;

1627 
JSON_VÆue_Ty≥
 
schema_ty≥
 = 
JSONEº‹
, 
vÆue_ty≥
 = JSONError;

1628 c⁄° *
key
 = 
NULL
;

1629 
size_t
 
i
 = 0, 
cou¡
 = 0;

1630 i‡(
schema
 =
NULL
 || 
vÆue
 == NULL)

1631  
JSONFaûuª
;

1632 
schema_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
schema
);

1633 
vÆue_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1634 i‡(
schema_ty≥
 !
vÆue_ty≥
 && schema_ty≥ !
JSONNuŒ
)

1635  
JSONFaûuª
;

1636 
schema_ty≥
) {

1637 
JSONAºay
:

1638 
schema_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
schema
);

1639 
vÆue_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1640 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
schema_¨øy
);

1641 i‡(
cou¡
 == 0)

1642  
JSONSuc˚ss
;

1644 
ãmp_schema_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
schema_¨øy
, 0);

1645 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
vÆue_¨øy
); i++) {

1646 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
vÆue_¨øy
, 
i
);

1647 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
) == 0) {

1648  
JSONFaûuª
;

1651  
JSONSuc˚ss
;

1652 
JSONObje˘
:

1653 
schema_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
schema
);

1654 
vÆue_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1655 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
schema_obje˘
);

1656 i‡(
cou¡
 == 0)

1657  
JSONSuc˚ss
;

1658 i‡(
	`js⁄_obje˘_gë_cou¡
(
vÆue_obje˘
Ë< 
cou¡
)

1659  
JSONFaûuª
;

1660 
i
 = 0; i < 
cou¡
; i++) {

1661 
key
 = 
	`js⁄_obje˘_gë_«me
(
schema_obje˘
, 
i
);

1662 
ãmp_schema_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
schema_obje˘
, 
key
);

1663 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
vÆue_obje˘
, 
key
);

1664 i‡(
ãmp_vÆue
 =
NULL
)

1665  
JSONFaûuª
;

1666 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
Ë=
JSONFaûuª
)

1667  
JSONFaûuª
;

1669  
JSONSuc˚ss
;

1670 
JSONSåög
: 
JSONNumbî
: 
JSONBoﬁón
: 
JSONNuŒ
:

1671  
JSONSuc˚ss
;

1672 
JSONEº‹
: :

1673  
JSONFaûuª
;

1675 
	}
}

1677 
JSON_Sètus
 
	$js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
) {

1678 
JSON_Obje˘
 *
a_obje˘
 = 
NULL
, *
b_obje˘
 = NULL;

1679 
JSON_Aºay
 *
a_¨øy
 = 
NULL
, *
b_¨øy
 = NULL;

1680 c⁄° *
a_°rög
 = 
NULL
, *
b_°rög
 = NULL;

1681 c⁄° *
key
 = 
NULL
;

1682 
size_t
 
a_cou¡
 = 0, 
b_cou¡
 = 0, 
i
 = 0;

1683 
JSON_VÆue_Ty≥
 
a_ty≥
, 
b_ty≥
;

1684 
a_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
a
);

1685 
b_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
b
);

1686 i‡(
a_ty≥
 !
b_ty≥
) {

1689 
a_ty≥
) {

1690 
JSONAºay
:

1691 
a_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
a
);

1692 
b_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
b
);

1693 
a_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
a_¨øy
);

1694 
b_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
b_¨øy
);

1695 i‡(
a_cou¡
 !
b_cou¡
) {

1698 
i
 = 0; i < 
a_cou¡
; i++) {

1699 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_¨øy_gë_vÆue
(
a_¨øy
, 
i
),

1700 
	`js⁄_¨øy_gë_vÆue
(
b_¨øy
, 
i
))) {

1705 
JSONObje˘
:

1706 
a_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
a
);

1707 
b_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
b
);

1708 
a_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
a_obje˘
);

1709 
b_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
b_obje˘
);

1710 i‡(
a_cou¡
 !
b_cou¡
) {

1713 
i
 = 0; i < 
a_cou¡
; i++) {

1714 
key
 = 
	`js⁄_obje˘_gë_«me
(
a_obje˘
, 
i
);

1715 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_obje˘_gë_vÆue
(
a_obje˘
, 
key
),

1716 
	`js⁄_obje˘_gë_vÆue
(
b_obje˘
, 
key
))) {

1721 
JSONSåög
:

1722 
a_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
a
);

1723 
b_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
b
);

1724  
	`°rcmp
(
a_°rög
, 
b_°rög
) == 0;

1725 
JSONBoﬁón
:

1726  
	`js⁄_vÆue_gë_boﬁón
(
a
Ë=js⁄_vÆue_gë_boﬁón(
b
);

1727 
JSONNumbî
:

1728  
	`Ábs
(
	`js⁄_vÆue_gë_numbî
(
a
Ë- js⁄_vÆue_gë_numbî(
b
)) < 0.000001;

1729 
JSONEº‹
:

1731 
JSONNuŒ
:

1736 
	}
}

1738 
JSON_VÆue_Ty≥
 
	$js⁄_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1739  
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1740 
	}
}

1742 
JSON_Obje˘
 * 
	$js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1743  
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1744 
	}
}

1746 
JSON_Aºay
 * 
	$js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1747  
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1748 
	}
}

1750 c⁄° * 
	$js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1751  
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1752 
	}
}

1754 
	$js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1755  
	`js⁄_vÆue_gë_numbî
(
vÆue
);

1756 
	}
}

1758 
	$js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1759  
	`js⁄_vÆue_gë_boﬁón
(
vÆue
);

1760 
	}
}

1762 
	$js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
) {

1763 
∑rs⁄_mÆloc
 = 
mÆloc_fun
;

1764 
∑rs⁄_‰ì
 = 
‰ì_fun
;

1765 
	}
}

	@lora_pkt_fwd/src/radio.c

12 
	~"ødio.h
"

14 c⁄° 
uöt8_t
 
	grxl‹aúqmask
[] = {

15 [
RXMODE_SINGLE
] = 
IRQ_LORA_RXDONE_MASK
|
IRQ_LORA_CRCERR_MASK
,

16 [
RXMODE_SCAN
] = 
IRQ_LORA_RXDONE_MASK
|
IRQ_LORA_CRCERR_MASK
,

17 [
RXMODE_RSSI
] = 0x00,

25 
boﬁ
 
	$gpio_ª£rve
(
gpio
) {

26 
fd
;

27 
buf
[3];

30 
fd
 = 
	`›í
("/sys/˛ass/gpio/exp‹t", 
O_WRONLY
);

31 i‡(
fd
 < 0) {

33 
	`Ârötf
(
°dîr
, "gpio_reserve: couldÇot open /sys/class/gpio/export\r\n");

34  
Ál£
;

38 
	`¢¥ötf
(
buf
, 3, "%d", 
gpio
);

41 i‡(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)) < 0) {

42 
	`˛o£
(
fd
);

43 
	`Ârötf
(
°dîr
, "gpio_ª£rve: couldÇŸ wrôê'%s'Åÿ/sys/˛ass/gpio/exp‹t\r\n", 
buf
);

44  
Ál£
;

48 i‡(
	`˛o£
(
fd
) < 0) {

49 
	`Ârötf
(
°dîr
, "gpio_reserve: couldÇot close /sys/class/gpio/export\r\n");

50  
Ál£
;

54  
åue
;

55 
	}
}

62 
boﬁ
 
	$gpio_ªÀa£
(
gpio
) {

63 
fd
;

64 
buf
[3];

67 
fd
 = 
	`›í
("/sys/˛ass/gpio/u√xp‹t", 
O_WRONLY
);

68 i‡(
fd
 < 0) {

70 
	`Ârötf
(
°dîr
, "gpio_release: couldÇot open /sys/class/gpio/unexport\r\n");

71  
Ál£
;

75 
	`¢¥ötf
(
buf
, 3, "%d", 
gpio
);

78 i‡(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)) < 0) {

79 
	`Ârötf
(
°dîr
, "gpio_release: couldÇot write /sys/class/gpio/unexport\r\n");

80  
Ál£
;

84 i‡(
	`˛o£
(
fd
) < 0) {

85 
	`Ârötf
(
°dîr
, "gpio_release: couldÇot close /sys/class/gpio/unexport\r\n");

86  
Ál£
;

90  
åue
;

91 
	}
}

99 
boﬁ
 
	$gpio_£t_dúe˘i⁄
(
gpio
, 
dúe˘i⁄
) {

100 
fd
;

101 
buf
[33];

104 
	`¢¥ötf
(
buf
, 33, "/sys/˛ass/gpio/gpio%d/dúe˘i⁄", 
gpio
);

107 
fd
 = 
	`›í
(
buf
, 
O_WRONLY
);

108 i‡(
fd
 < 0) {

110  
Ál£
;

114 i‡(
dúe˘i⁄
 =
GPIO_OUT
) {

115 i‡(
	`wrôe
(
fd
, "out", 3) < 0) {

116  
Ál£
;

119 i‡(
	`wrôe
(
fd
, "in", 2) < 0) {

120  
Ál£
;

125 i‡(
	`˛o£
(
fd
) < 0) {

126  
Ál£
;

130  
åue
;

131 
	}
}

139 
boﬁ
 
	$gpio_£t_°©e
(
gpio
, 
°©e
) {

140 
fd
;

141 
buf
[29];

144 
	`¢¥ötf
(
buf
, 29, "/sys/˛ass/gpio/gpio%d/vÆue", 
gpio
);

147 
fd
 = 
	`›í
(
buf
, 
O_WRONLY
);

148 i‡(
fd
 < 0) {

150  
Ál£
;

154 i‡(
	`wrôe
(
fd
, (
°©e
 == 1 ? "1" : "0"), 1) < 0) {

155  
Ál£
;

159 i‡(
	`˛o£
(
fd
) < 0) {

160  
Ál£
;

164  
åue
;

165 
	}
}

173 
	$gpio_gë_°©e
(
gpio
) {

174 
fd
;

175 
buf
[29];

176 
p‹t_°©e
;

177 
°©e
;

180 
	`¢¥ötf
(
buf
, 29, "/sys/˛ass/gpio/gpio%d/vÆue", 
gpio
);

183 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

184 i‡(
fd
 < 0) {

186 
	`Ârötf
(
°dîr
, "gpio_gë_°©e: couldÇŸ o≥¿/sys/˛ass/gpio/gpio%d/vÆue\r\n", 
gpio
);

187  
LOW
;

191 i‡(
	`ªad
(
fd
, &
p‹t_°©e
, 1) < 0) {

192 
	`˛o£
(
fd
);

193 
	`Ârötf
(
°dîr
, "gpio_gë_°©e: couldÇŸÑód /sys/˛ass/gpio/gpio%d/vÆue\r\n", 
gpio
);

194  
LOW
;

198 
°©e
 = 
p‹t_°©e
 ='1' ? 
HIGH
 : 
LOW
;

201 i‡(
	`˛o£
(
fd
) < 0) {

202 
	`Ârötf
(
°dîr
, "gpio_gë_°©e: couldÇŸ clo£ /sys/˛ass/gpio/gpio%d/vÆue\r\n", 
gpio
);

203  
LOW
;

207  
°©e
;

208 
	}
}

212 
	$digôÆWrôe
(
gpio
, 
°©e
)

214 
	`gpio_ª£rve
(
gpio
);

215 
	`gpio_£t_dúe˘i⁄
(
gpio
, 
GPIO_OUT
);

216 
	`gpio_£t_°©e
(
gpio
, 
°©e
);

217 
	`gpio_ªÀa£
(
gpio
);

218 
	}
}

227 
	$digôÆRód
(
gpio
) {

228 
°©e
;

231 i‡(!
	`gpio_ª£rve
(
gpio
)) {

236 
°©e
 = 
	`gpio_gë_°©e
(
gpio
);

238 i‡(!
	`gpio_ªÀa£
(
gpio
)) {

243  
°©e
;

244 
	}
}

249 
	$•i_w
(
uöt8_t
 
•idev
, uöt8_à
addªss
, uöt8_à
d©a
) {

250 
uöt8_t
 
out_buf
[3];

251 
uöt8_t
 
comm™d_size
;

252 
•i_ioc_å™s„r
 
k
;

253 
a
;

256 i‡((
addªss
 & 0x80) != 0) {

257 
	`Ârötf
(
°dîr
, "WARNING: SPIáddress > 127\n");

261 
out_buf
[0] = 
WRITE_ACCESS
 | (
addªss
 & 0x7F);

262 
out_buf
[1] = 
d©a
;

263 
comm™d_size
 = 2;

266 
	`mem£t
(&
k
, 0, (k));

267 
k
.
tx_buf
 = (Ë
out_buf
;

268 
k
.
Àn
 = 
comm™d_size
;

269 
k
.
•ìd_hz
 = 
SPI_SPEED
;

270 
k
.
cs_ch™ge
 = 0;

271 
k
.
bôs_≥r_w‹d
 = 8;

272 
a
 = 
	`io˘l
(
•idev
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

275 i‡(
a
 !()
k
.
Àn
) {

276 
	`Ârötf
(
°dîr
, "ERROR: SPI WRITE FAILURE\n");

282 
	}
}

287 
	$•i_r
(
uöt8_t
 
•idev
, uöt8_à
addªss
, uöt8_à*
d©a
) {

288 
uöt8_t
 
out_buf
[3];

289 
uöt8_t
 
comm™d_size
;

290 
uöt8_t
 
ö_buf
[10];

291 
•i_ioc_å™s„r
 
k
;

292 
a
;

295 i‡((
addªss
 & 0x80) != 0) {

296 
	`Ârötf
(
°dîr
, "WARNING: SPIáddress > 127\n");

300 
out_buf
[0] = 
READ_ACCESS
 | (
addªss
 & 0x7F);

301 
out_buf
[1] = 0x00;

302 
comm™d_size
 = 2;

305 
	`mem£t
(&
k
, 0, (k));

306 
k
.
tx_buf
 = (Ë
out_buf
;

307 
k
.
rx_buf
 = (Ë
ö_buf
;

308 
k
.
Àn
 = 
comm™d_size
;

309 
k
.
cs_ch™ge
 = 0;

310 
a
 = 
	`io˘l
(
•idev
, 
	`SPI_IOC_MESSAGE
(1), &
k
);

313 i‡(
a
 !()
k
.
Àn
) {

314 
	`Ârötf
(
°dîr
, "ERROR: SPI READ FAILURE\n");

318 *
d©a
 = 
ö_buf
[
comm™d_size
 - 1];

321 
	}
}

325 
uöt8_t
 
	$ªadReg
(
uöt8_t
 
•idev
, uöt8_à
addr
)

327 
uöt8_t
 
d©a
 = 0x00;

329 
	`•i_r
(
•idev
, 
addr
, &
d©a
);

331  
d©a
;

332 
	}
}

336 
	$wrôeReg
(
uöt8_t
 
•idev
, uöt8_à
addr
, uöt8_à
vÆue
)

338 
	`•i_w
(
•idev
, 
addr
, 
vÆue
);

339 
	}
}

343 
	$›mode
 (
uöt8_t
 
•idev
, uöt8_à
mode
) {

344 
	`wrôeReg
(
•idev
, 
REG_OPMODE
, (
	`ªadReg
(•idev, REG_OPMODEË& ~
OPMODE_MASK
Ë| 
mode
);

345 
	}
}

349 
	$›modeL‹a
(
uöt8_t
 
•idev
) {

350 
uöt8_t
 
u
 = 
OPMODE_LORA
 | 0x8;

351 
	`wrôeReg
(
•idev
, 
REG_OPMODE
, 
u
);

352 
	}
}

357 
	$£t‰eq
(
uöt8_t
 
•idev
, 
‰equícy
)

359 
uöt64_t
 
‰f
 = ((uöt64_t)
‰equícy
 << 19) / 32000000;

361 
	`wrôeReg
(
•idev
, 
REG_FRF_MSB
, (
uöt8_t
)(
‰f
 >> 16));

362 
	`wrôeReg
(
•idev
, 
REG_FRF_MID
, (
uöt8_t
)(
‰f
 >> 8));

363 
	`wrôeReg
(
•idev
, 
REG_FRF_LSB
, (
uöt8_t
)(
‰f
 >> 0));

364 
	}
}

368 
	$£tsf
(
uöt8_t
 
•idev
, 
sf
)

370 i‡(
sf
 < 6) {

371 
sf
 = 6;

372 } i‡(
sf
 > 12) {

373 
sf
 = 12;

376 i‡(
sf
 == 6) {

377 
	`wrôeReg
(
•idev
, 
REG_DETECTION_OPTIMIZE
, 0xc5);

378 
	`wrôeReg
(
•idev
, 
REG_DETECTION_THRESHOLD
, 0x0c);

380 
	`wrôeReg
(
•idev
, 
REG_DETECTION_OPTIMIZE
, 0xc3);

381 
	`wrôeReg
(
•idev
, 
REG_DETECTION_THRESHOLD
, 0x0a);

384 
	`wrôeReg
(
•idev
, 
REG_MODEM_CONFIG2
, (
	`ªadReg
(•idev, REG_MODEM_CONFIG2Ë& 0x0fË| ((
sf
 << 4) & 0xf0));

385 
	}
}

389 
	$£tsbw
(
uöt8_t
 
•idev
, 
sbw
)

391 
bw
;

393 i‡(
sbw
 <= 7.8E3) {

394 
bw
 = 0;

395 } i‡(
sbw
 <= 10.4E3) {

396 
bw
 = 1;

397 } i‡(
sbw
 <= 15.6E3) {

398 
bw
 = 2;

399 } i‡(
sbw
 <= 20.8E3) {

400 
bw
 = 3;

401 } i‡(
sbw
 <= 31.25E3) {

402 
bw
 = 4;

403 } i‡(
sbw
 <= 41.7E3) {

404 
bw
 = 5;

405 } i‡(
sbw
 <= 62.5E3) {

406 
bw
 = 6;

407 } i‡(
sbw
 <= 125E3) {

408 
bw
 = 7;

409 } i‡(
sbw
 <= 250E3) {

410 
bw
 = 8;

412 
bw
 = 9;

415 
	`wrôeReg
(
•idev
, 
REG_MODEM_CONFIG
, (
	`ªadReg
(•idev, REG_MODEM_CONFIGË& 0x0fË| (
bw
 << 4));

416 
	}
}

420 
	$£t¸
(
uöt8_t
 
•idev
, 
díomö©‹
)

422 i‡(
díomö©‹
 < 1) {

423 
díomö©‹
 = 1;

424 } i‡(
díomö©‹
 > 4) {

425 
díomö©‹
 = 4;

428 
	`wrôeReg
(
•idev
, 
REG_MODEM_CONFIG
, (
	`ªadReg
(•idev, REG_MODEM_CONFIGË& 0xf1Ë| (
díomö©‹
 << 1));

429 
	}
}

433 
	$£çæí
(
uöt8_t
 
•idev
, 
Àngth
)

435 
	`wrôeReg
(
•idev
, 
REG_PREAMBLE_MSB
, (
uöt8_t
)(
Àngth
 >> 8));

436 
	`wrôeReg
(
•idev
, 
REG_PREAMBLE_LSB
, (
uöt8_t
)(
Àngth
 >> 0));

437 
	}
}

441 
	$£tsyncw‹d
(
uöt8_t
 
•idev
, 
sw
)

443 
	`wrôeReg
(
•idev
, 
REG_SYNC_WORD
, 
sw
);

444 
	}
}

448 
	$¸ccheck
(
uöt8_t
 
•idev
, uöt8_à
no¸c
)

450 i‡(
no¸c
)

451 
	`wrôeReg
(
•idev
, 
REG_MODEM_CONFIG2
, 
	`ªadReg
(spidev, REG_MODEM_CONFIG2) & 0xfb);

453 
	`wrôeReg
(
•idev
, 
REG_MODEM_CONFIG2
, 
	`ªadReg
(spidev, REG_MODEM_CONFIG2) | 0x04);

454 
	}
}

460 
	$•i_›í
(*
•i_∑th
) {

461 
a
 = 0, 
b
 = 0;

462 
i
, 
•idev
 = 0;

465 
•idev
 = 
	`›í
(
•i_∑th
, 
O_RDWR
);

466 i‡(
•idev
 < 0) {

467 
	`Ârötf
(
°dîr
, "ERROR: faûedÅÿ›í SPI devi˚ %s\n", 
•i_∑th
);

472 
i
 = 
SPI_MODE_0
;

473 
a
 = 
	`io˘l
(
•idev
, 
SPI_IOC_WR_MODE
, &
i
);

474 
b
 = 
	`io˘l
(
•idev
, 
SPI_IOC_RD_MODE
, &
i
);

475 i‡((
a
 < 0Ë|| (
b
 < 0)) {

476 
	`Ârötf
(
°dîr
, "ERROR(%s): SPI PORT FAIL TO SET IN MODE 0\n", 
•i_∑th
);

477 
	`˛o£
(
•idev
);

482 
i
 = 
SPI_SPEED
;

483 
a
 = 
	`io˘l
(
•idev
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
i
);

484 
b
 = 
	`io˘l
(
•idev
, 
SPI_IOC_RD_MAX_SPEED_HZ
, &
i
);

485 i‡((
a
 < 0Ë|| (
b
 < 0)) {

486 
	`Ârötf
(
°dîr
, "ERROR(%s): SPI PORT FAIL TO SET MAX SPEED\n", 
•i_∑th
);

487 
	`˛o£
(
•idev
);

492 
i
 = 0;

493 
a
 = 
	`io˘l
(
•idev
, 
SPI_IOC_WR_LSB_FIRST
, &
i
);

494 
b
 = 
	`io˘l
(
•idev
, 
SPI_IOC_RD_LSB_FIRST
, &
i
);

495 i‡((
a
 < 0Ë|| (
b
 < 0)) {

496 
	`Ârötf
(
°dîr
, "ERROR(%s): SPI PORT FAIL TO SET MSB FIRST\n", 
•i_∑th
);

497 
	`˛o£
(
•idev
);

502 
i
 = 0;

503 
a
 = 
	`io˘l
(
•idev
, 
SPI_IOC_WR_BITS_PER_WORD
, &
i
);

504 
b
 = 
	`io˘l
(
•idev
, 
SPI_IOC_RD_BITS_PER_WORD
, &
i
);

505 i‡((
a
 < 0Ë|| (
b
 < 0)) {

506 
	`Ârötf
(
°dîr
, "ERROR(%s): SPI PORT FAIL TO SET 8 BITS-PER-WORD\n", 
•i_∑th
);

507 
	`˛o£
(
•idev
);

511 
	`Ârötf
(
°dîr
, "NŸe(%s): SPIÖ‹à›íedánd c⁄figuªd ok\n", 
•i_∑th
);

512  
•idev
;

513 
	}
}

519 
boﬁ
 
	$gë_ødio_vîsi⁄
(
ødiodev
 *radiodev)

521 
	`digôÆWrôe
(
ødiodev
->
r°
, 
LOW
);

522 
	`¶ìp
(1);

523 
	`digôÆWrôe
(
ødiodev
->
r°
, 
HIGH
);

524 
	`¶ìp
(1);

526 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_SLEEP
);

527 
uöt8_t
 
vîsi⁄
 = 
	`ªadReg
(
ødiodev
->
•ù‹t
, 
REG_VERSION
);

529 i‡(
vîsi⁄
 == 0x12) {

530 
	`Ârötf
(
°dîr
, "%s: SX1276 dëe˘ed, sèπög.\n", 
ødiodev
->
desc
);

531  
åue
;

533 
	`Ârötf
(
°dîr
, "%s: UƒecognizedÅøns˚ivî.\n", 
ødiodev
->
desc
);

534  
Ál£
;

537 
	}
}

539 
	$£tup_ch™√l
(
ødiodev
 *radiodev)

541 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_SLEEP
);

543 
	`¥ötf
("Sëu∞%†Ch™√l: fªq = %d, s‡%d, spò%d\n", 
ødiodev
->
desc
,Ñadiodev->
‰eq
,Ñadiodev->
sf
,Ñadiodev->
•ù‹t
);

544 
	`£t‰eq
(
ødiodev
->
•ù‹t
,Ñadiodev->
‰eq
);

545 
	`£tsf
(
ødiodev
->
•ù‹t
,Ñadiodev->
sf
);

546 
	`£tsbw
(
ødiodev
->
•ù‹t
,Ñadiodev->
bw
);

547 
	`£t¸
(
ødiodev
->
•ù‹t
,Ñadiodev->
¸
);

548 
	`£çæí
(
ødiodev
->
•ù‹t
,Ñadiodev->
¥Àn
);

549 
	`£tsyncw‹d
(
ødiodev
->
•ù‹t
, 
LORA_MAC_PREAMBLE
);

553 i‡(!
ødiodev
->
övîtio
)

554 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_INVERTIQ
, 
	`ªadReg
(radiodev->spiport, REG_INVERTIQ) & ~(1<<6));

556 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_INVERTIQ
, 
	`ªadReg
(radiodev->spiport, REG_INVERTIQ) | (1<<6));

560 
	`¸ccheck
(
ødiodev
->
•ù‹t
,Ñadiodev->
no¸c
);

563 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_LNA
, 
LNA_MAX_GAIN
);

566 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_MODEM_CONFIG3
, 
SX1276_MC3_AGCAUTO
);

569 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_PACONFIG
, (
uöt8_t
)(0x80|(15&0xf)));

570 
	}
}

574 
	$rxl‹a
(
•idev
, 
uöt8_t
 
rxmode
)

577 
	`›modeL‹a
(
•idev
);

580 
	`›mode
(
•idev
, 
OPMODE_STANDBY
);

582 if(
rxmode
 =
RXMODE_RSSI
) {

583 
	`wrôeReg
(
•idev
, 
REG_MODEM_CONFIG
, 
RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1
);

584 
	`wrôeReg
(
•idev
, 
REG_MODEM_CONFIG2
, 
RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2
);

587 
	`wrôeReg
(
•idev
, 
REG_MAX_PAYLOAD_LENGTH
, 0x80);

589 
	`wrôeReg
(
•idev
, 
REG_HOP_PERIOD
, 0xFF);

590 
	`wrôeReg
(
•idev
, 
REG_FIFO_RX_BASE_AD
, 0x00);

591 
	`wrôeReg
(
•idev
, 
REG_FIFO_ADDR_PTR
, 0x00);

594 
	`wrôeReg
(
•idev
, 
REG_DIO_MAPPING_1
, 
MAP_DIO0_LORA_RXDONE
|
MAP_DIO1_LORA_RXTOUT
|
MAP_DIO2_LORA_NOP
);

597 
	`wrôeReg
(
•idev
, 
REG_IRQ_FLAGS
, 0xFF);

599 
	`wrôeReg
(
•idev
, 
REG_IRQ_FLAGS_MASK
, ~
rxl‹aúqmask
[
rxmode
]);

601 
	`£tsyncw‹d
(
•idev
, 
LORA_MAC_PREAMBLE
);

604 i‡(
rxmode
 =
RXMODE_SINGLE
) {

606 
	`›mode
(
•idev
, 
OPMODE_RX_SINGLE
);

609 
	`›mode
(
•idev
, 
OPMODE_RX
);

612 
	}
}

616 
	$txl‹a
(
ødiodev
 *ødiodev, 
lgw_pkt_tx_s
 *
pkt
) {

618 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_SLEEP
);

620 
	`£t‰eq
(
ødiodev
->
•ù‹t
, 
pkt
->
‰eq_hz
);

621 
	`£tsf
(
ødiodev
->
•ù‹t
, 
	`lgw_sf_gëvÆ
(
pkt
->
d©¨©e
));

622 
	`£tsbw
(
ødiodev
->
•ù‹t
, 
	`lgw_bw_gëvÆ
(
pkt
->
b™dwidth
));

623 
	`£t¸
(
ødiodev
->
•ù‹t
, 
pkt
->
codî©e
);

624 
	`£çæí
(
ødiodev
->
•ù‹t
, 
pkt
->
¥ómbÀ
);

625 
	`£tsyncw‹d
(
ødiodev
->
•ù‹t
, 
LORA_MAC_PREAMBLE
);

628 
	`¸ccheck
(
ødiodev
->
•ù‹t
, 
pkt
->
no_¸c
);

631 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_LNA
, 
LNA_MAX_GAIN
);

634 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_MODEM_CONFIG3
, 
SX1276_MC3_AGCAUTO
);

637 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_PACONFIG
, (
uöt8_t
)(0x80|(15&0xf)));

639 i‡(
pkt
->
övît_pﬁ
)

640 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_INVERTIQ
, 
	`ªadReg
(radiodev->spiport, REG_INVERTIQ) | (1<<6));

642 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_INVERTIQ
, 
	`ªadReg
(radiodev->spiport, REG_INVERTIQ) & ~(1<<6));

645 
	`›modeL‹a
(
ødiodev
->
•ù‹t
);

650 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_STANDBY
);

653 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_DIO_MAPPING_1
, 
MAP_DIO0_LORA_TXDONE
|
MAP_DIO1_LORA_NOP
|
MAP_DIO2_LORA_NOP
);

655 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS
, 0xFF);

657 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS_MASK
, ~
IRQ_LORA_TXDONE_MASK
);

660 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_FIFO_TX_BASE_AD
, 0x00); wrôeReg‘adiodev->•ù‹t, 
REG_FIFO_ADDR_PTR
, 0x00);

663 
i
;

665 
i
 = 0; i < 
pkt
->
size
; i++) {

666 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_FIFO
, 
pkt
->
∑ylﬂd
[
i
]);

669 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_PAYLOAD_LENGTH
, 
pkt
->
size
);

672 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_TX
);

675 
	`digôÆRód
(
ødiodev
->
dio
[0]) == 0);

677 
	`¥ötf
("\nTønsmôáàSF%iBW%d o¿%.6lf.\n", 
	`lgw_sf_gëvÆ
(
pkt
->
d©¨©e
), 
	`lgw_bw_gëvÆ
’kt->
b™dwidth
)/1000, ()’kt->
‰eq_hz
)/1000000);

680 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS_MASK
, 0xFF);

683 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS
, 0xFF);

686 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_SLEEP
);

687 
	}
}

691 
	$sögÀ_tx
(
ødiodev
 *ødiodev, 
uöt8_t
 *
∑ylﬂd
, 
size
) {

694 
	`›modeL‹a
(
ødiodev
->
•ù‹t
);

699 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_STANDBY
);

701 
	`£tsyncw‹d
(
ødiodev
->
•ù‹t
, 
LORA_MAC_PREAMBLE
);

704 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_DIO_MAPPING_1
, 
MAP_DIO0_LORA_TXDONE
|
MAP_DIO1_LORA_NOP
|
MAP_DIO2_LORA_NOP
);

706 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS
, 0xFF);

708 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS_MASK
, ~
IRQ_LORA_TXDONE_MASK
);

711 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_FIFO_TX_BASE_AD
, 0x00); wrôeReg‘adiodev->•ù‹t, 
REG_FIFO_ADDR_PTR
, 0x00);

714 
i
;

716 
i
 = 0; i < 
size
; i++) {

717 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_FIFO
, 
∑ylﬂd
[
i
]);

720 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_PAYLOAD_LENGTH
, 
size
);

723 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_TX
);

726 
	`digôÆRód
(
ødiodev
->
dio
[0]) == 0);

728 
	`¥ötf
("\nTønsmôáàSF%iBW%d o¿%.6lf.\n", 
ødiodev
->
sf
, (ødiodev->
bw
)/1000, ()‘adiodev->
‰eq
)/1000000);

731 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS_MASK
, 0xFF);

734 
	`wrôeReg
(
ødiodev
->
•ù‹t
, 
REG_IRQ_FLAGS
, 0xFF);

737 
	`›mode
(
ødiodev
->
•ù‹t
, 
OPMODE_SLEEP
);

738 
	}
}

	@lora_pkt_fwd/src/single_tx.c

13 
	~<î∫o.h
>

15 
	~"l‹agw_hÆ.h
"

16 
	~"ødio.h
"

18 *
›èrg
;

19 
›töd
, 
›ãº
, 
›t›t
;

22 
	gsf
[8] = "7";

23 
	gbw
[8] = "125000";

24 
	g¸
[8] = "1";

25 
	gwd
[8] = "52";

26 
	g¥Àn
[8] = "8";

27 
	gpw
[8] = "16";

28 
	g‰eq
[16] = "868500000";

30 
	gövîtiq
 = 0;

31 
	glo›
 = 0;

32 
	gmode
 = 0;

35 vﬁ©ûê
boﬁ
 
	gexô_sig
 = 
Ál£
;

36 vﬁ©ûê
boﬁ
 
	gquô_sig
 = 
Ál£
;

40 
	$¥öt_hñp
() {

41 
	`¥ötf
("Usage: single_tx [-f frequence] <uint> (default:868500000)Åarget frequency in Hz\n");

42 
	`¥ötf
(" [-r] setásÑx\n");

43 
	`¥ötf
(" [-s spreadingFactor] <uint> (default: 7)\n");

44 
	`¥ötf
(" [-b bandwidth] <uint> default: 125k \n");

45 
	`¥ötf
(" [-c coderate] <uint> LoRa Coding Rate [1-4] \n");

46 
	`¥ötf
(" [-w syncword] <uint> default: 52, 0x34\n");

47 
	`¥ötf
(" [-i] sendÖacket using inverted modulationÖolarity\n");

48 
	`¥ötf
(" [-l] continue mode\n");

49 
	`¥ötf
(" [-m message] <text> sendÅhis message fromÑadio\n");

50 
	`¥ötf
(" [-h] showÅhis helpándÉxit \n");

51 
	}
}

56 
	$maö
(
¨gc
, *
¨gv
[])

59 
c
;

61 
mesßge
[248] = {'\0'};

69 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "rf:s:b:c:w:ilp:m:h")) != -1) {

70 
c
) {

72 i‡(
›èrg
) {

73 
	`°∫˝y
(
‰eq
, 
›èrg
, (freq));

75 
	`¥öt_hñp
();

76 
	`exô
(1);

80 i‡(
›èrg
)

81 
	`°∫˝y
(
sf
, 
›èrg
, (sf));

83 
	`¥öt_hñp
();

84 
	`exô
(1);

88 
mode
 = 1;

91 i‡(
›èrg
)

92 
	`°∫˝y
(
bw
, 
›èrg
, (bw));

94 
	`¥öt_hñp
();

95 
	`exô
(1);

99 i‡(
›èrg
)

100 
	`°∫˝y
(
¸
, 
›èrg
, (cr));

102 
	`¥öt_hñp
();

103 
	`exô
(1);

107 
övîtiq
 = 1;

110 
lo›
 = 1;

113 i‡(
›èrg
)

114 
	`°∫˝y
(
pw
, 
›èrg
, (pw));

116 
	`¥öt_hñp
();

117 
	`exô
(1);

121 i‡(
›èrg
)

122 
	`°∫˝y
(
wd
, 
›èrg
, (wd));

124 
	`¥öt_hñp
();

125 
	`exô
(1);

129 i‡(
›èrg
)

130 
	`°∫˝y
(
mesßge
, 
›èrg
, (message));

132 
	`¥öt_hñp
();

133 
	`exô
(1);

139 
	`¥öt_hñp
();

140 
	`exô
(0);

146 
ødiodev
 *
l‹adev
;

147 
l‹adev
 = (
ødiodev
 *Ë
	`mÆloc
((radiodev));

149 
l‹adev
->
nss
 = 21;

150 
l‹adev
->
r°
 = 12;

151 
l‹adev
->
dio
[0] = 7;

152 
l‹adev
->
dio
[1] = 6;

153 
l‹adev
->
dio
[2] = 8;

155 
l‹adev
->
•ù‹t
 = 
	`•i_›í
(
SPI_DEV_RADIO
);

157 
l‹adev
->
‰eq
 = 
	`©ﬁ
(freq);

158 
l‹adev
->
sf
 = 
	`©oi
(sf);

159 
l‹adev
->
bw
 = 
	`©ﬁ
(bw);

160 
l‹adev
->
¸
 = 
	`©oi
(cr);

161 
l‹adev
->
rf_powî
 = 
	`©oi
(
pw
);

162 
l‹adev
->
syncw‹d
 = 
	`©oi
(
wd
);

163 
l‹adev
->
no¸c
 = 1;

164 
l‹adev
->
¥Àn
 = 
	`©oi
(prlen);

165 
l‹adev
->
övîtio
 = 
övîtiq
;

166 
	`°r˝y
(
l‹adev
->
desc
, "RFDEV");

168 
	`¥ötf
("Radiÿ°ru˘: spù‹t=%d, fªq=%d, sf=%d, bw=%d, cr=%d, wd=0x%2x,Öw=%d, IQ=%d\n", 
l‹adev
->
•ù‹t
,Ü‹adev->
‰eq
,Ü‹adev->
sf
,Ü‹adev->
bw
,Ü‹adev->
¸
,Ü‹adev->
syncw‹d
,Ü‹adev->
rf_powî
,Ü‹adev->
övîtio
);

170 if(!
	`gë_ødio_vîsi⁄
(
l‹adev
))

171 
˛ón
;

174 
	`£tup_ch™√l
(
l‹adev
);

176 i‡(!
mode
) {

178 
∑ylﬂd
[256] = {'\0'};

180 i‡(
	`°æí
(
mesßge
) < 1)

181 
	`°r˝y
(
mesßge
, "HELLO DRAGINO");

183 i‡(
lo›
) {

185 
¢
 = 0;

187 
	`¢¥ötf
(
∑ylﬂd
, ’aylﬂd), "%d: HELLO DRAGINO ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ", 
¢
);

188 
	`sögÀ_tx
(
l‹adev
, (
uöt8_t
 *)
∑ylﬂd
, 
	`°æí
(payload));

189 ++
¢
;

190 
	`¶ìp
(1);

193 
	`¢¥ötf
(
∑ylﬂd
, ’aylﬂd), "%s", 
mesßge
);

194 
	`sögÀ_tx
(
l‹adev
, (
uöt8_t
 *)
∑ylﬂd
, 
	`°æí
(payload));

197 
lgw_pkt_rx_s
 
rxpkt
;

199 
	`rxl‹a
(
l‹adev
->
•ù‹t
, 1);

200 
	`¥ötf
("\nLi°íögáàSF%ò⁄ %.6l‡Mhz.", 
l‹adev
->
sf
, ()÷‹adev->
‰eq
)/1000000);

202 if(
	`digôÆRód
(
l‹adev
->
dio
[0]) == 1) {

203 
	`mem£t
(
rxpkt
.
∑ylﬂd
, 0, (rxpkt.payload));

204 
	`ª˚ived
(
l‹adev
->
•ù‹t
, &
rxpkt
);

205 
	`Ârötf
(
°dîr
, "echÿª˚ived: %s,Ñssi=%f\n", 
rxpkt
.
∑ylﬂd
,Ñxpkt.
rssi
);

211 
˛ón
:

213 
	`‰ì
(
l‹adev
);

215 
	`¥ötf
("INFO: Exôög %s\n", 
¨gv
[0]);

216 
	`exô
(
EXIT_SUCCESS
);

217 
	}
}

	@lora_pkt_fwd/src/timersync.c

20 
	~<°dio.h
>

21 
	~<°döt.h
>

22 
	~<±hªad.h
>

24 
	~"åa˚.h
"

25 
	~"timîsync.h
"

26 
	~"l‹agw_hÆ.h
"

27 
	~"l‹agw_ªg.h
"

28 
	~"l‹agw_aux.h
"

36 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

38 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

39 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

40 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

41 --(
ªsu…
)->
tv_£c
; \

42 (
ªsu…
)->
tv_u£c
 += 1000000; \

44 } 0)

	)

49 
±hªad_muãx_t
 
	gmx_timîsync
 = 
PTHREAD_MUTEX_INITIALIZER
;

50 
timevÆ
 
	goff£t_unix_c⁄˚¡
 = {0,0};

54 
boﬁ
 
exô_sig
;

55 
boﬁ
 
quô_sig
;

56 
±hªad_muãx_t
 
mx_c⁄˚¡
;

61 
	$gë_c⁄˚¡øt‹_time
(
timevÆ
 *
c⁄˚¡_time
, timevÆ 
unix_time
) {

62 
timevÆ
 
loˇl_timevÆ
;

64 i‡(
c⁄˚¡_time
 =
NULL
) {

65 
	`MSG
("ERROR: %†övÆidÖ¨amëî\n", 
__FUNCTION__
);

69 
	`±hªad_muãx_lock
(&
mx_timîsync
);

70 
	`timîsub
(&
unix_time
, &
off£t_unix_c⁄˚¡
, &
loˇl_timevÆ
);

71 
	`±hªad_muãx_u∆ock
(&
mx_timîsync
);

74 
c⁄˚¡_time
->
tv_£c
 = 
loˇl_timevÆ
.tv_sec;

75 
c⁄˚¡_time
->
tv_u£c
 = 
loˇl_timevÆ
.tv_usec;

77 
	`MSG_DEBUG
(
DEBUG_TIMERSYNC
, " --> TIME: unix cuºíàtimêi† %ld,%ld\n", 
unix_time
.
tv_£c
, unix_time.
tv_u£c
);

78 
	`MSG_DEBUG
(
DEBUG_TIMERSYNC
, " off£ài† %ld,%ld\n", 
off£t_unix_c⁄˚¡
.
tv_£c
, off£t_unix_c⁄˚¡.
tv_u£c
);

79 
	`MSG_DEBUG
(
DEBUG_TIMERSYNC
, " sx1301 cuºíàtimêi†%ld,%ld\n", 
loˇl_timevÆ
.
tv_£c
,Üoˇl_timevÆ.
tv_u£c
);

82 
	}
}

87 
	$thªad_timîsync
() {

88 
timevÆ
 
unix_timevÆ
;

89 
timevÆ
 
c⁄˚¡øt‹_timevÆ
;

90 
uöt32_t
 
sx1301_timecou¡
 = 0;

91 
timevÆ
 
off£t_¥evious
 = {0,0};

92 
timevÆ
 
off£t_dri·
 = {0,0};

94 !
exô_sig
 && !
quô_sig
) {

97 
	`MSG
("\nINFO: Disabling GPS mode for concentrator's counter...\n");

98 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

99 
	`lgw_ªg_w
(
LGW_GPS_EN
, 0);

100 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

103 
	`gëtimeofday
(&
unix_timevÆ
, 
NULL
);

106 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

107 
	`lgw_gë_åig˙t
(&
sx1301_timecou¡
);

108 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

109 
c⁄˚¡øt‹_timevÆ
.
tv_£c
 = 
sx1301_timecou¡
 / 1000000UL;

110 
c⁄˚¡øt‹_timevÆ
.
tv_u£c
 = 
sx1301_timecou¡
 - (c⁄˚¡øt‹_timevÆ.
tv_£c
 * 1000000UL);

113 
off£t_¥evious
.
tv_£c
 = 
off£t_unix_c⁄˚¡
.tv_sec;

114 
off£t_¥evious
.
tv_u£c
 = 
off£t_unix_c⁄˚¡
.tv_usec;

117 
	`±hªad_muãx_lock
(&
mx_timîsync
);

118 
	`timîsub
(&
unix_timevÆ
, &
c⁄˚¡øt‹_timevÆ
, &
off£t_unix_c⁄˚¡
);

119 
	`±hªad_muãx_u∆ock
(&
mx_timîsync
);

121 
	`timîsub
(&
off£t_unix_c⁄˚¡
, &
off£t_¥evious
, &
off£t_dri·
);

123 
	`MSG_DEBUG
(
DEBUG_TIMERSYNC
, " sx1301 = %u (¬µs) -Åimeval (%ld,%ld)\n",

124 
sx1301_timecou¡
,

125 
c⁄˚¡øt‹_timevÆ
.
tv_£c
,

126 
c⁄˚¡øt‹_timevÆ
.
tv_u£c
);

127 
	`MSG_DEBUG
(
DEBUG_TIMERSYNC
, " unix_timevÆ = %ld,%ld\n", 
unix_timevÆ
.
tv_£c
, unix_timevÆ.
tv_u£c
);

129 
	`MSG
("INFO: host/sx1301Åime offset=(%lds:%ld¬µs) - drift=%ld¬µs\n",

130 
off£t_unix_c⁄˚¡
.
tv_£c
,

131 
off£t_unix_c⁄˚¡
.
tv_u£c
,

132 
off£t_dri·
.
tv_£c
 * 1000000UL + off£t_dri·.
tv_u£c
);

133 
	`MSG
("INFO: Enabling GPS mode for concentrator's counter.\n\n");

134 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

135 
	`lgw_ªg_w
(
LGW_GPS_EN
, 1);

136 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

144 
	`waô_ms
(60000);

146 
	}
}

	@tmp/lora_pkt_fwd.c

23 #i‡
__STDC_VERSION__
 >= 199901L

24 
	#_XOPEN_SOURCE
 600

	)

26 
	#_XOPEN_SOURCE
 500

	)

29 
	~<°döt.h
>

30 
	~<°dboﬁ.h
>

31 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<sig«l.h
>

35 
	~<time.h
>

36 
	~<sys/time.h
>

37 
	~<uni°d.h
>

38 
	~<°dlib.h
>

39 
	~<î∫o.h
>

40 
	~<m©h.h
>

41 
	~<as£π.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~<√tdb.h
>

48 
	~<±hªad.h
>

50 
	~"åa˚.h
"

51 
	~"jôqueue.h
"

52 
	~"timîsync.h
"

53 
	~"∑rs⁄.h
"

54 
	~"ba£64.h
"

55 
	~"l‹agw_hÆ.h
"

56 
	~"l‹agw_gps.h
"

57 
	~"l‹agw_aux.h
"

58 
	~"l‹agw_ªg.h
"

63 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

64 
	#STRINGIFY
(
x
Ë#x

	)

65 
	#STR
(
x
Ë
	`STRINGIFY
(x)

	)

70 #i‚de‡
VERSION_STRING


71 
	#VERSION_STRING
 "undeföed"

	)

74 
	#DEFAULT_SERVER
 127.0.0.1

	)

75 
	#DEFAULT_PORT_UP
 1780

	)

76 
	#DEFAULT_PORT_DW
 1782

	)

77 
	#DEFAULT_KEEPALIVE
 5

	)

78 
	#DEFAULT_STAT
 30

	)

79 
	#PUSH_TIMEOUT_MS
 100

	)

80 
	#PULL_TIMEOUT_MS
 200

	)

81 
	#GPS_REF_MAX_AGE
 30

	)

82 
	#FETCH_SLEEP_MS
 10

	)

83 
	#BEACON_POLL_MS
 50

	)

85 
	#PROTOCOL_VERSION
 2

	)

87 
	#XERR_INIT_AVG
 128

	)

88 
	#XERR_FILT_COEF
 256

	)

90 
	#PKT_PUSH_DATA
 0

	)

91 
	#PKT_PUSH_ACK
 1

	)

92 
	#PKT_PULL_DATA
 2

	)

93 
	#PKT_PULL_RESP
 3

	)

94 
	#PKT_PULL_ACK
 4

	)

95 
	#PKT_TX_ACK
 5

	)

97 
	#NB_PKT_MAX
 8

	)

99 
	#MIN_LORA_PREAMB
 6

	)

100 
	#STD_LORA_PREAMB
 8

	)

101 
	#MIN_FSK_PREAMB
 3

	)

102 
	#STD_FSK_PREAMB
 5

	)

104 
	#STATUS_SIZE
 200

	)

105 
	#TX_BUFF_SIZE
 ((540 * 
NB_PKT_MAX
Ë+ 30 + 
STATUS_SIZE
)

	)

107 
	#UNIX_GPS_EPOCH_OFFSET
 315964800

	)

110 
	#DEFAULT_BEACON_FREQ_HZ
 869525000

	)

111 
	#DEFAULT_BEACON_FREQ_NB
 1

	)

112 
	#DEFAULT_BEACON_FREQ_STEP
 0

	)

113 
	#DEFAULT_BEACON_DATARATE
 9

	)

114 
	#DEFAULT_BEACON_BW_HZ
 125000

	)

115 
	#DEFAULT_BEACON_POWER
 14

	)

116 
	#DEFAULT_BEACON_INFODESC
 0

	)

122 vﬁ©ûê
boﬁ
 
	gexô_sig
 = 
Ál£
;

123 vﬁ©ûê
boﬁ
 
	gquô_sig
 = 
Ál£
;

126 
boﬁ
 
	gfwd_vÆid_pkt
 = 
åue
;

127 
boﬁ
 
	gfwd_îr‹_pkt
 = 
Ál£
;

128 
boﬁ
 
	gfwd_no¸c_pkt
 = 
Ál£
;

131 
uöt64_t
 
	glgwm
 = 0;

132 
	glgwm_°r
[17];

133 
	g£rv_addr
[64] = 
STR
(
DEFAULT_SERVER
);

134 
	g£rv_p‹t_up
[8] = 
STR
(
DEFAULT_PORT_UP
);

135 
	g£rv_p‹t_down
[8] = 
STR
(
DEFAULT_PORT_DW
);

136 
	gkì∑live_time
 = 
DEFAULT_KEEPALIVE
;

139 
	g°©_öãrvÆ
 = 
DEFAULT_STAT
;

142 
uöt32_t
 
	g√t_mac_h
;

143 
uöt32_t
 
	g√t_mac_l
;

146 
	gsock_up
;

147 
	gsock_down
;

150 
timevÆ
 
	gpush_timeout_hÆf
 = {0, (
PUSH_TIMEOUT_MS
 * 500)};

151 
timevÆ
 
	gpuŒ_timeout
 = {0, (
PULL_TIMEOUT_MS
 * 1000)};

154 
±hªad_muãx_t
 
	gmx_c⁄˚¡
 = 
PTHREAD_MUTEX_INITIALIZER
;

155 
±hªad_muãx_t
 
	gmx_xc‹r
 = 
PTHREAD_MUTEX_INITIALIZER
;

156 
boﬁ
 
	gxèl_c‹ª˘_ok
 = 
Ál£
;

157 
	gxèl_c‹ª˘
 = 1.0;

160 
	ggps_ây_∑th
[64] = "\0";

161 
	ggps_ây_fd
 = -1;

162 
boﬁ
 
	ggps_íabÀd
 = 
Ál£
;

165 
±hªad_muãx_t
 
	gmx_timîef
 = 
PTHREAD_MUTEX_INITIALIZER
;

166 
boﬁ
 
	ggps_ªf_vÆid
;

167 
åef
 
	gtime_ª„ªn˚_gps
;

170 
co‹d_s
 
	gª„ªn˚_co‹d
;

173 
boﬁ
 
	ggps_Áke_íabÀ
;

176 
±hªad_muãx_t
 
	gmx_mós_up
 = 
PTHREAD_MUTEX_INITIALIZER
;

177 
uöt32_t
 
	gmós_nb_rx_rcv
 = 0;

178 
uöt32_t
 
	gmós_nb_rx_ok
 = 0;

179 
uöt32_t
 
	gmós_nb_rx_bad
 = 0;

180 
uöt32_t
 
	gmós_nb_rx_no¸c
 = 0;

181 
uöt32_t
 
	gmós_up_pkt_fwd
 = 0;

182 
uöt32_t
 
	gmós_up_√tw‹k_byã
 = 0;

183 
uöt32_t
 
	gmós_up_∑ylﬂd_byã
 = 0;

184 
uöt32_t
 
	gmós_up_dgøm_£¡
 = 0;

185 
uöt32_t
 
	gmós_up_ack_rcv
 = 0;

187 
±hªad_muãx_t
 
	gmx_mós_dw
 = 
PTHREAD_MUTEX_INITIALIZER
;

188 
uöt32_t
 
	gmós_dw_puŒ_£¡
 = 0;

189 
uöt32_t
 
	gmós_dw_ack_rcv
 = 0;

190 
uöt32_t
 
	gmós_dw_dgøm_rcv
 = 0;

191 
uöt32_t
 
	gmós_dw_√tw‹k_byã
 = 0;

192 
uöt32_t
 
	gmós_dw_∑ylﬂd_byã
 = 0;

193 
uöt32_t
 
	gmós_nb_tx_ok
 = 0;

194 
uöt32_t
 
	gmós_nb_tx_Áû
 = 0;

195 
uöt32_t
 
	gmós_nb_tx_ªque°ed
 = 0;

196 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

197 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

198 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_too_œã
 = 0;

199 
uöt32_t
 
	gmós_nb_tx_ªje˘ed_too_óæy
 = 0;

200 
uöt32_t
 
	gmós_nb_bóc⁄_queued
 = 0;

201 
uöt32_t
 
	gmós_nb_bóc⁄_£¡
 = 0;

202 
uöt32_t
 
	gmós_nb_bóc⁄_ªje˘ed
 = 0;

204 
±hªad_muãx_t
 
	gmx_mós_gps
 = 
PTHREAD_MUTEX_INITIALIZER
;

205 
boﬁ
 
	ggps_co‹d_vÆid
;

206 
co‹d_s
 
	gmós_gps_co‹d
;

207 
co‹d_s
 
	gmós_gps_îr
;

209 
±hªad_muãx_t
 
	gmx_°©_ªp
 = 
PTHREAD_MUTEX_INITIALIZER
;

210 
boﬁ
 
	gªp‹t_ªady
 = 
Ál£
;

211 
	g°©us_ªp‹t
[
STATUS_SIZE
];

214 
uöt32_t
 
	gbóc⁄_≥riod
 = 0;

215 
uöt32_t
 
	gbóc⁄_‰eq_hz
 = 
DEFAULT_BEACON_FREQ_HZ
;

216 
uöt8_t
 
	gbóc⁄_‰eq_nb
 = 
DEFAULT_BEACON_FREQ_NB
;

217 
uöt32_t
 
	gbóc⁄_‰eq_°ï
 = 
DEFAULT_BEACON_FREQ_STEP
;

218 
uöt8_t
 
	gbóc⁄_d©¨©e
 = 
DEFAULT_BEACON_DATARATE
;

219 
uöt32_t
 
	gbóc⁄_bw_hz
 = 
DEFAULT_BEACON_BW_HZ
;

220 
öt8_t
 
	gbóc⁄_powî
 = 
DEFAULT_BEACON_POWER
;

221 
uöt8_t
 
	gbóc⁄_öfodesc
 = 
DEFAULT_BEACON_INFODESC
;

224 
uöt32_t
 
	gautoquô_thªshﬁd
 = 0;

227 
jô_queue_s
 
	gjô_queue
;

230 
öt8_t
 
	g™ã¬a_gaö
 = 0;

233 
lgw_tx_gaö_lut_s
 
	gtxlut
;

234 
uöt32_t
 
	gtx_‰eq_mö
[
LGW_RF_CHAIN_NB
];

235 
uöt32_t
 
	gtx_‰eq_max
[
LGW_RF_CHAIN_NB
];

240 
sig_h™dÀr
(
sigio
);

242 
∑r£_SX1301_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

244 
∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

246 
uöt16_t
 
¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
);

248 
dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
);

250 
gps_¥o˚ss_sync
();

252 
gps_¥o˚ss_co‹ds
();

255 
thªad_up
();

256 
thªad_down
();

257 
thªad_gps
();

258 
thªad_vÆid
();

259 
thªad_jô
();

260 
thªad_timîsync
();

263 
time_t
 
	gnow_time
;

264 
time_t
 
	glog_°¨t_time
;

266 
FILE
 * 
	glog_fûe
 = 
NULL
;

267 
	glog_fûe_«me
[64];

268 
›í_log
();

275 
	$sig_h™dÀr
(
sigio
) {

276 i‡(
sigio
 =
SIGQUIT
) {

277 
quô_sig
 = 
åue
;

278 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

279 
exô_sig
 = 
åue
;

282 
	}
}

284 
	$∑r£_SX1301_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

285 
i
;

286 
∑øm_«me
[32];

287 c⁄° *
°r
;

288 c⁄° 
c⁄f_obj_«me
[] = "SX1301_conf";

289 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

290 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

291 
JSON_Obje˘
 *
c⁄f_lbt_obj
 = 
NULL
;

292 
JSON_Obje˘
 *
c⁄f_lbtch™_obj
 = 
NULL
;

293 
JSON_VÆue
 *
vÆ
 = 
NULL
;

294 
JSON_Aºay
 *
c⁄f_¨øy
 = 
NULL
;

295 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

296 
lgw_c⁄f_lbt_s
 
lbtc⁄f
;

297 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

298 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

299 
uöt32_t
 
sf
, 
bw
, 
fdev
;

302 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

303 i‡(
roŸ_vÆ
 =
NULL
) {

304 
	`MSG
("ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

305 
	`exô
(
EXIT_FAILURE
);

309 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

310 i‡(
c⁄f_obj
 =
NULL
) {

311 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

314 
	`MSG
("INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög SX1301Ö¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

318 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

319 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "lorawan_public");

320 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

321 
bﬂrdc⁄f
.
l‹aw™_public
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

323 
	`MSG
("WARNING: DataÅype forÜorawan_public seems wrong,Ölease check\n");

324 
bﬂrdc⁄f
.
l‹aw™_public
 = 
Ál£
;

326 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "clksrc");

327 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

328 
bﬂrdc⁄f
.
˛k§c
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

330 
	`MSG
("WARNING: DataÅype for clksrc seems wrong,Ölease check\n");

331 
bﬂrdc⁄f
.
˛k§c
 = 0;

333 
	`MSG
("INFO:Ü‹aw™_publi¯%d, clk§¯%d\n", 
bﬂrdc⁄f
.
l‹aw™_public
, bﬂrdc⁄f.
˛k§c
);

335 i‡(
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

336 
	`MSG
("ERROR: FailedÅo configure board\n");

341 
	`mem£t
(&
lbtc⁄f
, 0, Übtconf);

342 
c⁄f_lbt_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
c⁄f_obj
, "lbt_cfg");

343 i‡(
c⁄f_lbt_obj
 =
NULL
) {

344 
	`MSG
("INFO:Ço configuration for LBT\n");

346 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "enable");

347 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

348 
lbtc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

350 
	`MSG
("WARNING: DataÅype forÜbt_cfg.enable seems wrong,Ölease check\n");

351 
lbtc⁄f
.
íabÀ
 = 
Ál£
;

353 i‡(
lbtc⁄f
.
íabÀ
 =
åue
) {

354 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "rssi_target");

355 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

356 
lbtc⁄f
.
rssi_èrgë
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

358 
	`MSG
("WARNING: DataÅype forÜbt_cfg.rssi_target seems wrong,Ölease check\n");

359 
lbtc⁄f
.
rssi_èrgë
 = 0;

361 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_lbt_obj
, "sx127x_rssi_offset");

362 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

363 
lbtc⁄f
.
rssi_off£t
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

365 
	`MSG
("WARNING: DataÅype forÜbt_cfg.sx127x_rssi_offset seems wrong,Ölease check\n");

366 
lbtc⁄f
.
rssi_off£t
 = 0;

369 
c⁄f_¨øy
 = 
	`js⁄_obje˘_gë_¨øy
(
c⁄f_lbt_obj
, "chan_cfg");

370 i‡(
c⁄f_¨øy
 !
NULL
) {

371 
lbtc⁄f
.
nb_ch™√l
 = 
	`js⁄_¨øy_gë_cou¡
–
c⁄f_¨øy
 );

372 
	`MSG
("INFO: %u LBT ch™√l†c⁄figuªd\n", 
lbtc⁄f
.
nb_ch™√l
);

374 
i
 = 0; i < ()
lbtc⁄f
.
nb_ch™√l
; i++) {

376 i‡(
i
 >
LBT_CHANNEL_FREQ_NB
)

378 
	`MSG
("ERROR: LBT ch™√»%dÇŸ suµ‹ãd, skù it\n", 
i
 );

382 
c⁄f_lbtch™_obj
 = 
	`js⁄_¨øy_gë_obje˘
(
c⁄f_¨øy
, 
i
);

385 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "freq_hz");

386 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

387 
lbtc⁄f
.
ch™√ls
[
i
].
‰eq_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

389 
	`MSG
("WARNING: D©®ty≥ f‹Übt_cfg.ch™√ls[%d].‰eq_hz sìm†wr⁄g,ÖÀa£ check\n", 
i
);

390 
lbtc⁄f
.
ch™√ls
[
i
].
‰eq_hz
 = 0;

394 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_lbtch™_obj
, "scan_time_us");

395 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

396 
lbtc⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

398 
	`MSG
("WARNING: D©®ty≥ f‹Übt_cfg.ch™√ls[%d].sˇn_time_u†£em†wr⁄g,ÖÀa£ check\n", 
i
);

399 
lbtc⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = 0;

404 i‡(
	`lgw_lbt_£tc⁄f
(
lbtc⁄f
Ë!
LGW_HAL_SUCCESS
) {

405 
	`MSG
("ERROR: FailedÅo configure LBT\n");

409 
	`MSG
("INFO: LBT is disabled\n");

414 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "antenna_gain");

415 i‡(
vÆ
 !
NULL
) {

416 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

417 
™ã¬a_gaö
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

419 
	`MSG
("WARNING: DataÅype forántenna_gain seems wrong,Ölease check\n");

420 
™ã¬a_gaö
 = 0;

423 
	`MSG
("INFO:á¡í«_gaö %d dBi\n", 
™ã¬a_gaö
);

426 
	`mem£t
(&
txlut
, 0, Åxlut);

427 
i
 = 0; i < 
TX_GAIN_LUT_SIZE_MAX
; i++) {

428 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i", 
i
);

429 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

430 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

431 
	`MSG
("INFO:Çÿc⁄figuøti⁄ f‹Åx gaöÜuà%i\n", 
i
);

434 
txlut
.
size
++;

436 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.∑_gaö", 
i
);

437 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

438 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

439 
txlut
.
lut
[
i
].
∑_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

441 
	`MSG
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

442 
txlut
.
lut
[
i
].
∑_gaö
 = 0;

444 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.dac_gaö", 
i
);

445 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

446 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

447 
txlut
.
lut
[
i
].
dac_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

449 
txlut
.
lut
[
i
].
dac_gaö
 = 3;

451 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.dig_gaö", 
i
);

452 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

453 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

454 
txlut
.
lut
[
i
].
dig_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

456 
	`MSG
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

457 
txlut
.
lut
[
i
].
dig_gaö
 = 0;

459 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.mix_gaö", 
i
);

460 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

461 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

462 
txlut
.
lut
[
i
].
mix_gaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

464 
	`MSG
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

465 
txlut
.
lut
[
i
].
mix_gaö
 = 0;

467 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "tx_lut_%i.rf_powî", 
i
);

468 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

469 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

470 
txlut
.
lut
[
i
].
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

472 
	`MSG
("WARNING: D©®ty≥ f‹ %s[%d] sìm†wr⁄g,ÖÀa£ check\n", 
∑øm_«me
, 
i
);

473 
txlut
.
lut
[
i
].
rf_powî
 = 0;

477 i‡(
txlut
.
size
 > 0) {

478 
	`MSG
("INFO: C⁄figurög TX LUT wôh %u indexes\n", 
txlut
.
size
);

479 i‡(
	`lgw_txgaö_£tc⁄f
(&
txlut
Ë!
LGW_HAL_SUCCESS
) {

480 
	`MSG
("ERROR: FailedÅo configure concentrator TX Gain LUT\n");

484 
	`MSG
("WARNING: No TX gain LUT defined\n");

488 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; ++i) {

489 
	`mem£t
(&
rfc⁄f
, 0, Ñfconf);

490 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i", 
i
);

491 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

492 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

493 
	`MSG
("INFO:Çÿc⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

497 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.íabÀ", 
i
);

498 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

499 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

500 
rfc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

502 
rfc⁄f
.
íabÀ
 = 
Ál£
;

504 i‡(
rfc⁄f
.
íabÀ
 =
Ál£
) {

505 
	`MSG
("INFO:Ñadiÿ%òdißbÀd\n", 
i
);

507 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.‰eq", 
i
);

508 
rfc⁄f
.
‰eq_hz
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

509 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_off£t", 
i
);

510 
rfc⁄f
.
rssi_off£t
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

511 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.ty≥", 
i
);

512 
°r
 = 
	`js⁄_obje˘_dŸgë_°rög
(
c⁄f_obj
, 
∑øm_«me
);

513 i‡(!
	`°∫cmp
(
°r
, "SX1255", 6)) {

514 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

515 } i‡(!
	`°∫cmp
(
°r
, "SX1257", 6)) {

516 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

518 
	`MSG
("WARNING: invÆidÑadiÿty≥: %†(should bêSX1255 o∏SX1257)\n", 
°r
);

520 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_íabÀ", 
i
);

521 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

522 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

523 
rfc⁄f
.
tx_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

524 i‡(
rfc⁄f
.
tx_íabÀ
 =
åue
) {

526 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_mö", 
i
);

527 
tx_‰eq_mö
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

528 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_‰eq_max", 
i
);

529 
tx_‰eq_max
[
i
] = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

530 i‡((
tx_‰eq_mö
[
i
] =0Ë|| (
tx_‰eq_max
[i] == 0)) {

531 
	`MSG
("WARNING:Çÿ‰equícyÑ™gê•ecifõd f‹ TXÑ‡chaö %d\n", 
i
);

534 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_nŸch_‰eq", 
i
);

535 
rfc⁄f
.
tx_nŸch_‰eq
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

538 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

540 
	`MSG
("INFO:Ñadiÿ%òíabÀd (ty≥ %s), cíã∏‰equícy %u, RSSI off£à%f,ÅxÉ«bÀd %d,Åx_nŸch_‰eq %u\n", 
i
, 
°r
, 
rfc⁄f
.
‰eq_hz
,Ñfc⁄f.
rssi_off£t
,Ñfc⁄f.
tx_íabÀ
,Ñfc⁄f.
tx_nŸch_‰eq
);

543 i‡(
	`lgw_rxrf_£tc⁄f
(
i
, 
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

544 
	`MSG
("ERROR: invÆid c⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

550 
i
 = 0; i < 
LGW_MULTI_NB
; ++i) {

551 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

552 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i", 
i
);

553 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

554 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

555 
	`MSG
("INFO:Çÿc⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

559 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.íabÀ", 
i
);

560 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, 
∑øm_«me
);

561 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

562 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

564 
ifc⁄f
.
íabÀ
 = 
Ál£
;

566 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

567 
	`MSG
("INFO: L‹®mu…i-SF ch™√»%òdißbÀd\n", 
i
);

569 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.ødio", 
i
);

570 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

571 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ch™_mu…iSF_%i.if", 
i
);

572 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, 
∑øm_«me
);

574 
	`MSG
("INFO: L‹®mu…i-SF ch™√»%i>Ñadiÿ%i, IF %òHz, 125 kHz bw, SF 7Åÿ12\n", 
i
, 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
);

577 i‡(
	`lgw_rxif_£tc⁄f
(
i
, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

578 
	`MSG
("ERROR: invÆid c⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

584 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

585 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_Lora_std");

586 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

587 
	`MSG
("INFO:Ço configuration for Lora standard channel\n");

589 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_Lora_std.enable");

590 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

591 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

593 
ifc⁄f
.
íabÀ
 = 
Ál£
;

595 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

596 
	`MSG
("INFO: L‹®°™d¨d ch™√»%òdißbÀd\n", 
i
);

598 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.radio");

599 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.if");

600 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.bandwidth");

601 
bw
) {

602 500000: 
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
; ;

603 250000: 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
; ;

604 125000: 
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
; ;

605 : 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

607 
sf
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_Lora_std.spread_factor");

608 
sf
) {

609 7: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
; ;

610 8: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF8
; ;

611 9: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF9
; ;

612 10: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF10
; ;

613 11: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF11
; ;

614 12: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF12
; ;

615 : 
ifc⁄f
.
d©¨©e
 = 
DR_UNDEFINED
;

617 
	`MSG
("INFO: L‹®°d ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, SF %u\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, 
sf
);

619 i‡(
	`lgw_rxif_£tc⁄f
(8, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

620 
	`MSG
("ERROR: invalid configuration for Lora standard channel\n");

626 
	`mem£t
(&
ifc⁄f
, 0,  ifconf);

627 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "chan_FSK");

628 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

629 
	`MSG
("INFO:Ço configuration for FSK channel\n");

631 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f_obj
, "chan_FSK.enable");

632 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

633 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

635 
ifc⁄f
.
íabÀ
 = 
Ál£
;

637 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

638 
	`MSG
("INFO: FSK ch™√»%òdißbÀd\n", 
i
);

640 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.radio");

641 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.if");

642 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.bandwidth");

643 
fdev
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.freq_deviation");

644 
ifc⁄f
.
d©¨©e
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f_obj
, "chan_FSK.datarate");

647 i‡((
bw
 =0Ë&& (
fdev
 != 0)) {

648 
bw
 = 2 * 
fdev
 + 
ifc⁄f
.
d©¨©e
;

650 i‡(
bw
 =0Ë
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

651 i‡(
bw
 <7800Ë
ifc⁄f
.
b™dwidth
 = 
BW_7K8HZ
;

652 i‡(
bw
 <15600Ë
ifc⁄f
.
b™dwidth
 = 
BW_15K6HZ
;

653 i‡(
bw
 <31200Ë
ifc⁄f
.
b™dwidth
 = 
BW_31K2HZ
;

654 i‡(
bw
 <62500Ë
ifc⁄f
.
b™dwidth
 = 
BW_62K5HZ
;

655 i‡(
bw
 <125000Ë
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
;

656 i‡(
bw
 <250000Ë
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

657 i‡(
bw
 <500000Ë
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
;

658 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

660 
	`MSG
("INFO: FSK ch™√l>Ñadiÿ%i, IF %òHz, %u Hz bw, %u bp†d©¨©e\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, ifc⁄f.
d©¨©e
);

662 i‡(
	`lgw_rxif_£tc⁄f
(9, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

663 
	`MSG
("ERROR: invalid configuration for FSK channel\n");

667 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

670 
	}
}

672 
	$∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

673 c⁄° 
c⁄f_obj_«me
[] = "gateway_conf";

674 
JSON_VÆue
 *
roŸ_vÆ
;

675 
JSON_Obje˘
 *
c⁄f_obj
 = 
NULL
;

676 
JSON_VÆue
 *
vÆ
 = 
NULL
;

677 c⁄° *
°r
;

678 
uŒ
 = 0;

681 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

682 i‡(
roŸ_vÆ
 =
NULL
) {

683 
	`MSG
("ERROR: %†i†nŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

684 
	`exô
(
EXIT_FAILURE
);

688 
c⁄f_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), 
c⁄f_obj_«me
);

689 i‡(
c⁄f_obj
 =
NULL
) {

690 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

693 
	`MSG
("INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög g©ewayÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj_«me
);

697 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gateway_ID");

698 i‡(
°r
 !
NULL
) {

699 
	`ssˇnf
(
°r
, "%Œx", &
uŒ
);

700 
lgwm
 = 
uŒ
;

701 
	`MSG
("INFO: g©eway MACáddªs†i†c⁄figuªdÅÿ%016ŒX\n", 
uŒ
);

705 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "server_address");

706 i‡(
°r
 !
NULL
) {

707 
	`°∫˝y
(
£rv_addr
, 
°r
,  serv_addr);

708 
	`MSG
("INFO: sîvî ho°«mê‹ IPáddªs†i†c⁄figuªdÅÿ\"%s\"\n", 
£rv_addr
);

712 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "serv_port_up");

713 i‡(
vÆ
 !
NULL
) {

714 
	`¢¥ötf
(
£rv_p‹t_up
,  sîv_p‹t_up, "%u", (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
));

715 
	`MSG
("INFO: up°ªamÖ‹ài†c⁄figuªdÅÿ\"%s\"\n", 
£rv_p‹t_up
);

717 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "serv_port_down");

718 i‡(
vÆ
 !
NULL
) {

719 
	`¢¥ötf
(
£rv_p‹t_down
,  sîv_p‹t_down, "%u", (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
));

720 
	`MSG
("INFO: down°ªamÖ‹ài†c⁄figuªdÅÿ\"%s\"\n", 
£rv_p‹t_down
);

724 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "keepalive_interval");

725 i‡(
vÆ
 !
NULL
) {

726 
kì∑live_time
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

727 
	`MSG
("INFO: down°ªam kìp-ÆivêöãrvÆ i†c⁄figuªdÅÿ%u sec⁄ds\n", 
kì∑live_time
);

731 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "stat_interval");

732 i‡(
vÆ
 !
NULL
) {

733 
°©_öãrvÆ
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

734 
	`MSG
("INFO: sèti°ic†di•œy i¡îvÆ i†c⁄figuªdÅÿ%u sec⁄ds\n", 
°©_öãrvÆ
);

738 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "push_timeout_ms");

739 i‡(
vÆ
 !
NULL
) {

740 
push_timeout_hÆf
.
tv_u£c
 = 500 * ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

741 
	`MSG
("INFO: up°ªam PUSH_DATAÅime-ouài†c⁄figuªdÅÿ%u ms\n", ()(
push_timeout_hÆf
.
tv_u£c
 / 500));

745 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_valid");

746 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

747 
fwd_vÆid_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

749 
	`MSG
("INFO:Öackë†ª˚ived wôhá vÆid CRC wûl%†bêf‹w¨ded\n", (
fwd_vÆid_pkt
 ? "" : " NOT"));

750 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_error");

751 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

752 
fwd_îr‹_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

754 
	`MSG
("INFO:Öackë†ª˚ived wôhá CRCÉº‹ wûl%†bêf‹w¨ded\n", (
fwd_îr‹_pkt
 ? "" : " NOT"));

755 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "forward_crc_disabled");

756 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

757 
fwd_no¸c_pkt
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

759 
	`MSG
("INFO:Öackë†ª˚ived wôhÇÿCRC wûl%†bêf‹w¨ded\n", (
fwd_no¸c_pkt
 ? "" : " NOT"));

762 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f_obj
, "gps_tty_path");

763 i‡(
°r
 !
NULL
) {

764 
	`°∫˝y
(
gps_ây_∑th
, 
°r
,  gps_tty_path);

765 
	`MSG
("INFO: GPS sîü»p‹à∑th i†c⁄figuªdÅÿ\"%s\"\n", 
gps_ây_∑th
);

769 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_latitude");

770 i‡(
vÆ
 !
NULL
) {

771 
ª„ªn˚_co‹d
.
œt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

772 
	`MSG
("INFO: Re„ªn˚Ü©ôudêi†c⁄figuªdÅÿ%‡deg\n", 
ª„ªn˚_co‹d
.
œt
);

774 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_longitude");

775 i‡(
vÆ
 !
NULL
) {

776 
ª„ªn˚_co‹d
.
l⁄
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

777 
	`MSG
("INFO: Re„ªn˚Ü⁄gôudêi†c⁄figuªdÅÿ%‡deg\n", 
ª„ªn˚_co‹d
.
l⁄
);

779 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "ref_altitude");

780 i‡(
vÆ
 !
NULL
) {

781 
ª„ªn˚_co‹d
.
Æt
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

782 
	`MSG
("INFO: Re„ªn˚á…ôudêi†c⁄figuªdÅÿ%òmëîs\n", 
ª„ªn˚_co‹d
.
Æt
);

786 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "fake_gps");

787 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

788 
gps_Áke_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

789 i‡(
gps_Áke_íabÀ
 =
åue
) {

790 
	`MSG
("INFO: fake GPS isÉnabled\n");

792 
	`MSG
("INFO: fake GPS is disabled\n");

797 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_period");

798 i‡(
vÆ
 !
NULL
) {

799 
bóc⁄_≥riod
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

800 i‡((
bóc⁄_≥riod
 > 0) && (beacon_period < 6)) {

801 
	`MSG
("ERROR: invalid configuration for BeaconÖeriod, must be >= 6s\n");

804 
	`MSG
("INFO: Bóc⁄ögÖîiod i†c⁄figuªdÅÿ%u sec⁄ds\n", 
bóc⁄_≥riod
);

809 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_hz");

810 i‡(
vÆ
 !
NULL
) {

811 
bóc⁄_‰eq_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

812 
	`MSG
("INFO: Bóc⁄ög sig«»wû»bêemôãdáà%u Hz\n", 
bóc⁄_‰eq_hz
);

816 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_nb");

817 i‡(
vÆ
 !
NULL
) {

818 
bóc⁄_‰eq_nb
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

819 
	`MSG
("INFO: Bóc⁄ög ch™√»numbî i†£àtÿ%u\n", 
bóc⁄_‰eq_nb
);

823 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_freq_step");

824 i‡(
vÆ
 !
NULL
) {

825 
bóc⁄_‰eq_°ï
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

826 
	`MSG
("INFO: Bóc⁄ög ch™√»‰equícy sã∞i†£àtÿ%uHz\n", 
bóc⁄_‰eq_°ï
);

830 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_datarate");

831 i‡(
vÆ
 !
NULL
) {

832 
bóc⁄_d©¨©e
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

833 
	`MSG
("INFO: Bóc⁄ög d©¨©êi†£àtÿSF%d\n", 
bóc⁄_d©¨©e
);

837 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_bw_hz");

838 i‡(
vÆ
 !
NULL
) {

839 
bóc⁄_bw_hz
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

840 
	`MSG
("INFO: Bóc⁄ög moduœti⁄ b™dwidth i†£àtÿ%dHz\n", 
bóc⁄_bw_hz
);

844 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_power");

845 i‡(
vÆ
 !
NULL
) {

846 
bóc⁄_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

847 
	`MSG
("INFO: Bóc⁄ög TXÖowî i†£àtÿ%ddBm\n", 
bóc⁄_powî
);

851 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "beacon_infodesc");

852 i‡(
vÆ
 !
NULL
) {

853 
bóc⁄_öfodesc
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

854 
	`MSG
("INFO: Bóc⁄ög inf‹m©i⁄ des¸ùt‹ i†£àtÿ%u\n", 
bóc⁄_öfodesc
);

858 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f_obj
, "autoquit_threshold");

859 i‡(
vÆ
 !
NULL
) {

860 
autoquô_thªshﬁd
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

861 
	`MSG
("INFO: Auto-quôá·î %uÇ⁄-acknowÀdged PULL_DATA\n", 
autoquô_thªshﬁd
);

865 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

867 
	}
}

869 
uöt16_t
 
	$¸c16
(c⁄° 
uöt8_t
 * 
d©a
, 
size
) {

870 c⁄° 
uöt16_t
 
¸c_pﬁy
 = 0x1021;

871 c⁄° 
uöt16_t
 
öô_vÆ
 = 0x0000;

872 
uöt16_t
 
x
 = 
öô_vÆ
;

873 
i
, 
j
;

875 i‡(
d©a
 =
NULL
) {

879 
i
=0; i<
size
; ++i) {

880 
x
 ^(
uöt16_t
)
d©a
[
i
] << 8;

881 
j
=0; j<8; ++j) {

882 
x
 = (x & 0x8000Ë? (x<<1Ë^ 
¸c_pﬁy
 : (x<<1);

886  
x
;

887 
	}
}

889 
	$dif·ime•ec
(
time•ec
 
íd
, time•e¯
begönög
) {

890 
x
;

892 
x
 = 1E-9 * ()(
íd
.
tv_n£c
 - 
begönög
.tv_nsec);

893 
x
 +()(
íd
.
tv_£c
 - 
begönög
.tv_sec);

895  
x
;

896 
	}
}

898 
	$£nd_tx_ack
(
uöt8_t
 
tokí_h
, uöt8_à
tokí_l
, 
jô_îr‹_e
 
îr‹
) {

899 
uöt8_t
 
buff_ack
[64];

900 
buff_ödex
;

903 
	`mem£t
(&
buff_ack
, 0,  buff_ack);

906 
buff_ack
[0] = 
PROTOCOL_VERSION
;

907 
buff_ack
[1] = 
tokí_h
;

908 
buff_ack
[2] = 
tokí_l
;

909 
buff_ack
[3] = 
PKT_TX_ACK
;

910 *(
uöt32_t
 *)(
buff_ack
 + 4Ë
√t_mac_h
;

911 *(
uöt32_t
 *)(
buff_ack
 + 8Ë
√t_mac_l
;

912 
buff_ödex
 = 12;

915 i‡(
îr‹
 !
JIT_ERROR_OK
) {

917 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"{\"txpk_ack\":{", 13);

918 
buff_ödex
 += 13;

920 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"error\":", 8);

921 
buff_ödex
 += 8;

922 
îr‹
) {

923 
JIT_ERROR_FULL
:

924 
JIT_ERROR_COLLISION_PACKET
:

925 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_PACKET\"", 18);

926 
buff_ödex
 += 18;

928 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

929 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 += 1;

930 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

932 
JIT_ERROR_TOO_LATE
:

933 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_LATE\"", 10);

934 
buff_ödex
 += 10;

936 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

937 
mós_nb_tx_ªje˘ed_too_œã
 += 1;

938 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

940 
JIT_ERROR_TOO_EARLY
:

941 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TOO_EARLY\"", 11);

942 
buff_ödex
 += 11;

944 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

945 
mós_nb_tx_ªje˘ed_too_óæy
 += 1;

946 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

948 
JIT_ERROR_COLLISION_BEACON
:

949 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"COLLISION_BEACON\"", 18);

950 
buff_ödex
 += 18;

952 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

953 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 += 1;

954 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

956 
JIT_ERROR_TX_FREQ
:

957 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_FREQ\"", 9);

958 
buff_ödex
 += 9;

960 
JIT_ERROR_TX_POWER
:

961 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"TX_POWER\"", 10);

962 
buff_ödex
 += 10;

964 
JIT_ERROR_GPS_UNLOCKED
:

965 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"GPS_UNLOCKED\"", 14);

966 
buff_ödex
 += 14;

969 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"\"UNKNOWN\"", 9);

970 
buff_ödex
 += 9;

974 
	`mem˝y
((*)(
buff_ack
 + 
buff_ödex
), (*)"}}", 2);

975 
buff_ödex
 += 2;

978 
buff_ack
[
buff_ödex
] = 0;

981  
	`£nd
(
sock_down
, (*)
buff_ack
, 
buff_ödex
, 0);

982 
	}
}

987 
	$›í_log
() {

988 
i
;

989 
iso_d©e
[20];

991 
	`°r·ime
(
iso_d©e
,
	`ARRAY_SIZE
(iso_d©e),"%Y%m%dT%H%M%SZ",
	`gmtime
(&
now_time
));

992 
log_°¨t_time
 = 
now_time
;

994 
	`•rötf
(
log_fûe_«me
, "/v¨/log/pkt_log_%s.csv", 
iso_d©e
);

995 
log_fûe
 = 
	`f›í
(
log_fûe_«me
, "a");

996 i‡(
log_fûe
 =
NULL
) {

997 
	`MSG
("ERROR: impossibÀÅÿ¸óãÜog fûê%s\n", 
log_fûe_«me
);

998 
	`exô
(
EXIT_FAILURE
);

1001 
i
 = 
	`Ârötf
(
log_fûe
, "\"gateway ID\",\"UTCÅimestamp\",\"us count\",\"frequency\",\"RF chain\",\"RX chain\",\"status\",\"size\",\"modulation\",\"bandwidth\",\"datarate\",\"coderate\",\"RSSI\",\"SNR\"\n");

1002 i‡(
i
 < 0) {

1003 
	`MSG
("ERROR: impossibÀÅÿwrôêtÿlog fûê%s\n", 
log_fûe_«me
);

1004 
	`exô
(
EXIT_FAILURE
);

1007 
	`MSG
("INFO: Now wrôögÅÿlog fûê%s\n", 
log_fûe_«me
);

1009 
	}
}

1014 
	$maö
()

1016 
siga˘i⁄
 
siga˘
;

1017 
i
;

1018 
x
;

1021 *
globÆ_cfg_∑th
= "/etc/lora/global_conf.json";

1022 *
loˇl_cfg_∑th
 = "/etc/lora/local_conf.json";

1023 *
debug_cfg_∑th
 = "/etc/lora/debug_conf.json";

1026 
±hªad_t
 
thrid_up
;

1027 
±hªad_t
 
thrid_down
;

1028 
±hªad_t
 
thrid_gps
;

1029 
±hªad_t
 
thrid_vÆid
;

1030 
±hªad_t
 
thrid_jô
;

1031 
±hªad_t
 
thrid_timîsync
;

1034 
addröfo
 
höts
;

1035 
addröfo
 *
ªsu…
;

1036 
addröfo
 *
q
;

1037 
ho°_«me
[64];

1038 
p‹t_«me
[64];

1041 
uöt32_t
 
˝_nb_rx_rcv
;

1042 
uöt32_t
 
˝_nb_rx_ok
;

1043 
uöt32_t
 
˝_nb_rx_bad
;

1044 
uöt32_t
 
˝_nb_rx_no¸c
;

1045 
uöt32_t
 
˝_up_pkt_fwd
;

1046 
uöt32_t
 
˝_up_√tw‹k_byã
;

1047 
uöt32_t
 
˝_up_∑ylﬂd_byã
;

1048 
uöt32_t
 
˝_up_dgøm_£¡
;

1049 
uöt32_t
 
˝_up_ack_rcv
;

1050 
uöt32_t
 
˝_dw_puŒ_£¡
;

1051 
uöt32_t
 
˝_dw_ack_rcv
;

1052 
uöt32_t
 
˝_dw_dgøm_rcv
;

1053 
uöt32_t
 
˝_dw_√tw‹k_byã
;

1054 
uöt32_t
 
˝_dw_∑ylﬂd_byã
;

1055 
uöt32_t
 
˝_nb_tx_ok
;

1056 
uöt32_t
 
˝_nb_tx_Áû
;

1057 
uöt32_t
 
˝_nb_tx_ªque°ed
 = 0;

1058 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

1059 
uöt32_t
 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

1060 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_œã
 = 0;

1061 
uöt32_t
 
˝_nb_tx_ªje˘ed_too_óæy
 = 0;

1062 
uöt32_t
 
˝_nb_bóc⁄_queued
 = 0;

1063 
uöt32_t
 
˝_nb_bóc⁄_£¡
 = 0;

1064 
uöt32_t
 
˝_nb_bóc⁄_ªje˘ed
 = 0;

1067 
boﬁ
 
co‹d_ok
 = 
Ál£
;

1068 
co‹d_s
 
˝_gps_co‹d
 = {0.0, 0.0, 0};

1071 
uöt32_t
 
åig_t°amp
;

1074 
time_t
 
t
;

1075 
°©_time°amp
[24];

1076 
rx_ok_øtio
;

1077 
rx_bad_øtio
;

1078 
rx_no¸c_øtio
;

1079 
up_ack_øtio
;

1080 
dw_ack_øtio
;

1083 
	`MSG
("*** Bóc⁄ Packë F‹w¨dî f‹ L‹®G©eway ***\nVîsi⁄: " 
VERSION_STRING
 "\n");

1084 
	`MSG
("*** L‹®c⁄˚¡øt‹ HALÜibøry vîsi⁄ infÿ***\n%s\n***\n", 
	`lgw_vîsi⁄_öfo
());

1087 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


1088 
	`MSG
("INFO: LittleÉndian host\n");

1089 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


1090 
	`MSG
("INFO: BigÉndian host\n");

1092 
	`MSG
("INFO: HostÉndianness unknown\n");

1096 i‡(
	`ac˚ss
(
debug_cfg_∑th
, 
R_OK
) == 0) {

1097 
	`MSG
("INFO: found debug c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
debug_cfg_∑th
);

1098 
	`MSG
("INFO: other configuration files will be ignored\n");

1099 
x
 = 
	`∑r£_SX1301_c⁄figuøti⁄
(
debug_cfg_∑th
);

1100 i‡(
x
 != 0) {

1101 
	`exô
(
EXIT_FAILURE
);

1103 
x
 = 
	`∑r£_g©eway_c⁄figuøti⁄
(
debug_cfg_∑th
);

1104 i‡(
x
 != 0) {

1105 
	`exô
(
EXIT_FAILURE
);

1107 } i‡(
	`ac˚ss
(
globÆ_cfg_∑th
, 
R_OK
) == 0) {

1108 
	`MSG
("INFO: found globÆ c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
globÆ_cfg_∑th
);

1109 
x
 = 
	`∑r£_SX1301_c⁄figuøti⁄
(
globÆ_cfg_∑th
);

1110 i‡(
x
 != 0) {

1111 
	`exô
(
EXIT_FAILURE
);

1113 
x
 = 
	`∑r£_g©eway_c⁄figuøti⁄
(
globÆ_cfg_∑th
);

1114 i‡(
x
 != 0) {

1115 
	`exô
(
EXIT_FAILURE
);

1117 i‡(
	`ac˚ss
(
loˇl_cfg_∑th
, 
R_OK
) == 0) {

1118 
	`MSG
("INFO: foundÜoˇ»c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
loˇl_cfg_∑th
);

1119 
	`MSG
("INFO:ÑedefinedÖarameters will overwrite globalÖarameters\n");

1120 
	`∑r£_SX1301_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1121 
	`∑r£_g©eway_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1123 } i‡(
	`ac˚ss
(
loˇl_cfg_∑th
, 
R_OK
) == 0) {

1124 
	`MSG
("INFO: foundÜoˇ»c⁄figuøti⁄ fûê%s,Ö¨sög it\n", 
loˇl_cfg_∑th
);

1125 
x
 = 
	`∑r£_SX1301_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1126 i‡(
x
 != 0) {

1127 
	`exô
(
EXIT_FAILURE
);

1129 
x
 = 
	`∑r£_g©eway_c⁄figuøti⁄
(
loˇl_cfg_∑th
);

1130 i‡(
x
 != 0) {

1131 
	`exô
(
EXIT_FAILURE
);

1134 
	`MSG
("ERROR: [maö] faûedÅÿfödány c⁄figuøti⁄ fûê«med %s, %†OR %s\n", 
globÆ_cfg_∑th
, 
loˇl_cfg_∑th
, 
debug_cfg_∑th
);

1135 
	`exô
(
EXIT_FAILURE
);

1139 i‡(
gps_ây_∑th
[0] != '\0') {

1140 
i
 = 
	`lgw_gps_íabÀ
(
gps_ây_∑th
, "ubx7", 0, &
gps_ây_fd
);

1141 i‡(
i
 !
LGW_GPS_SUCCESS
) {

1142 
	`¥ötf
("WARNING: [maö] impossibÀÅÿ›í %†f‹ GPS syn¯(checkÖîmissi⁄s)\n", 
gps_ây_∑th
);

1143 
gps_íabÀd
 = 
Ál£
;

1144 
gps_ªf_vÆid
 = 
Ál£
;

1146 
	`¥ötf
("INFO: [maö] TTYÖ‹à%†›í f‹ GPS synchr⁄iz©i⁄\n", 
gps_ây_∑th
);

1147 
gps_íabÀd
 = 
åue
;

1148 
gps_ªf_vÆid
 = 
Ál£
;

1153 
	`tz£t
();

1159 
√t_mac_h
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & (
lgwm
>>32)));

1160 
√t_mac_l
 = 
	`ht⁄l
((
uöt32_t
)(0xFFFFFFFF & 
lgwm
 ));

1163 
	`mem£t
(&
höts
, 0,  hints);

1164 
höts
.
ai_Ámûy
 = 
AF_INET
;

1165 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

1168 
i
 = 
	`gëaddröfo
(
£rv_addr
, 
£rv_p‹t_up
, &
höts
, &
ªsu…
);

1169 i‡(
i
 != 0) {

1170 
	`MSG
("ERROR: [up] gëaddröfÿ⁄áddªs†%†(PORT %sËªtu∫ed %s\n", 
£rv_addr
, 
£rv_p‹t_up
, 
	`gai_°ªº‹
(
i
));

1171 
	`exô
(
EXIT_FAILURE
);

1175 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1176 
sock_up
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

1177 i‡(
sock_up
 == -1) ;

1180 i‡(
q
 =
NULL
) {

1181 
	`MSG
("ERROR: [up] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
£rv_addr
, 
£rv_p‹t_up
);

1182 
i
 = 1;

1183 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1184 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

1185 
	`MSG
("INFO: [up]Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

1186 ++
i
;

1188 
	`exô
(
EXIT_FAILURE
);

1192 
i
 = 
	`c⁄√˘
(
sock_up
, 
q
->
ai_addr
, q->
ai_addæí
);

1193 i‡(
i
 != 0) {

1194 
	`MSG
("ERROR: [up] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1195 
	`exô
(
EXIT_FAILURE
);

1197 
	`‰ìaddröfo
(
ªsu…
);

1200 
i
 = 
	`gëaddröfo
(
£rv_addr
, 
£rv_p‹t_down
, &
höts
, &
ªsu…
);

1201 i‡(
i
 != 0) {

1202 
	`MSG
("ERROR: [down] gëaddröfÿ⁄áddªs†%†’‹à%sËªtu∫ed %s\n", 
£rv_addr
, 
£rv_p‹t_up
, 
	`gai_°ªº‹
(
i
));

1203 
	`exô
(
EXIT_FAILURE
);

1207 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1208 
sock_down
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

1209 i‡(
sock_down
 == -1) ;

1212 i‡(
q
 =
NULL
) {

1213 
	`MSG
("ERROR: [down] faûedÅÿ›í sockëÅÿ™y o‡£rvî %†addªs£†’‹à%s)\n", 
£rv_addr
, 
£rv_p‹t_up
);

1214 
i
 = 1;

1215 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

1216 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

1217 
	`MSG
("INFO: [down]Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

1218 ++
i
;

1220 
	`exô
(
EXIT_FAILURE
);

1224 
i
 = 
	`c⁄√˘
(
sock_down
, 
q
->
ai_addr
, q->
ai_addæí
);

1225 i‡(
i
 != 0) {

1226 
	`MSG
("ERROR: [down] c⁄√˘Ñëu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1227 
	`exô
(
EXIT_FAILURE
);

1229 
	`‰ìaddröfo
(
ªsu…
);

1232 
i
 = 
	`lgw_°¨t
();

1233 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1234 
	`MSG
("INFO: [main] concentrator started,Öacket canÇow beÑeceived\n");

1236 
	`MSG
("ERROR: [main] failedÅo startÅhe concentrator\n");

1237 
	`exô
(
EXIT_FAILURE
);

1242 
i
 = 
	`±hªad_¸óã
–&
thrid_up
, 
NULL
, (* (*)(*))
thªad_up
, NULL);

1243 i‡(
i
 != 0) {

1244 
	`MSG
("ERROR: [main] impossibleÅo create upstreamÅhread\n");

1245 
	`exô
(
EXIT_FAILURE
);

1247 
i
 = 
	`±hªad_¸óã
–&
thrid_down
, 
NULL
, (* (*)(*))
thªad_down
, NULL);

1248 i‡(
i
 != 0) {

1249 
	`MSG
("ERROR: [main] impossibleÅo create downstreamÅhread\n");

1250 
	`exô
(
EXIT_FAILURE
);

1252 
i
 = 
	`±hªad_¸óã
–&
thrid_jô
, 
NULL
, (* (*)(*))
thªad_jô
, NULL);

1253 i‡(
i
 != 0) {

1254 
	`MSG
("ERROR: [main] impossibleÅo create JITÅhread\n");

1255 
	`exô
(
EXIT_FAILURE
);

1257 
i
 = 
	`±hªad_¸óã
–&
thrid_timîsync
, 
NULL
, (* (*)(*))
thªad_timîsync
, NULL);

1258 i‡(
i
 != 0) {

1259 
	`MSG
("ERROR: [main] impossibleÅo create Timer SyncÅhread\n");

1260 
	`exô
(
EXIT_FAILURE
);

1264 i‡(
gps_íabÀd
 =
åue
) {

1265 
i
 = 
	`±hªad_¸óã
–&
thrid_gps
, 
NULL
, (* (*)(*))
thªad_gps
, NULL);

1266 i‡(
i
 != 0) {

1267 
	`MSG
("ERROR: [main] impossibleÅo create GPSÅhread\n");

1268 
	`exô
(
EXIT_FAILURE
);

1270 
i
 = 
	`±hªad_¸óã
–&
thrid_vÆid
, 
NULL
, (* (*)(*))
thªad_vÆid
, NULL);

1271 i‡(
i
 != 0) {

1272 
	`MSG
("ERROR: [main] impossibleÅo create validationÅhread\n");

1273 
	`exô
(
EXIT_FAILURE
);

1278 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

1279 
siga˘
.
ß_Êags
 = 0;

1280 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

1281 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

1282 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

1283 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

1286 !
exô_sig
 && !
quô_sig
) {

1288 
	`waô_ms
(1000 * 
°©_öãrvÆ
);

1291 
t
 = 
	`time
(
NULL
);

1292 
	`°r·ime
(
°©_time°amp
,  sèt_time°amp, "%F %T %Z", 
	`gmtime
(&
t
));

1295 
	`±hªad_muãx_lock
(&
mx_mós_up
);

1296 
˝_nb_rx_rcv
 = 
mós_nb_rx_rcv
;

1297 
˝_nb_rx_ok
 = 
mós_nb_rx_ok
;

1298 
˝_nb_rx_bad
 = 
mós_nb_rx_bad
;

1299 
˝_nb_rx_no¸c
 = 
mós_nb_rx_no¸c
;

1300 
˝_up_pkt_fwd
 = 
mós_up_pkt_fwd
;

1301 
˝_up_√tw‹k_byã
 = 
mós_up_√tw‹k_byã
;

1302 
˝_up_∑ylﬂd_byã
 = 
mós_up_∑ylﬂd_byã
;

1303 
˝_up_dgøm_£¡
 = 
mós_up_dgøm_£¡
;

1304 
˝_up_ack_rcv
 = 
mós_up_ack_rcv
;

1305 
mós_nb_rx_rcv
 = 0;

1306 
mós_nb_rx_ok
 = 0;

1307 
mós_nb_rx_bad
 = 0;

1308 
mós_nb_rx_no¸c
 = 0;

1309 
mós_up_pkt_fwd
 = 0;

1310 
mós_up_√tw‹k_byã
 = 0;

1311 
mós_up_∑ylﬂd_byã
 = 0;

1312 
mós_up_dgøm_£¡
 = 0;

1313 
mós_up_ack_rcv
 = 0;

1314 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1315 i‡(
˝_nb_rx_rcv
 > 0) {

1316 
rx_ok_øtio
 = ()
˝_nb_rx_ok
 / ()
˝_nb_rx_rcv
;

1317 
rx_bad_øtio
 = ()
˝_nb_rx_bad
 / ()
˝_nb_rx_rcv
;

1318 
rx_no¸c_øtio
 = ()
˝_nb_rx_no¸c
 / ()
˝_nb_rx_rcv
;

1320 
rx_ok_øtio
 = 0.0;

1321 
rx_bad_øtio
 = 0.0;

1322 
rx_no¸c_øtio
 = 0.0;

1324 i‡(
˝_up_dgøm_£¡
 > 0) {

1325 
up_ack_øtio
 = ()
˝_up_ack_rcv
 / ()
˝_up_dgøm_£¡
;

1327 
up_ack_øtio
 = 0.0;

1331 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

1332 
˝_dw_puŒ_£¡
 = 
mós_dw_puŒ_£¡
;

1333 
˝_dw_ack_rcv
 = 
mós_dw_ack_rcv
;

1334 
˝_dw_dgøm_rcv
 = 
mós_dw_dgøm_rcv
;

1335 
˝_dw_√tw‹k_byã
 = 
mós_dw_√tw‹k_byã
;

1336 
˝_dw_∑ylﬂd_byã
 = 
mós_dw_∑ylﬂd_byã
;

1337 
˝_nb_tx_ok
 = 
mós_nb_tx_ok
;

1338 
˝_nb_tx_Áû
 = 
mós_nb_tx_Áû
;

1339 
˝_nb_tx_ªque°ed
 +
mós_nb_tx_ªque°ed
;

1340 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 +
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
;

1341 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 +
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
;

1342 
˝_nb_tx_ªje˘ed_too_œã
 +
mós_nb_tx_ªje˘ed_too_œã
;

1343 
˝_nb_tx_ªje˘ed_too_óæy
 +
mós_nb_tx_ªje˘ed_too_óæy
;

1344 
˝_nb_bóc⁄_queued
 +
mós_nb_bóc⁄_queued
;

1345 
˝_nb_bóc⁄_£¡
 +
mós_nb_bóc⁄_£¡
;

1346 
˝_nb_bóc⁄_ªje˘ed
 +
mós_nb_bóc⁄_ªje˘ed
;

1347 
mós_dw_puŒ_£¡
 = 0;

1348 
mós_dw_ack_rcv
 = 0;

1349 
mós_dw_dgøm_rcv
 = 0;

1350 
mós_dw_√tw‹k_byã
 = 0;

1351 
mós_dw_∑ylﬂd_byã
 = 0;

1352 
mós_nb_tx_ok
 = 0;

1353 
mós_nb_tx_Áû
 = 0;

1354 
mós_nb_tx_ªque°ed
 = 0;

1355 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 = 0;

1356 
mós_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 = 0;

1357 
mós_nb_tx_ªje˘ed_too_œã
 = 0;

1358 
mós_nb_tx_ªje˘ed_too_óæy
 = 0;

1359 
mós_nb_bóc⁄_queued
 = 0;

1360 
mós_nb_bóc⁄_£¡
 = 0;

1361 
mós_nb_bóc⁄_ªje˘ed
 = 0;

1362 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

1363 i‡(
˝_dw_puŒ_£¡
 > 0) {

1364 
dw_ack_øtio
 = ()
˝_dw_ack_rcv
 / ()
˝_dw_puŒ_£¡
;

1366 
dw_ack_øtio
 = 0.0;

1370 i‡(
gps_íabÀd
 =
åue
) {

1371 
	`±hªad_muãx_lock
(&
mx_mós_gps
);

1372 
co‹d_ok
 = 
gps_co‹d_vÆid
;

1373 
˝_gps_co‹d
 = 
mós_gps_co‹d
;

1374 
	`±hªad_muãx_u∆ock
(&
mx_mós_gps
);

1378 i‡(
gps_Áke_íabÀ
 =
åue
) {

1379 
˝_gps_co‹d
 = 
ª„ªn˚_co‹d
;

1382 
ªp‹t_fûe
 = 
	`f›í
("/var/log/gw_report_log", "w+");

1383 i‡(
ªp‹t_fûe
 =
NULL
) {

1384 
	`MSG
("ERROR: impossibleÅo createÜog fileÜora_report\n");

1387 
	`Ârötf
(
ªp‹t_fûe
, "\n##### %†#####\n", 
°©_time°amp
);

1388 
	`Ârötf
(
ªp‹t_fûe
, "### [UPSTREAM] ###\n");

1389 
	`Ârötf
(
ªp‹t_fûe
, "# RFÖackë†ª˚ived by c⁄˚¡øt‹: %u\n", 
˝_nb_rx_rcv
);

1390 
	`Ârötf
(
ªp‹t_fûe
, "# CRC_OK: %.2f%%, CRC_FAIL: %.2f%%, NO_CRC: %.2f%%\n", 100.0 * 
rx_ok_øtio
, 100.0 * 
rx_bad_øtio
, 100.0 * 
rx_no¸c_øtio
);

1391 
	`Ârötf
(
ªp‹t_fûe
, "# RFÖackë†f‹w¨ded: %u (%u byãs)\n", 
˝_up_pkt_fwd
, 
˝_up_∑ylﬂd_byã
);

1392 
	`Ârötf
(
ªp‹t_fûe
, "# PUSH_DATA d©agøm†£¡: %u (%u byãs)\n", 
˝_up_dgøm_£¡
, 
˝_up_√tw‹k_byã
);

1393 
	`Ârötf
(
ªp‹t_fûe
, "# PUSH_DATAácknowÀdged: %.2f%%\n", 100.0 * 
up_ack_øtio
);

1394 
	`Ârötf
(
ªp‹t_fûe
, "### [DOWNSTREAM] ###\n");

1395 
	`Ârötf
(
ªp‹t_fûe
, "# PULL_DATA sít: %u (%.2f%%ácknowÀdged)\n", 
˝_dw_puŒ_£¡
, 100.0 * 
dw_ack_øtio
);

1396 
	`Ârötf
(
ªp‹t_fûe
, "# PULL_RESP(⁄£Ëd©agøm†ª˚ived: %u (%u byãs)\n", 
˝_dw_dgøm_rcv
, 
˝_dw_√tw‹k_byã
);

1397 
	`Ârötf
(
ªp‹t_fûe
, "# RFÖackë†£¡Åÿc⁄˚¡øt‹: %u (%u byãs)\n", (
˝_nb_tx_ok
+
˝_nb_tx_Áû
), 
˝_dw_∑ylﬂd_byã
);

1398 
	`Ârötf
(
ªp‹t_fûe
, "# TXÉº‹s: %u\n", 
˝_nb_tx_Áû
);

1399 i‡(
˝_nb_tx_ªque°ed
 != 0 ) {

1400 
	`Ârötf
(
ªp‹t_fûe
, "# TXÑeje˘ed (cﬁlisi⁄Öackë): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_∑ckë
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_collision_packet);

1401 
	`Ârötf
(
ªp‹t_fûe
, "# TXÑeje˘ed (cﬁlisi⁄ bóc⁄): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_cﬁlisi⁄_bóc⁄
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_collision_beacon);

1402 
	`Ârötf
(
ªp‹t_fûe
, "# TXÑeje˘ed (toÿœã): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_too_œã
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_too_late);

1403 
	`Ârötf
(
ªp‹t_fûe
, "# TXÑeje˘ed (toÿóæy): %.2f%% (ªq:%u,Ñej:%u)\n", 100.0 * 
˝_nb_tx_ªje˘ed_too_óæy
 / 
˝_nb_tx_ªque°ed
, cp_nb_tx_requested, cp_nb_tx_rejected_too_early);

1405 
	`Ârötf
(
ªp‹t_fûe
, "# BEACON queued: %u\n", 
˝_nb_bóc⁄_queued
);

1406 
	`Ârötf
(
ªp‹t_fûe
, "# BEACON síàsÿÁr: %u\n", 
˝_nb_bóc⁄_£¡
);

1407 
	`Ârötf
(
ªp‹t_fûe
, "# BEACONÑeje˘ed: %u\n", 
˝_nb_bóc⁄_ªje˘ed
);

1408 
	`Ârötf
(
ªp‹t_fûe
, "### [JIT] ###\n");

1409 
	`f˛o£
(
ªp‹t_fûe
);

1413 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

1414 
i
 = 
	`lgw_gë_åig˙t
(&
åig_t°amp
);

1415 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

1416 i‡(
i
 !
LGW_HAL_SUCCESS
) {

1417 
	`¥ötf
("# SX1301Åime (PPS): unknown\n");

1419 
	`¥ötf
("# SX1301Åimê(PPS): %u\n", 
åig_t°amp
);

1421 
	`jô_¥öt_queue
 (&
jô_queue
, 
Ál£
, 
DEBUG_LOG
);

1422 
	`¥ötf
("### [GPS] ###\n");

1423 i‡(
gps_íabÀd
 =
åue
) {

1425 i‡(
gps_ªf_vÆid
 =
åue
) {

1426 
	`¥ötf
("# VÆidÅimêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
));

1428 
	`¥ötf
("# InvÆidÅimêª„ªn˚ (age: %lò£c)\n", ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
));

1430 i‡(
co‹d_ok
 =
åue
) {

1431 
	`¥ötf
("# GPS co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

1433 
	`¥ötf
("#Ço valid GPS coordinatesávailable yet\n");

1435 } i‡(
gps_Áke_íabÀ
 =
åue
) {

1436 
	`¥ötf
("# GPS *FAKE* co‹dö©es:Ü©ôudê%.5f,Ü⁄gôudê%.5f,á…ôudê%òm\n", 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
);

1438 
	`¥ötf
("# GPS sync is disabled\n");

1440 
	`¥ötf
("##### END #####\n");

1443 
	`±hªad_muãx_lock
(&
mx_°©_ªp
);

1444 i‡(((
gps_íabÀd
 =
åue
Ë&& (
co‹d_ok
 =åue)Ë|| (
gps_Áke_íabÀ
 ==Årue)) {

1445 
	`¢¥ötf
(
°©us_ªp‹t
, 
STATUS_SIZE
, "\"°©\":{\"time\":\"%s\",\"œti\":%.5f,\"l⁄g\":%.5f,\"Æti\":%i,\"rxnb\":%u,\"rxok\":%u,\"rxfw\":%u,\"ackr\":%.1f,\"dwnb\":%u,\"txnb\":%u}", 
°©_time°amp
, 
˝_gps_co‹d
.
œt
, cp_gps_co‹d.
l⁄
, cp_gps_co‹d.
Æt
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
, 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
, 
˝_nb_tx_ok
);

1447 
	`¢¥ötf
(
°©us_ªp‹t
, 
STATUS_SIZE
, "\"°©\":{\"time\":\"%s\",\"rxnb\":%u,\"rxok\":%u,\"rxfw\":%u,\"ackr\":%.1f,\"dwnb\":%u,\"txnb\":%u}", 
°©_time°amp
, 
˝_nb_rx_rcv
, 
˝_nb_rx_ok
, 
˝_up_pkt_fwd
, 100.0 * 
up_ack_øtio
, 
˝_dw_dgøm_rcv
, 
˝_nb_tx_ok
);

1449 
ªp‹t_ªady
 = 
åue
;

1450 
	`±hªad_muãx_u∆ock
(&
mx_°©_ªp
);

1454 
	`±hªad_joö
(
thrid_up
, 
NULL
);

1455 
	`±hªad_ˇn˚l
(
thrid_down
);

1456 
	`±hªad_ˇn˚l
(
thrid_jô
);

1457 
	`±hªad_ˇn˚l
(
thrid_timîsync
);

1458 i‡(
gps_íabÀd
 =
åue
) {

1459 
	`±hªad_ˇn˚l
(
thrid_gps
);

1460 
	`±hªad_ˇn˚l
(
thrid_vÆid
);

1462 
i
 = 
	`lgw_gps_dißbÀ
(
gps_ây_fd
);

1463 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1464 
	`MSG
("INFO: GPS closed successfully\n");

1466 
	`MSG
("WARNING: failedÅo close GPS successfully\n");

1471 i‡(
exô_sig
) {

1473 
	`shutdown
(
sock_up
, 
SHUT_RDWR
);

1474 
	`shutdown
(
sock_down
, 
SHUT_RDWR
);

1476 
i
 = 
	`lgw_°›
();

1477 i‡(
i
 =
LGW_HAL_SUCCESS
) {

1478 
	`MSG
("INFO: concentrator stopped successfully\n");

1480 
	`MSG
("WARNING: failedÅo stop concentrator successfully\n");

1484 
	`MSG
("INFO: ExitingÖacket forwarderÖrogram\n");

1485 
	`exô
(
EXIT_SUCCESS
);

1486 
	}
}

1491 
	$thªad_up
() {

1492 
i
, 
j
;

1493 
pkt_ö_dgøm
;

1496 
lgw_pkt_rx_s
 
rxpkt
[
NB_PKT_MAX
];

1497 
lgw_pkt_rx_s
 *
p
;

1498 
nb_pkt
;

1501 
boﬁ
 
ªf_ok
 = 
Ál£
;

1502 
åef
 
loˇl_ªf
;

1505 
uöt8_t
 
buff_up
[
TX_BUFF_SIZE
];

1506 
buff_ödex
;

1507 
uöt8_t
 
buff_ack
[32];

1510 
uöt8_t
 
tokí_h
;

1511 
uöt8_t
 
tokí_l
;

1514 
time•ec
 
£nd_time
;

1515 
time•ec
 
ªcv_time
;

1518 
time•ec
 
pkt_utc_time
;

1519 
tm
 * 
x
;

1520 
time•ec
 
pkt_gps_time
;

1521 
uöt64_t
 
pkt_gps_time_ms
;

1524 
boﬁ
 
£nd_ªp‹t
 = 
Ál£
;

1527 
uöt32_t
 
mŸe_addr
 = 0;

1528 
uöt16_t
 
mŸe_f˙t
 = 0;

1531 
time•ec
 
„tch_time
;

1532 
„tch_time°amp
[30];

1533 
tm
 * 
x
;

1535 
log_rŸ©e_öãrvÆ
 = 3600;

1536 
time_check
 = 0;

1539 
i
 = 
	`£tsock›t
(
sock_up
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
push_timeout_hÆf
, Öush_timeout_half);

1540 i‡(
i
 != 0) {

1541 
	`MSG
("ERROR: [up] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

1542 
	`exô
(
EXIT_FAILURE
);

1546 
	`•rötf
(
lgwm_°r
, "%08X%08X", (
uöt32_t
)(
lgwm
 >> 32), (uint32_t)(lgwm & 0xFFFFFFFF));

1548 
	`time
(&
now_time
);

1549 
	`›í_log
();

1552 
buff_up
[0] = 
PROTOCOL_VERSION
;

1553 
buff_up
[3] = 
PKT_PUSH_DATA
;

1554 *(
uöt32_t
 *)(
buff_up
 + 4Ë
√t_mac_h
;

1555 *(
uöt32_t
 *)(
buff_up
 + 8Ë
√t_mac_l
;

1557 !
exô_sig
 && !
quô_sig
) {

1560 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

1561 
nb_pkt
 = 
	`lgw_ª˚ive
(
NB_PKT_MAX
, 
rxpkt
);

1562 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

1563 i‡(
nb_pkt
 =
LGW_HAL_ERROR
) {

1564 
	`MSG
("ERROR: [up] failedÖacket fetch,Éxiting\n");

1565 
	`exô
(
EXIT_FAILURE
);

1569 
£nd_ªp‹t
 = 
ªp‹t_ªady
;

1573 i‡((
nb_pkt
 =0Ë&& (
£nd_ªp‹t
 =
Ál£
)) {

1574 
	`waô_ms
(
FETCH_SLEEP_MS
);

1579 i‡((
nb_pkt
 > 0Ë&& (
gps_íabÀd
 =
åue
)) {

1580 
	`±hªad_muãx_lock
(&
mx_timîef
);

1581 
ªf_ok
 = 
gps_ªf_vÆid
;

1582 
loˇl_ªf
 = 
time_ª„ªn˚_gps
;

1583 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

1584 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
„tch_time
);

1585 
x
 = 
	`gmtime
(&(
„tch_time
.
tv_£c
));

1586 
	`•rötf
(
„tch_time°amp
,"%04i-%02i-%02ò%02i:%02i:%02i.%03liZ",(
x
->
tm_yór
)+1900,(x->
tm_m⁄
)+1,x->
tm_mday
,x->
tm_hour
,x->
tm_mö
,x->
tm_£c
,(
„tch_time
.
tv_n£c
)/1000000);

1589 
ªf_ok
 = 
Ál£
;

1593 
tokí_h
 = (
uöt8_t
)
	`ønd
();

1594 
tokí_l
 = (
uöt8_t
)
	`ønd
();

1595 
buff_up
[1] = 
tokí_h
;

1596 
buff_up
[2] = 
tokí_l
;

1597 
buff_ödex
 = 12;

1600 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"{\"rxpk\":[", 9);

1601 
buff_ödex
 += 9;

1604 
pkt_ö_dgøm
 = 0;

1605 
i
=0; i < 
nb_pkt
; ++i) {

1606 
p
 = &
rxpkt
[
i
];

1609 
	`Ârötf
(
log_fûe
, "\"%08X%08X\",", (
uöt32_t
)(
lgwm
 >> 32), (uint32_t)(lgwm & 0xFFFFFFFF));

1612 
	`Ârötf
(
log_fûe
, "\"%s\",", 
„tch_time°amp
);

1616 
	`Ârötf
(
log_fûe
, "%10u,", 
p
->
cou¡_us
);

1619 
	`Ârötf
(
log_fûe
, "%10u,", 
p
->
‰eq_hz
);

1622 
	`Ârötf
(
log_fûe
, "%u,", 
p
->
rf_chaö
);

1625 
	`Ârötf
(
log_fûe
, "%2d,", 
p
->
if_chaö
);

1629 
mŸe_addr
 = 
p
->
∑ylﬂd
[1];

1630 
mŸe_addr
 |
p
->
∑ylﬂd
[2] << 8;

1631 
mŸe_addr
 |
p
->
∑ylﬂd
[3] << 16;

1632 
mŸe_addr
 |
p
->
∑ylﬂd
[4] << 24;

1634 
mŸe_f˙t
 = 
p
->
∑ylﬂd
[6];

1635 
mŸe_f˙t
 |
p
->
∑ylﬂd
[7] << 8;

1638 
	`±hªad_muãx_lock
(&
mx_mós_up
);

1639 
mós_nb_rx_rcv
 += 1;

1640 
p
->
°©us
) {

1641 
STAT_CRC_OK
:

1642 
mós_nb_rx_ok
 += 1;

1644 i‡(!
fwd_vÆid_pkt
) {

1645 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1648 
	`Âuts
("\"CRC_OK\" ,", 
log_fûe
);

1650 
STAT_CRC_BAD
:

1651 
mós_nb_rx_bad
 += 1;

1652 i‡(!
fwd_îr‹_pkt
) {

1653 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1656 
	`Âuts
("\"CRC_BAD\",", 
log_fûe
);

1658 
STAT_NO_CRC
:

1659 
mós_nb_rx_no¸c
 += 1;

1660 i‡(!
fwd_no¸c_pkt
) {

1661 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1664 
	`Âuts
("\"NO_CRC\" ,", 
log_fûe
);

1668 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1669 
	`Âuts
("\"UNDEF\" ,", 
log_fûe
);

1675 
	`Ârötf
(
log_fûe
, "%3u,", 
p
->
size
);

1677 
mós_up_pkt_fwd
 += 1;

1678 
mós_up_∑ylﬂd_byã
 +
p
->
size
;

1679 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

1682 i‡(
pkt_ö_dgøm
 == 0) {

1683 
buff_up
[
buff_ödex
] = '{';

1684 ++
buff_ödex
;

1686 
buff_up
[
buff_ödex
] = ',';

1687 
buff_up
[
buff_ödex
+1] = '{';

1688 
buff_ödex
 += 2;

1692 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "\"tm°\":%u", 
p
->
cou¡_us
);

1693 i‡(
j
 > 0) {

1694 
buff_ödex
 +
j
;

1696 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1697 
	`exô
(
EXIT_FAILURE
);

1701 i‡(
ªf_ok
 =
åue
) {

1703 
j
 = 
	`lgw_˙t2utc
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_utc_time
);

1704 i‡(
j
 =
LGW_GPS_SUCCESS
) {

1706 
x
 = 
	`gmtime
(&(
pkt_utc_time
.
tv_£c
));

1707 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"time\":\"%04i-%02i-%02iT%02i:%02i:%02i.%06liZ\"", (
x
->
tm_yór
)+1900, (x->
tm_m⁄
)+1, x->
tm_mday
, x->
tm_hour
, x->
tm_mö
, x->
tm_£c
, (
pkt_utc_time
.
tv_n£c
)/1000);

1708 i‡(
j
 > 0) {

1709 
buff_ödex
 +
j
;

1711 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1712 
	`exô
(
EXIT_FAILURE
);

1716 
j
 = 
	`lgw_˙t2gps
(
loˇl_ªf
, 
p
->
cou¡_us
, &
pkt_gps_time
);

1717 i‡(
j
 =
LGW_GPS_SUCCESS
) {

1718 
pkt_gps_time_ms
 = 
pkt_gps_time
.
tv_£c
 * 1E3 +Ökt_gps_time.
tv_n£c
 / 1E6;

1719 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_index, ",\"tmms\":%llu",

1720 
pkt_gps_time_ms
);

1721 i‡(
j
 > 0) {

1722 
buff_ödex
 +
j
;

1724 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1725 
	`exô
(
EXIT_FAILURE
);

1731 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"ch™\":%1u,\"rfch\":%1u,\"‰eq\":%.6lf", 
p
->
if_chaö
,Ö->
rf_chaö
, ((Ì->
‰eq_hz
 / 1e6));

1732 i‡(
j
 > 0) {

1733 
buff_ödex
 +
j
;

1735 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1736 
	`exô
(
EXIT_FAILURE
);

1740 
p
->
°©us
) {

1741 
STAT_CRC_OK
:

1742 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":1", 9);

1743 
buff_ödex
 += 9;

1745 
STAT_CRC_BAD
:

1746 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":-1", 10);

1747 
buff_ödex
 += 10;

1749 
STAT_NO_CRC
:

1750 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":0", 9);

1751 
buff_ödex
 += 9;

1754 
	`MSG
("ERROR: [up]ÑeceivedÖacket with unknown status\n");

1755 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"stat\":?", 9);

1756 
buff_ödex
 += 9;

1757 
	`exô
(
EXIT_FAILURE
);

1761 i‡(
p
->
moduœti⁄
 =
MOD_LORA
) {

1762 
	`Âuts
("\"LORA\",", 
log_fûe
);

1763 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"LORA\"", 14);

1764 
buff_ödex
 += 14;

1767 
p
->
d©¨©e
) {

1768 
DR_LORA_SF7
:

1769 
	`Âuts
("\"SF7\" ,", 
log_fûe
);

1770 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF7", 12);

1771 
buff_ödex
 += 12;

1773 
DR_LORA_SF8
:

1774 
	`Âuts
("\"SF8\" ,", 
log_fûe
);

1775 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF8", 12);

1776 
buff_ödex
 += 12;

1778 
DR_LORA_SF9
:

1779 
	`Âuts
("\"SF9\" ,", 
log_fûe
);

1780 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF9", 12);

1781 
buff_ödex
 += 12;

1783 
DR_LORA_SF10
:

1784 
	`Âuts
("\"SF10\" ,", 
log_fûe
);

1785 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF10", 13);

1786 
buff_ödex
 += 13;

1788 
DR_LORA_SF11
:

1789 
	`Âuts
("\"SF11\" ,", 
log_fûe
);

1790 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF11", 13);

1791 
buff_ödex
 += 13;

1793 
DR_LORA_SF12
:

1794 
	`Âuts
("\"SF12\" ,", 
log_fûe
);

1795 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF12", 13);

1796 
buff_ödex
 += 13;

1799 
	`Âuts
("\"ERR\" ,", 
log_fûe
);

1800 
	`MSG
("ERROR: [up]ÜoraÖacket with unknown datarate\n");

1801 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"datr\":\"SF?", 12);

1802 
buff_ödex
 += 12;

1803 
	`exô
(
EXIT_FAILURE
);

1805 
p
->
b™dwidth
) {

1806 
BW_125KHZ
:

1807 
	`Âuts
("125000,", 
log_fûe
);

1808 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW125\"", 6);

1809 
buff_ödex
 += 6;

1811 
BW_250KHZ
:

1812 
	`Âuts
("250000,", 
log_fûe
);

1813 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW250\"", 6);

1814 
buff_ödex
 += 6;

1816 
BW_500KHZ
:

1817 
	`Âuts
("500000,", 
log_fûe
);

1818 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW500\"", 6);

1819 
buff_ödex
 += 6;

1822 
	`Âuts
("-1 ,", 
log_fûe
);

1823 
	`MSG
("ERROR: [up]ÜoraÖacket with unknown bandwidth\n");

1824 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)"BW?\"", 4);

1825 
buff_ödex
 += 4;

1826 
	`exô
(
EXIT_FAILURE
);

1830 
p
->
codî©e
) {

1831 
CR_LORA_4_5
:

1832 
	`Âuts
("\"4/5\",", 
log_fûe
);

1833 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/5\"", 13);

1834 
buff_ödex
 += 13;

1836 
CR_LORA_4_6
:

1837 
	`Âuts
("\"2/3\",", 
log_fûe
);

1838 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/6\"", 13);

1839 
buff_ödex
 += 13;

1841 
CR_LORA_4_7
:

1842 
	`Âuts
("\"4/7\",", 
log_fûe
);

1843 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/7\"", 13);

1844 
buff_ödex
 += 13;

1846 
CR_LORA_4_8
:

1847 
	`Âuts
("\"1/2\",", 
log_fûe
);

1848 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"4/8\"", 13);

1849 
buff_ödex
 += 13;

1852 
	`Âuts
("\"\" ,", 
log_fûe
);

1853 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"OFF\"", 13);

1854 
buff_ödex
 += 13;

1857 
	`Âuts
("\"ERR\",", 
log_fûe
);

1858 
	`MSG
("ERROR: [up]ÜoraÖacket with unknown coderate\n");

1859 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"codr\":\"?\"", 11);

1860 
buff_ödex
 += 11;

1861 
	`exô
(
EXIT_FAILURE
);

1865 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"l¢r\":%.1f", 
p
->
¢r
);

1866 i‡(
j
 > 0) {

1867 
buff_ödex
 +
j
;

1869 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1870 
	`exô
(
EXIT_FAILURE
);

1872 } i‡(
p
->
moduœti⁄
 =
MOD_FSK
) {

1873 
	`Âuts
("\"FSK\" ,", 
log_fûe
);

1874 
	`Ârötf
(
log_fûe
, "\"%6u\",", 
p
->
d©¨©e
);

1875 
	`Âuts
("0 ,", 
log_fûe
);

1876 
	`Âuts
("0 ,", 
log_fûe
);

1877 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"modu\":\"FSK\"", 13);

1878 
buff_ödex
 += 13;

1881 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"d©r\":%u", 
p
->
d©¨©e
);

1882 i‡(
j
 > 0) {

1883 
buff_ödex
 +
j
;

1885 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1886 
	`exô
(
EXIT_FAILURE
);

1889 
	`Âuts
("\"ERR\" ,", 
log_fûe
);

1890 
	`MSG
("ERROR: [up]ÑeceivedÖacket with unknown modulation\n");

1891 
	`exô
(
EXIT_FAILURE
);

1895 
	`Ârötf
(
log_fûe
, "%+.0f,", 
p
->
rssi
);

1898 
	`Ârötf
(
log_fûe
, "%+5.1f,", 
p
->
¢r
);

1901 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, ",\"rssi\":%.0f,\"size\":%u", 
p
->
rssi
,Ö->
size
);

1902 i‡(
j
 > 0) {

1903 
buff_ödex
 +
j
;

1905 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 4));

1906 
	`exô
(
EXIT_FAILURE
);

1910 
	`mem˝y
((*)(
buff_up
 + 
buff_ödex
), (*)",\"data\":\"", 9);

1911 
buff_ödex
 += 9;

1912 
j
 = 
	`bö_to_b64
(
p
->
∑ylﬂd
,Ö->
size
, (*)(
buff_up
 + 
buff_ödex
), 341);

1913 i‡(
j
>=0) {

1914 
buff_ödex
 +
j
;

1916 
	`MSG
("ERROR: [up] bö_to_b64 faûedÜöê%u\n", (
__LINE__
 - 5));

1917 
	`exô
(
EXIT_FAILURE
);

1919 
buff_up
[
buff_ödex
] = '"';

1920 ++
buff_ödex
;

1923 
buff_up
[
buff_ödex
] = '}';

1924 ++
buff_ödex
;

1925 ++
pkt_ö_dgøm
;

1937 
	`Âuts
("\n", 
log_fûe
);

1938 
	`fÊush
(
log_fûe
);

1942 i‡(
pkt_ö_dgøm
 == 0) {

1943 i‡(
£nd_ªp‹t
 =
åue
) {

1945 
buff_ödex
 -= 8;

1952 
buff_up
[
buff_ödex
] = ']';

1953 ++
buff_ödex
;

1955 i‡(
£nd_ªp‹t
 =
åue
) {

1956 
buff_up
[
buff_ödex
] = ',';

1957 ++
buff_ödex
;

1962 i‡(
£nd_ªp‹t
 =
åue
) {

1963 
	`±hªad_muãx_lock
(&
mx_°©_ªp
);

1964 
ªp‹t_ªady
 = 
Ál£
;

1965 
j
 = 
	`¢¥ötf
((*)(
buff_up
 + 
buff_ödex
), 
TX_BUFF_SIZE
-buff_ödex, "%s", 
°©us_ªp‹t
);

1966 
	`±hªad_muãx_u∆ock
(&
mx_°©_ªp
);

1967 i‡(
j
 > 0) {

1968 
buff_ödex
 +
j
;

1970 
	`MSG
("ERROR: [up] s≈röt‡ÁûedÜöê%u\n", (
__LINE__
 - 5));

1971 
	`exô
(
EXIT_FAILURE
);

1976 
buff_up
[
buff_ödex
] = '}';

1977 ++
buff_ödex
;

1978 
buff_up
[
buff_ödex
] = 0;

1980 
	`¥ötf
("\nJSON up: %s\n", (*)(
buff_up
 + 12));

1983 
	`£nd
(
sock_up
, (*)
buff_up
, 
buff_ödex
, 0);

1984 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

1985 
	`±hªad_muãx_lock
(&
mx_mós_up
);

1986 
mós_up_dgøm_£¡
 += 1;

1987 
mós_up_√tw‹k_byã
 +
buff_ödex
;

1990 
i
=0; i<2; ++i) {

1991 
j
 = 
	`ªcv
(
sock_up
, (*)
buff_ack
,  buff_ack, 0);

1992 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

1993 i‡(
j
 == -1) {

1994 i‡(
î∫o
 =
EAGAIN
) {

1999 } i‡((
j
 < 4Ë|| (
buff_ack
[0] !
PROTOCOL_VERSION
Ë|| (buff_ack[3] !
PKT_PUSH_ACK
)) {

2002 } i‡((
buff_ack
[1] !
tokí_h
Ë|| (buff_ack[2] !
tokí_l
)) {

2006 
	`MSG
("INFO: [up] PUSH_ACKÑe˚ived i¿%òms\n", ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

2007 
mós_up_ack_rcv
 += 1;

2011 
	`±hªad_muãx_u∆ock
(&
mx_mós_up
);

2013 ++
time_check
;

2014 i‡(
time_check
 >= 8) {

2015 
time_check
 = 0;

2016 
	`time
(&
now_time
);

2017 i‡(
	`dif·ime
(
now_time
, 
log_°¨t_time
Ë> 
log_rŸ©e_öãrvÆ
) {

2018 
	`f˛o£
(
log_fûe
);

2019 
	`›í_log
();

2025 
	`MSG
("\nINFO: End of upstreamÅhread\n");

2026 
	}
}

2031 
	$thªad_down
() {

2032 
i
;

2035 
lgw_pkt_tx_s
 
txpkt
;

2036 
boﬁ
 
£¡_immedüã
 = 
Ál£
;

2039 
time•ec
 
£nd_time
;

2040 
time•ec
 
ªcv_time
;

2043 
uöt8_t
 
buff_down
[1000];

2044 
uöt8_t
 
buff_ªq
[12];

2045 
msg_Àn
;

2048 
uöt8_t
 
tokí_h
;

2049 
uöt8_t
 
tokí_l
;

2050 
boﬁ
 
ªq_ack
 = 
Ál£
;

2053 
JSON_VÆue
 *
roŸ_vÆ
 = 
NULL
;

2054 
JSON_Obje˘
 *
txpk_obj
 = 
NULL
;

2055 
JSON_VÆue
 *
vÆ
 = 
NULL
;

2056 c⁄° *
°r
;

2057 
x0
, 
x1
;

2058 
uöt64_t
 
x2
;

2059 
x3
, 
x4
;

2062 
åef
 
loˇl_ªf
;

2063 
time•ec
 
gps_tx
;

2066 
lgw_pkt_tx_s
 
bóc⁄_pkt
;

2067 
uöt8_t
 
bóc⁄_ch™
;

2068 
uöt8_t
 
bóc⁄_lo›
;

2069 
size_t
 
bóc⁄_RFU1_size
 = 0;

2070 
size_t
 
bóc⁄_RFU2_size
 = 0;

2071 
uöt8_t
 
bóc⁄_pyld_idx
 = 0;

2072 
time_t
 
diff_bóc⁄_time
;

2073 
time•ec
 
√xt_bóc⁄_gps_time
;

2074 
time•ec
 
œ°_bóc⁄_gps_time
;

2075 
ªåy
;

2078 
öt32_t
 
fõld_œtôude
;

2079 
öt32_t
 
fõld_l⁄gôude
;

2080 
uöt16_t
 
fõld_¸c1
, 
fõld_¸c2
;

2083 
uöt32_t
 
autoquô_˙t
 = 0;

2086 
timevÆ
 
cuºít_unix_time
;

2087 
timevÆ
 
cuºít_c⁄˚¡øt‹_time
;

2088 
jô_îr‹_e
 
jô_ªsu…
 = 
JIT_ERROR_OK
;

2089 
jô_pkt_ty≥_e
 
dow∆ök_ty≥
;

2092 
i
 = 
	`£tsock›t
(
sock_down
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
puŒ_timeout
, Öull_timeout);

2093 i‡(
i
 != 0) {

2094 
	`MSG
("ERROR: [down] sësock›àªtu∫ed %s\n", 
	`°ªº‹
(
î∫o
));

2095 
	`exô
(
EXIT_FAILURE
);

2099 
buff_ªq
[0] = 
PROTOCOL_VERSION
;

2100 
buff_ªq
[3] = 
PKT_PULL_DATA
;

2101 *(
uöt32_t
 *)(
buff_ªq
 + 4Ë
√t_mac_h
;

2102 *(
uöt32_t
 *)(
buff_ªq
 + 8Ë
√t_mac_l
;

2105 
œ°_bóc⁄_gps_time
.
tv_£c
 = 0;

2106 
œ°_bóc⁄_gps_time
.
tv_n£c
 = 0;

2109 
bóc⁄_pkt
.
tx_mode
 = 
ON_GPS
;

2110 
bóc⁄_pkt
.
rf_chaö
 = 0;

2111 
bóc⁄_pkt
.
rf_powî
 = 
bóc⁄_powî
;

2112 
bóc⁄_pkt
.
moduœti⁄
 = 
MOD_LORA
;

2113 
bóc⁄_bw_hz
) {

2115 
bóc⁄_pkt
.
b™dwidth
 = 
BW_125KHZ
;

2118 
bóc⁄_pkt
.
b™dwidth
 = 
BW_500KHZ
;

2122 
	`MSG
("ERROR: unsupported bandwidth for beacon\n");

2123 
	`exô
(
EXIT_FAILURE
);

2125 
bóc⁄_d©¨©e
) {

2127 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF8
;

2128 
bóc⁄_RFU1_size
 = 1;

2129 
bóc⁄_RFU2_size
 = 3;

2132 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF9
;

2133 
bóc⁄_RFU1_size
 = 2;

2134 
bóc⁄_RFU2_size
 = 0;

2137 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF10
;

2138 
bóc⁄_RFU1_size
 = 3;

2139 
bóc⁄_RFU2_size
 = 1;

2142 
bóc⁄_pkt
.
d©¨©e
 = 
DR_LORA_SF12
;

2143 
bóc⁄_RFU1_size
 = 5;

2144 
bóc⁄_RFU2_size
 = 3;

2148 
	`MSG
("ERROR: unsupported datarate for beacon\n");

2149 
	`exô
(
EXIT_FAILURE
);

2151 
bóc⁄_pkt
.
size
 = 
bóc⁄_RFU1_size
 + 4 + 2 + 7 + 
bóc⁄_RFU2_size
 + 2;

2152 
bóc⁄_pkt
.
codî©e
 = 
CR_LORA_4_5
;

2153 
bóc⁄_pkt
.
övît_pﬁ
 = 
Ál£
;

2154 
bóc⁄_pkt
.
¥ómbÀ
 = 10;

2155 
bóc⁄_pkt
.
no_¸c
 = 
åue
;

2156 
bóc⁄_pkt
.
no_hódî
 = 
åue
;

2159 
i
 = 0; i < ()
bóc⁄_RFU1_size
; i++) {

2160 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

2164 
bóc⁄_pyld_idx
 += 4;

2165 
bóc⁄_pyld_idx
 += 2;

2168 
fõld_œtôude
 = (
öt32_t
)((
ª„ªn˚_co‹d
.
œt
 / 90.0) * ()(1<<23));

2169 i‡(
fõld_œtôude
 > (
öt32_t
)0x007FFFFF) {

2170 
fõld_œtôude
 = (
öt32_t
)0x007FFFFF;

2171 } i‡(
fõld_œtôude
 < (
öt32_t
)0xFF800000) {

2172 
fõld_œtôude
 = (
öt32_t
)0xFF800000;

2174 
fõld_l⁄gôude
 = (
öt32_t
)((
ª„ªn˚_co‹d
.
l⁄
 / 180.0) * ()(1<<23));

2175 i‡(
fõld_l⁄gôude
 > (
öt32_t
)0x007FFFFF) {

2176 
fõld_l⁄gôude
 = (
öt32_t
)0x007FFFFF;

2177 } i‡(
fõld_l⁄gôude
 < (
öt32_t
)0xFF800000) {

2178 
fõld_l⁄gôude
 = (
öt32_t
)0xFF800000;

2182 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 
bóc⁄_öfodesc
;

2183 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_œtôude
;

2184 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 8);

2185 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_œtôude
 >> 16);

2186 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_l⁄gôude
;

2187 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 8);

2188 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_l⁄gôude
 >> 16);

2191 
i
 = 0; i < ()
bóc⁄_RFU2_size
; i++) {

2192 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0x0;

2196 
fõld_¸c2
 = 
	`¸c16
((
bóc⁄_pkt
.
∑ylﬂd
 + 6 + 
bóc⁄_RFU1_size
), 7 + 
bóc⁄_RFU2_size
);

2197 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c2
;

2198 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c2
 >> 8);

2201 
	`jô_queue_öô
(&
jô_queue
);

2203 !
exô_sig
 && !
quô_sig
) {

2206 i‡((
autoquô_thªshﬁd
 > 0Ë&& (
autoquô_˙t
 >=áutoquit_threshold)) {

2207 
exô_sig
 = 
åue
;

2208 
	`MSG
("INFO: [down]Åhêœ° %u PULL_DATA wîênŸ ACKed,Éxôögáµliˇti⁄\n", 
autoquô_thªshﬁd
);

2213 
tokí_h
 = (
uöt8_t
)
	`ønd
();

2214 
tokí_l
 = (
uöt8_t
)
	`ønd
();

2215 
buff_ªq
[1] = 
tokí_h
;

2216 
buff_ªq
[2] = 
tokí_l
;

2219 
	`£nd
(
sock_down
, (*)
buff_ªq
,  buff_req, 0);

2220 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
£nd_time
);

2221 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2222 
mós_dw_puŒ_£¡
 += 1;

2223 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2224 
ªq_ack
 = 
Ál£
;

2225 
autoquô_˙t
++;

2228 
ªcv_time
 = 
£nd_time
;

2229 ()
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
Ë< 
kì∑live_time
) {

2232 
msg_Àn
 = 
	`ªcv
(
sock_down
, (*)
buff_down
, ( buff_down)-1, 0);

2233 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ªcv_time
);

2236 
bóc⁄_lo›
 = 
JIT_NUM_BEACON_IN_QUEUE
 - 
jô_queue
.
num_bóc⁄
;

2237 
ªåy
 = 0;

2238 
bóc⁄_lo›
 && (
bóc⁄_≥riod
 != 0)) {

2239 
	`±hªad_muãx_lock
(&
mx_timîef
);

2241 i‡((
gps_ªf_vÆid
 =
åue
Ë&& (
xèl_c‹ª˘_ok
 ==Årue)) {

2246 i‡(
œ°_bóc⁄_gps_time
.
tv_£c
 == 0) {

2248 
diff_bóc⁄_time
 = 
time_ª„ªn˚_gps
.
gps
.
tv_£c
 % ((
time_t
)
bóc⁄_≥riod
);

2249 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
time_ª„ªn˚_gps
.
gps
.tv_sec +

2250 ((
time_t
)
bóc⁄_≥riod
 - 
diff_bóc⁄_time
);

2253 
√xt_bóc⁄_gps_time
.
tv_£c
 = 
œ°_bóc⁄_gps_time
.tv_£¯+ 
bóc⁄_≥riod
;

2256 
√xt_bóc⁄_gps_time
.
tv_£c
 +(
ªåy
 * 
bóc⁄_≥riod
);

2257 
√xt_bóc⁄_gps_time
.
tv_n£c
 = 0;

2259 #i‡
DEBUG_BEACON


2261 
time_t
 
time_unix
;

2263 
time_unix
 = 
time_ª„ªn˚_gps
.
gps
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2264 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-now : %s", 
	`˘ime
(&
time_unix
));

2265 
time_unix
 = 
œ°_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2266 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-œ°: %s", 
	`˘ime
(&
time_unix
));

2267 
time_unix
 = 
√xt_bóc⁄_gps_time
.
tv_£c
 + 
UNIX_GPS_EPOCH_OFFSET
;

2268 
	`MSG_DEBUG
(
DEBUG_BEACON
, "GPS-√xt: %s", 
	`˘ime
(&
time_unix
));

2273 
	`lgw_gps2˙t
(
time_ª„ªn˚_gps
, 
√xt_bóc⁄_gps_time
, &(
bóc⁄_pkt
.
cou¡_us
));

2274 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2277 i‡(
bóc⁄_‰eq_nb
 > 1) {

2278 
bóc⁄_ch™
 = (
√xt_bóc⁄_gps_time
.
tv_£c
 / 
bóc⁄_≥riod
Ë% 
bóc⁄_‰eq_nb
;

2280 
bóc⁄_ch™
 = 0;

2283 
bóc⁄_pkt
.
‰eq_hz
 = 
bóc⁄_‰eq_hz
 + (
bóc⁄_ch™
 * 
bóc⁄_‰eq_°ï
);

2286 
bóc⁄_pyld_idx
 = 
bóc⁄_RFU1_size
;

2287 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
√xt_bóc⁄_gps_time
.
tv_£c
;

2288 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 8);

2289 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 16);

2290 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
√xt_bóc⁄_gps_time
.
tv_£c
 >> 24);

2293 
fõld_¸c1
 = 
	`¸c16
(
bóc⁄_pkt
.
∑ylﬂd
, 4 + 
bóc⁄_RFU1_size
);

2294 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & 
fõld_¸c1
;

2295 
bóc⁄_pkt
.
∑ylﬂd
[
bóc⁄_pyld_idx
++] = 0xFF & (
fõld_¸c1
 >> 8);

2298 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

2299 
	`gë_c⁄˚¡øt‹_time
(&
cuºít_c⁄˚¡øt‹_time
, 
cuºít_unix_time
);

2300 
jô_ªsu…
 = 
	`jô_íqueue
(&
jô_queue
, &
cuºít_c⁄˚¡øt‹_time
, &
bóc⁄_pkt
, 
JIT_PKT_TYPE_BEACON
);

2301 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2303 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2304 
mós_nb_bóc⁄_queued
 += 1;

2305 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2308 
bóc⁄_lo›
--;

2309 
ªåy
 = 0;

2310 
œ°_bóc⁄_gps_time
.
tv_£c
 = 
√xt_bóc⁄_gps_time
.tv_sec;

2313 
	`MSG
("INFO: Bóc⁄ queued (cou¡_us=%u, fªq_hz=%u, size=%u):\n", 
bóc⁄_pkt
.
cou¡_us
, bóc⁄_pkt.
‰eq_hz
, bóc⁄_pkt.
size
);

2314 
	`¥ötf
( " => " );

2315 
i
 = 0; i < 
bóc⁄_pkt
.
size
; ++i) {

2316 
	`MSG
("%02X ", 
bóc⁄_pkt
.
∑ylﬂd
[
i
]);

2318 
	`MSG
("\n");

2320 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--> bóc⁄ queuög faûed wôh %d\n", 
jô_ªsu…
);

2322 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2323 i‡(
jô_ªsu…
 !
JIT_ERROR_COLLISION_BEACON
) {

2324 
mós_nb_bóc⁄_ªje˘ed
 += 1;

2326 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2330 
ªåy
++;

2331 
	`MSG_DEBUG
(
DEBUG_BEACON
, "--> bóc⁄ queuögÑëry=%d\n", 
ªåy
);

2334 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2340 i‡(
msg_Àn
 == -1) {

2346 i‡((
msg_Àn
 < 4Ë|| (
buff_down
[0] !
PROTOCOL_VERSION
Ë|| ((buff_down[3] !
PKT_PULL_RESP
Ë&& (buff_down[3] !
PKT_PULL_ACK
))) {

2347 
	`MSG
("WARNING: [down] ignoring invalidÖacketÜen=%d,Örotocol_version=%d, id=%d\n",

2348 
msg_Àn
, 
buff_down
[0], buff_down[3]);

2353 i‡(
buff_down
[3] =
PKT_PULL_ACK
) {

2354 i‡((
buff_down
[1] =
tokí_h
Ë&& (buff_down[2] =
tokí_l
)) {

2355 i‡(
ªq_ack
) {

2356 
	`MSG
("INFO: [down] duplicate ACKÑeceived :)\n");

2358 
ªq_ack
 = 
åue
;

2359 
autoquô_˙t
 = 0;

2360 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2361 
mós_dw_ack_rcv
 += 1;

2362 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2363 
	`MSG
("INFO: [down] PULL_ACKÑe˚ived i¿%òms\n", ()(1000 * 
	`dif·ime•ec
(
ªcv_time
, 
£nd_time
)));

2366 
	`MSG
("INFO: [down]Ñeceived out-of-sync ACK\n");

2372 
buff_down
[
msg_Àn
] = 0;

2373 
	`MSG
("INFO: [down] PULL_RESPÑe˚ived -Åokí[%d:%d] :)\n", 
buff_down
[1], buff_down[2]);

2374 
	`Ârötf
(
down_log_fûe
, "\nJSON down: %s\n", (*)(
buff_down
 + 4));

2377 
	`mem£t
(&
txpkt
, 0, Åxpkt);

2378 
roŸ_vÆ
 = 
	`js⁄_∑r£_°rög_wôh_commíts
((c⁄° *)(
buff_down
 + 4));

2379 i‡(
roŸ_vÆ
 =
NULL
) {

2380 
	`MSG
("WARNING: [down] invalid JSON, TXáborted\n");

2385 
txpk_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
), "txpk");

2386 i‡(
txpk_obj
 =
NULL
) {

2387 
	`MSG
("WARNING: [down]Ço \"txpk\" object in JSON, TXáborted\n");

2388 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2393 
i
 = 
	`js⁄_obje˘_gë_boﬁón
(
txpk_obj
,"imme");

2394 i‡(
i
 == 1) {

2396 
£¡_immedüã
 = 
åue
;

2397 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_C
;

2398 
	`MSG
("INFO: [down]áÖacket will be sent in \"immediate\" mode\n");

2400 
£¡_immedüã
 = 
Ál£
;

2401 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"tmst");

2402 i‡(
vÆ
 !
NULL
) {

2404 
txpkt
.
cou¡_us
 = (
uöt32_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2407 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_A
;

2410 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
, "tmms");

2411 i‡(
vÆ
 =
NULL
) {

2412 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.tmst\" or \"txpk.tmms\" objects in JSON, TXáborted\n");

2413 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2416 i‡(
gps_íabÀd
 =
åue
) {

2417 
	`±hªad_muãx_lock
(&
mx_timîef
);

2418 i‡(
gps_ªf_vÆid
 =
åue
) {

2419 
loˇl_ªf
 = 
time_ª„ªn˚_gps
;

2420 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2422 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2423 
	`MSG
("WARNING: [down]Ço valid GPSÅimeÑeference yet, impossibleÅo sendÖacket on specific GPSÅime, TXáborted\n");

2424 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2427 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
);

2431 
	`MSG
("WARNING: [down] GPS disabled, impossibleÅo sendÖacket on specific GPSÅime, TXáborted\n");

2432 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2435 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
JIT_ERROR_GPS_UNLOCKED
);

2440 
x2
 = (
uöt64_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2443 
x3
 = 
	`modf
(()
x2
/1E3, &
x4
);

2444 
gps_tx
.
tv_£c
 = (
time_t
)
x4
;

2445 
gps_tx
.
tv_n£c
 = ()(
x3
 * 1E9);

2448 
i
 = 
	`lgw_gps2˙t
(
loˇl_ªf
, 
gps_tx
, &(
txpkt
.
cou¡_us
));

2449 i‡(
i
 !
LGW_GPS_SUCCESS
) {

2450 
	`MSG
("WARNING: [down] couldÇot convert GPSÅimeÅoÅimestamp, TXáborted\n");

2451 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2454 
	`MSG
("INFO: [down]áÖackë wû»bê£¡ o¿time°am∞vÆuê%u (ˇlcuœãd from GPSÅime)\n", 
txpkt
.
cou¡_us
);

2458 
dow∆ök_ty≥
 = 
JIT_PKT_TYPE_DOWNLINK_CLASS_B
;

2463 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ncrc");

2464 i‡(
vÆ
 !
NULL
) {

2465 
txpkt
.
no_¸c
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

2469 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"freq");

2470 i‡(
vÆ
 =
NULL
) {

2471 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.freq\" object in JSON, TXáborted\n");

2472 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2475 
txpkt
.
‰eq_hz
 = (
uöt32_t
)(()(1.0e6Ë* 
	`js⁄_vÆue_gë_numbî
(
vÆ
));

2478 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"rfch");

2479 i‡(
vÆ
 =
NULL
) {

2480 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.rfch\" object in JSON, TXáborted\n");

2481 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2484 
txpkt
.
rf_chaö
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2487 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"powe");

2488 i‡(
vÆ
 !
NULL
) {

2489 
txpkt
.
rf_powî
 = (
öt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
Ë- 
™ã¬a_gaö
;

2493 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "modu");

2494 i‡(
°r
 =
NULL
) {

2495 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.modu\" object in JSON, TXáborted\n");

2496 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2499 i‡(
	`°rcmp
(
°r
, "LORA") == 0) {

2501 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

2504 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "datr");

2505 i‡(
°r
 =
NULL
) {

2506 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.datr\" object in JSON, TXáborted\n");

2507 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2510 
i
 = 
	`ssˇnf
(
°r
, "SF%2hdBW%3hd", &
x0
, &
x1
);

2511 i‡(
i
 != 2) {

2512 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.datr\", TXáborted\n");

2513 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2516 
x0
) {

2517 7: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF7
; ;

2518 8: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF8
; ;

2519 9: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
; ;

2520 10: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF10
; ;

2521 11: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF11
; ;

2522 12: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF12
; ;

2524 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.datr\", invalid SF, TXáborted\n");

2525 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2528 
x1
) {

2529 125: 
txpkt
.
b™dwidth
 = 
BW_125KHZ
; ;

2530 250: 
txpkt
.
b™dwidth
 = 
BW_250KHZ
; ;

2531 500: 
txpkt
.
b™dwidth
 = 
BW_500KHZ
; ;

2533 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.datr\", invalid BW, TXáborted\n");

2534 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2539 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "codr");

2540 i‡(
°r
 =
NULL
) {

2541 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.codr\" object in json, TXáborted\n");

2542 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2545 i‡(
	`°rcmp
(
°r
, "4/5"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

2546 i‡(
	`°rcmp
(
°r
, "4/6"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

2547 i‡(
	`°rcmp
(
°r
, "2/3"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_6
;

2548 i‡(
	`°rcmp
(
°r
, "4/7"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_7
;

2549 i‡(
	`°rcmp
(
°r
, "4/8"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

2550 i‡(
	`°rcmp
(
°r
, "1/2"Ë=0Ë
txpkt
.
codî©e
 = 
CR_LORA_4_8
;

2552 
	`MSG
("WARNING: [down] formatÉrror in \"txpk.codr\", TXáborted\n");

2553 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2558 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"ipol");

2559 i‡(
vÆ
 !
NULL
) {

2560 
txpkt
.
övît_pﬁ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

2564 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

2565 i‡(
vÆ
 !
NULL
) {

2566 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2567 i‡(
i
 >
MIN_LORA_PREAMB
) {

2568 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

2570 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_LORA_PREAMB
;

2573 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_LORA_PREAMB
;

2576 } i‡(
	`°rcmp
(
°r
, "FSK") == 0) {

2578 
txpkt
.
moduœti⁄
 = 
MOD_FSK
;

2581 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"datr");

2582 i‡(
vÆ
 =
NULL
) {

2583 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.datr\" object in JSON, TXáborted\n");

2584 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2587 
txpkt
.
d©¨©e
 = (
uöt32_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
));

2590 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"fdev");

2591 i‡(
vÆ
 =
NULL
) {

2592 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.fdev\" object in JSON, TXáborted\n");

2593 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2596 
txpkt
.
f_dev
 = (
uöt8_t
)(
	`js⁄_vÆue_gë_numbî
(
vÆ
) / 1000.0);

2599 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"prea");

2600 i‡(
vÆ
 !
NULL
) {

2601 
i
 = ()
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2602 i‡(
i
 >
MIN_FSK_PREAMB
) {

2603 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
i
;

2605 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
MIN_FSK_PREAMB
;

2608 
txpkt
.
¥ómbÀ
 = (
uöt16_t
)
STD_FSK_PREAMB
;

2612 
	`MSG
("WARNING: [down] invalid modulation in \"txpk.modu\", TXáborted\n");

2613 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2618 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
txpk_obj
,"size");

2619 i‡(
vÆ
 =
NULL
) {

2620 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.size\" object in JSON, TXáborted\n");

2621 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2624 
txpkt
.
size
 = (
uöt16_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

2627 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
txpk_obj
, "data");

2628 i‡(
°r
 =
NULL
) {

2629 
	`MSG
("WARNING: [down]Ço mandatory \"txpk.data\" object in JSON, TXáborted\n");

2630 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2633 
i
 = 
	`b64_to_bö
(
°r
, 
	`°æí
(°r), 
txpkt
.
∑ylﬂd
, Åxpkt.payload);

2634 i‡(
i
 !
txpkt
.
size
) {

2635 
	`MSG
("WARNING: [down] mismatch between .sizeánd .data size once converterÅo binary\n");

2639 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

2642 i‡(
£¡_immedüã
) {

2643 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

2645 
txpkt
.
tx_mode
 = 
TIMESTAMPED
;

2649 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2650 
mós_dw_dgøm_rcv
 += 1;

2651 
mós_dw_√tw‹k_byã
 +
msg_Àn
;

2652 
mós_dw_∑ylﬂd_byã
 +
txpkt
.
size
;

2653 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2656 
jô_ªsu…
 = 
JIT_ERROR_OK
;

2657 i‡((
txpkt
.
‰eq_hz
 < 
tx_‰eq_mö
[txpkt.
rf_chaö
]Ë|| (txpkt.‰eq_hz > 
tx_‰eq_max
[txpkt.rf_chain])) {

2658 
jô_ªsu…
 = 
JIT_ERROR_TX_FREQ
;

2659 
	`MSG
("ERROR: Packë REJECTED, unsuµ‹ãd fªquícy - %u (mö:%u,max:%u)\n", 
txpkt
.
‰eq_hz
, 
tx_‰eq_mö
[txpkt.
rf_chaö
], 
tx_‰eq_max
[txpkt.rf_chain]);

2661 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2662 
i
=0; i<
txlut
.
size
; i++) {

2663 i‡(
txlut
.
lut
[
i
].
rf_powî
 =
txpkt
.rf_power) {

2668 i‡(
i
 =
txlut
.
size
) {

2670 
jô_ªsu…
 = 
JIT_ERROR_TX_POWER
;

2671 
	`MSG
("ERROR: Packë REJECTED, unsuµ‹ãd RFÖowî f‹ TX - %d\n", 
txpkt
.
rf_powî
);

2676 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2677 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

2678 
	`gë_c⁄˚¡øt‹_time
(&
cuºít_c⁄˚¡øt‹_time
, 
cuºít_unix_time
);

2679 
jô_ªsu…
 = 
	`jô_íqueue
(&
jô_queue
, &
cuºít_c⁄˚¡øt‹_time
, &
txpkt
, 
dow∆ök_ty≥
);

2680 i‡(
jô_ªsu…
 !
JIT_ERROR_OK
) {

2681 
	`¥ötf
("ERROR: Packë REJECTED (jôÉº‹=%d)\n", 
jô_ªsu…
);

2683 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2684 
mós_nb_tx_ªque°ed
 += 1;

2685 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2689 
	`£nd_tx_ack
(
buff_down
[1], buff_down[2], 
jô_ªsu…
);

2692 
	`MSG
("\nINFO: End of downstreamÅhread\n");

2693 
	}
}

2695 
	$¥öt_tx_°©us
(
uöt8_t
 
tx_°©us
) {

2696 
tx_°©us
) {

2697 
TX_OFF
:

2698 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_OFF\n");

2700 
TX_FREE
:

2701 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_FREE\n");

2703 
TX_EMITTING
:

2704 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_EMITTING\n");

2706 
TX_SCHEDULED
:

2707 
	`MSG
("INFO: [jit]Ügw_statusÑeturned TX_SCHEDULED\n");

2710 
	`MSG
("INFO: [jô]Ügw_°©u†ªtu∫ed UNKNOWN (%d)\n", 
tx_°©us
);

2713 
	}
}

2719 
	$thªad_jô
() {

2720 
ªsu…
 = 
LGW_HAL_SUCCESS
;

2721 
lgw_pkt_tx_s
 
pkt
;

2722 
pkt_ödex
 = -1;

2723 
timevÆ
 
cuºít_unix_time
;

2724 
timevÆ
 
cuºít_c⁄˚¡øt‹_time
;

2725 
jô_îr‹_e
 
jô_ªsu…
;

2726 
jô_pkt_ty≥_e
 
pkt_ty≥
;

2727 
uöt8_t
 
tx_°©us
;

2729 !
exô_sig
 && !
quô_sig
) {

2730 
	`waô_ms
(10);

2733 
	`gëtimeofday
(&
cuºít_unix_time
, 
NULL
);

2734 
	`gë_c⁄˚¡øt‹_time
(&
cuºít_c⁄˚¡øt‹_time
, 
cuºít_unix_time
);

2735 
jô_ªsu…
 = 
	`jô_≥ek
(&
jô_queue
, &
cuºít_c⁄˚¡øt‹_time
, &
pkt_ödex
);

2736 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2737 i‡(
pkt_ödex
 > -1) {

2738 
jô_ªsu…
 = 
	`jô_dequeue
(&
jô_queue
, 
pkt_ödex
, &
pkt
, &
pkt_ty≥
);

2739 i‡(
jô_ªsu…
 =
JIT_ERROR_OK
) {

2741 i‡(
pkt_ty≥
 =
JIT_PKT_TYPE_BEACON
) {

2743 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

2744 
pkt
.
‰eq_hz
 = (
uöt32_t
)(
xèl_c‹ª˘
 * ()pkt.freq_hz);

2745 
	`MSG_DEBUG
(
DEBUG_BEACON
, "bóc⁄_pkt.‰eq_hz=%u (xèl_c‹ª˘=%.15lf)\n", 
pkt
.
‰eq_hz
, 
xèl_c‹ª˘
);

2746 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

2749 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2750 
mós_nb_bóc⁄_£¡
 += 1;

2751 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2752 
	`MSG
("INFO: Bóc⁄ dequeued (cou¡_us=%u)\n", 
pkt
.
cou¡_us
);

2756 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2757 
ªsu…
 = 
	`lgw_°©us
(
TX_STATUS
, &
tx_°©us
);

2758 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2759 i‡(
ªsu…
 =
LGW_HAL_ERROR
) {

2760 
	`MSG
("WARNING: [jit]Ügw_status failed\n");

2762 i‡(
tx_°©us
 =
TX_EMITTING
) {

2763 
	`MSG
("ERROR: concentrator is currentlyÉmitting\n");

2764 
	`¥öt_tx_°©us
(
tx_°©us
);

2766 } i‡(
tx_°©us
 =
TX_SCHEDULED
) {

2767 
	`MSG
("WARNING:á downlink wasálready scheduled, overwritting it...\n");

2768 
	`¥öt_tx_°©us
(
tx_°©us
);

2775 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2776 
ªsu…
 = 
	`lgw_£nd
(
pkt
);

2777 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2778 i‡(
ªsu…
 =
LGW_HAL_ERROR
) {

2779 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2780 
mós_nb_tx_Áû
 += 1;

2781 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2782 
	`MSG
("WARNING: [jit]Ügw_send failed\n");

2785 
	`±hªad_muãx_lock
(&
mx_mós_dw
);

2786 
mós_nb_tx_ok
 += 1;

2787 
	`±hªad_muãx_u∆ock
(&
mx_mós_dw
);

2788 
	`MSG_DEBUG
(
DEBUG_PKT_FWD
, "lgw_£nd d⁄e: cou¡_us=%u\n", 
pkt
.
cou¡_us
);

2791 
	`MSG
("ERROR: jô_dequeuêÁûed wôh %d\n", 
jô_ªsu…
);

2794 } i‡(
jô_ªsu…
 =
JIT_ERROR_EMPTY
) {

2797 
	`MSG
("ERROR: jô_≥ek faûed wôh %d\n", 
jô_ªsu…
);

2800 
	}
}

2805 
	$gps_¥o˚ss_sync
() {

2806 
time•ec
 
gps_time
;

2807 
time•ec
 
utc
;

2808 
uöt32_t
 
åig_t°amp
;

2809 
i
 = 
	`lgw_gps_gë
(&
utc
, &
gps_time
, 
NULL
, NULL);

2812 i‡(
i
 !
LGW_GPS_SUCCESS
) {

2813 
	`MSG
("WARNING: [gps] couldÇot get GPSÅime from GPS\n");

2818 
	`±hªad_muãx_lock
(&
mx_c⁄˚¡
);

2819 
i
 = 
	`lgw_gë_åig˙t
(&
åig_t°amp
);

2820 
	`±hªad_muãx_u∆ock
(&
mx_c⁄˚¡
);

2821 i‡(
i
 !
LGW_HAL_SUCCESS
) {

2822 
	`MSG
("WARNING: [gps] failedÅoÑead concentratorÅimestamp\n");

2827 
	`±hªad_muãx_lock
(&
mx_timîef
);

2828 
i
 = 
	`lgw_gps_sync
(&
time_ª„ªn˚_gps
, 
åig_t°amp
, 
utc
, 
gps_time
);

2829 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2830 i‡(
i
 !
LGW_GPS_SUCCESS
) {

2831 
	`MSG
("WARNING: [gps] GPS out of sync, keepingÖreviousÅimeÑeference\n");

2833 
	}
}

2835 
	$gps_¥o˚ss_co‹ds
() {

2837 
co‹d_s
 
co‹d
;

2838 
co‹d_s
 
gp£º
;

2839 
i
 = 
	`lgw_gps_gë
(
NULL
, NULL, &
co‹d
, &
gp£º
);

2842 
	`±hªad_muãx_lock
(&
mx_mós_gps
);

2843 i‡(
i
 =
LGW_GPS_SUCCESS
) {

2844 
gps_co‹d_vÆid
 = 
åue
;

2845 
mós_gps_co‹d
 = 
co‹d
;

2846 
mós_gps_îr
 = 
gp£º
;

2849 
gps_co‹d_vÆid
 = 
Ál£
;

2851 
	`±hªad_muãx_u∆ock
(&
mx_mós_gps
);

2852 
	}
}

2854 
	$thªad_gps
() {

2856 
£rül_buff
[128];

2857 
size_t
 
wr_idx
 = 0;

2860 
gps_msg
 
œã°_msg
;

2863 
	`mem£t
(
£rül_buff
, 0,  serial_buff);

2865 !
exô_sig
 && !
quô_sig
) {

2866 
size_t
 
rd_idx
 = 0;

2867 
size_t
 
‰ame_íd_idx
 = 0;

2870 
ssize_t
 
nb_ch¨
 = 
	`ªad
(
gps_ây_fd
, 
£rül_buff
 + 
wr_idx
, 
LGW_GPS_MIN_MSG_SIZE
);

2871 i‡(
nb_ch¨
 <= 0) {

2872 
	`MSG
("WARNING: [gps]Ñód(Ëªtu∫ed vÆuê%d\n", 
nb_ch¨
);

2875 
wr_idx
 +(
size_t
)
nb_ch¨
;

2881 
rd_idx
 < 
wr_idx
) {

2882 
size_t
 
‰ame_size
 = 0;

2885 if(
£rül_buff
[
rd_idx
] =()
LGW_GPS_UBX_SYNC_CHAR
) {

2890 
œã°_msg
 = 
	`lgw_∑r£_ubx
(&
£rül_buff
[
rd_idx
], (
wr_idx
 -Ñd_idx), &
‰ame_size
);

2892 i‡(
‰ame_size
 > 0) {

2893 i‡(
œã°_msg
 =
INCOMPLETE
) {

2895 
‰ame_size
 = 0;

2896 } i‡(
œã°_msg
 =
INVALID
) {

2898 
	`MSG
("WARNING: [gps] couldÇot getá valid message from GPS (noÅime)\n");

2899 
‰ame_size
 = 0;

2900 } i‡(
œã°_msg
 =
UBX_NAV_TIMEGPS
) {

2901 
	`gps_¥o˚ss_sync
();

2904 } if(
£rül_buff
[
rd_idx
] =
LGW_GPS_NMEA_SYNC_CHAR
) {

2909 * 
nmó_íd_±r
 = 
	`memchr
(&
£rül_buff
[
rd_idx
],()0x0a, (
wr_idx
 -Ñd_idx));

2911 if(
nmó_íd_±r
) {

2913 
‰ame_size
 = 
nmó_íd_±r
 - &
£rül_buff
[
rd_idx
] + 1;

2914 
œã°_msg
 = 
	`lgw_∑r£_nmó
(&
£rül_buff
[
rd_idx
], 
‰ame_size
);

2916 if(
œã°_msg
 =
INVALID
 ||Ü©e°_msg =
UNKNOWN
) {

2918 
‰ame_size
 = 0;

2919 } i‡(
œã°_msg
 =
NMEA_RMC
) {

2920 
	`gps_¥o˚ss_co‹ds
();

2925 if(
‰ame_size
 > 0) {

2928 
rd_idx
 +
‰ame_size
;

2929 
‰ame_íd_idx
 = 
rd_idx
;

2931 
rd_idx
++;

2935 if(
‰ame_íd_idx
) {

2937 
	`mem˝y
(
£rül_buff
, &£rül_buff[
‰ame_íd_idx
], 
wr_idx
 - frame_end_idx);

2938 
wr_idx
 -
‰ame_íd_idx
;

2942 if(((
£rül_buff
Ë- 
wr_idx
Ë< 
LGW_GPS_MIN_MSG_SIZE
) {

2943 
	`mem˝y
(
£rül_buff
, &£rül_buff[
LGW_GPS_MIN_MSG_SIZE
], 
wr_idx
 - LGW_GPS_MIN_MSG_SIZE);

2944 
wr_idx
 -
LGW_GPS_MIN_MSG_SIZE
;

2947 
	`MSG
("\nINFO: End of GPSÅhread\n");

2948 
	}
}

2953 
	$thªad_vÆid
() {

2956 
gps_ªf_age
 = 0;

2957 
boﬁ
 
ªf_vÆid_loˇl
 = 
Ál£
;

2958 
xèl_îr_˝y
;

2961 
öô_˝t
 = 0;

2962 
öô_acc
 = 0.0;

2963 
x
;

2978 !
exô_sig
 && !
quô_sig
) {

2979 
	`waô_ms
(1000);

2982 
	`±hªad_muãx_lock
(&
mx_timîef
);

2983 
gps_ªf_age
 = ()
	`dif·ime
(
	`time
(
NULL
), 
time_ª„ªn˚_gps
.
sy°ime
);

2984 i‡((
gps_ªf_age
 >0Ë&& (gps_ªf_agê<
GPS_REF_MAX_AGE
)) {

2986 
gps_ªf_vÆid
 = 
åue
;

2987 
ªf_vÆid_loˇl
 = 
åue
;

2988 
xèl_îr_˝y
 = 
time_ª„ªn˚_gps
.
xèl_îr
;

2992 
gps_ªf_vÆid
 = 
Ál£
;

2993 
ªf_vÆid_loˇl
 = 
Ál£
;

2995 
	`±hªad_muãx_u∆ock
(&
mx_timîef
);

2998 i‡(
ªf_vÆid_loˇl
 =
Ál£
) {

3000 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

3001 
xèl_c‹ª˘_ok
 = 
Ál£
;

3002 
xèl_c‹ª˘
 = 1.0;

3003 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

3004 
öô_˝t
 = 0;

3005 
öô_acc
 = 0.0;

3007 i‡(
öô_˝t
 < 
XERR_INIT_AVG
) {

3009 
öô_acc
 +
xèl_îr_˝y
;

3010 ++
öô_˝t
;

3011 } i‡(
öô_˝t
 =
XERR_INIT_AVG
) {

3013 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

3014 
xèl_c‹ª˘
 = ()(
XERR_INIT_AVG
Ë/ 
öô_acc
;

3016 
xèl_c‹ª˘_ok
 = 
åue
;

3017 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

3018 ++
öô_˝t
;

3022 
x
 = 1 / 
xèl_îr_˝y
;

3023 
	`±hªad_muãx_lock
(&
mx_xc‹r
);

3024 
xèl_c‹ª˘
 = xèl_c‹ª˘ - xèl_c‹ª˘/
XERR_FILT_COEF
 + 
x
/XERR_FILT_COEF;

3025 
	`±hªad_muãx_u∆ock
(&
mx_xc‹r
);

3031 
	`MSG
("\nINFO: End of validationÅhread\n");

3032 
	}
}

	@util_ack/src/util_ack.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dio.h
>

29 
	~<uni°d.h
>

31 
	~<°rög.h
>

32 
	~<time.h
>

33 
	~<°dlib.h
>

34 
	~<î∫o.h
>

36 
	~<sys/sockë.h
>

37 
	~<√töë/ö.h
>

38 
	~<¨∑/öë.h
>

39 
	~<√tdb.h
>

44 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 
	#STRINGIFY
(
x
Ë#x

	)

46 
	#STR
(
x
Ë
	`STRINGIFY
(x)

	)

47 
	#MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgsË

	)

52 
	#PROTOCOL_VERSION
 2

	)

54 
	#PKT_PUSH_DATA
 0

	)

55 
	#PKT_PUSH_ACK
 1

	)

56 
	#PKT_PULL_DATA
 2

	)

57 
	#PKT_PULL_RESP
 3

	)

58 
	#PKT_PULL_ACK
 4

	)

63 
	$maö
(
¨gc
, **
¨gv
)

65 
i
;

68 
sock
;

69 
addröfo
 
höts
;

70 
addröfo
 *
ªsu…
;

71 
addröfo
 *
q
;

72 
ho°_«me
[64];

73 
p‹t_«me
[64];

76 
sockaddr_°‹age
 
di°_addr
;

77 
sockÀn_t
 
addr_Àn
 =  
di°_addr
;

78 
uöt8_t
 
d©abuf
[4096];

79 
byã_nb
;

82 
uöt32_t
 
øw_mac_h
;

83 
uöt32_t
 
øw_mac_l
;

84 
uöt64_t
 
gw_mac
;

85 
uöt8_t
 
ack_comm™d
;

88 i‡(
¨gc
 != 2) {

89 
	`MSG
("Usage: util_ack <portÇumber>\n");

90 
	`exô
(
EXIT_FAILURE
);

94 
	`mem£t
(&
höts
, 0,  hints);

95 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

96 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

97 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

100 
i
 = 
	`gëaddröfo
(
NULL
, 
¨gv
[1], &
höts
, &
ªsu…
);

101 i‡(
i
 != 0) {

102 
	`MSG
("ERROR: gëaddröfÿªtu∫ed %s\n", 
	`gai_°ªº‹
(
i
));

103 
	`exô
(
EXIT_FAILURE
);

107 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

108 
sock
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

109 i‡(
sock
 == -1) {

112 
i
 = 
	`böd
(
sock
, 
q
->
ai_addr
, q->
ai_addæí
);

113 i‡(
i
 == -1) {

114 
	`shutdown
(
sock
, 
SHUT_RDWR
);

121 i‡(
q
 =
NULL
) {

122 
	`MSG
("ERROR: failedÅo open socket orÅo bindÅo it\n");

123 
i
 = 1;

124 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

125 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

126 
	`MSG
("INFO:Ñesu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

127 ++
i
;

129 
	`exô
(
EXIT_FAILURE
);

131 
	`MSG
("INFO: utû_ackÜi°íög o¿p‹à%s\n", 
¨gv
[1]);

132 
	`‰ìaddröfo
(
ªsu…
);

136 
byã_nb
 = 
	`ªcv‰om
(
sock
, 
d©abuf
,  d©abuf, 0, (
sockaddr
 *)&
di°_addr
, &
addr_Àn
);

137 i‡(
byã_nb
 == -1) {

138 
	`MSG
("ERROR:Ñecv‰omÑëu∫ed %†\n", 
	`°ªº‹
(
î∫o
));

139 
	`exô
(
EXIT_FAILURE
);

143 
i
 = 
	`gë«meöfo
((
sockaddr
 *)&
di°_addr
, 
addr_Àn
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

144 i‡(
i
 == -1) {

145 
	`MSG
("ERROR: gë«meöfÿªtu∫ed %†\n", 
	`gai_°ªº‹
(
i
));

146 
	`exô
(
EXIT_FAILURE
);

148 
	`¥ötf
(" ->Ökàö , ho° %†’‹à%s), %òbyãs", 
ho°_«me
, 
p‹t_«me
, 
byã_nb
);

151 i‡(
byã_nb
 < 12) {

152 
	`¥ötf
(" (too short for GW <-> MACÖrotocol)\n");

156 i‡(
d©abuf
[0] !
PROTOCOL_VERSION
) {

157 
	`¥ötf
(", invÆid vîsi⁄ %u\n", 
d©abuf
[0]);

160 
øw_mac_h
 = *((
uöt32_t
 *)(
d©abuf
+4));

161 
øw_mac_l
 = *((
uöt32_t
 *)(
d©abuf
+8));

162 
gw_mac
 = ((
uöt64_t
)
	`¡ohl
(
øw_mac_h
Ë<< 32Ë+ (uöt64_tÍtohl(
øw_mac_l
);

165 
d©abuf
[3]) {

166 
PKT_PUSH_DATA
:

167 
	`¥ötf
(", PUSH_DATA from g©eway 0x%08X%08X\n", (
uöt32_t
)(
gw_mac
 >> 32), (uint32_t)(gw_mac & 0xFFFFFFFF));

168 
ack_comm™d
 = 
PKT_PUSH_ACK
;

169 
	`¥ötf
("<-Ökàout, PUSH_ACK f‹ ho° %†’‹à%s)", 
ho°_«me
, 
p‹t_«me
);

171 
PKT_PULL_DATA
:

172 
	`¥ötf
(", PULL_DATA from g©eway 0x%08X%08X\n", (
uöt32_t
)(
gw_mac
 >> 32), (uint32_t)(gw_mac & 0xFFFFFFFF));

173 
ack_comm™d
 = 
PKT_PULL_ACK
;

174 
	`¥ötf
("<-Ökàout, PULL_ACK f‹ ho° %†’‹à%s)", 
ho°_«me
, 
p‹t_«me
);

177 
	`¥ötf
(", u√x≥˘ed comm™d %u\n", 
d©abuf
[3]);

182 
	`u¶ìp
(30000);

185 
d©abuf
[3] = 
ack_comm™d
;

186 
byã_nb
 = 
	`£ndto
(
sock
, (*)
d©abuf
, 4, 0, (
sockaddr
 *)&
di°_addr
, 
addr_Àn
);

187 i‡(
byã_nb
 == -1) {

188 
	`¥ötf
(", sídÉº‹:%s\n", 
	`°ªº‹
(
î∫o
));

190 
	`¥ötf
(", %òbyã†£¡\n", 
byã_nb
);

193 
	}
}

	@util_lbt_test/src/util_lbt_test.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

31 
	~<sig«l.h
>

32 
	~<uni°d.h
>

33 
	~<°dlib.h
>

35 
	~"l‹agw_aux.h
"

36 
	~"l‹agw_ªg.h
"

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_ødio.h
"

39 
	~"l‹agw_Âga.h
"

44 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 
	#MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgsË

	)

47 
	#DEFAULT_SX127X_RSSI_OFFSET
 -1

	)

53 
siga˘i⁄
 
	gsiga˘
;

54 
	gexô_sig
 = 0;

55 
	gquô_sig
 = 0;

60 
sig_h™dÀr
(
sigio
);

62 
ußge
 ();

67 
	$sig_h™dÀr
(
sigio
) {

68 i‡(
sigio
 =
SIGQUIT
) {

69 
quô_sig
 = 1;;

70 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

71 
exô_sig
 = 1;

73 
	}
}

76 
	$ußge
() {

77 
	`¥ötf
("Available options:\n");

78 
	`¥ötf
(" -hÖrintÅhis help\n");

79 
	`¥ötf
(" -f <float> frequency in MHz ofÅhe first LBT channel\n");

80 
	`¥ötf
(" -o <int> offset in dBÅo beáppliedÅoÅhe SX127x RSSI [-128..127]\n");

81 
	`¥ötf
(" -r <int>Åarget RSSI: signal strengthÅarget usedÅo detect ifÅhe channel is clear orÇot [-128..0]\n");

82 
	`¥ötf
(" -s <uint> scanÅime in ¬µs foráll 8 LBT channels [128,5000]\n");

83 
	}
}

88 
	$maö
(
¨gc
, **
¨gv
)

90 
i
;

91 
xi
 = 0;

94 
f1
 = 0.0;

95 
uöt32_t
 
f_öô
 = 0;

96 
uöt32_t
 
f_°¨t
 = 0;

97 
uöt16_t
 
lo›_˙t
 = 0;

98 
öt8_t
 
rssi_èrgë_dBm
 = -80;

99 
uöt16_t
 
sˇn_time_us
 = 128;

100 
uöt32_t
 
time°amp
;

101 
uöt8_t
 
rssi_vÆue
;

102 
öt8_t
 
rssi_off£t
 = 
DEFAULT_SX127X_RSSI_OFFSET
;

103 
öt32_t
 
vÆ
, 
vÆ2
;

104 
ch™√l
;

105 
uöt32_t
 
‰eq_off£t
;

108 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "h:f:s:r:o:")) != -1) {

109 
i
) {

111 
	`ußge
();

112  
EXIT_FAILURE
;

116 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
f1
);

117 i‡((
i
 !1Ë|| (
f1
 < 30.0) || (f1 > 3000.0)) {

118 
	`MSG
("ERROR: Invalid LBT start frequency\n");

119 
	`ußge
();

120  
EXIT_FAILURE
;

122 
f_°¨t
 = (
uöt32_t
)((
f1
*1e6) + 0.5);

126 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

127 i‡((
i
 !1Ë|| ((
xi
 != 128) && (xi != 5000))) {

128 
	`MSG
("ERROR: scan_time_us must be 128 or 5000 \n");

129 
	`ußge
();

130  
EXIT_FAILURE
;

132 
sˇn_time_us
 = 
xi
;

136 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

137 i‡((
i
 !1Ë|| ((
xi
 < -128) && (xi > 0))) {

138 
	`MSG
("ERROR:Ñssi_target must be b/w -128 & 0 \n");

139 
	`ußge
();

140  
EXIT_FAILURE
;

142 
rssi_èrgë_dBm
 = 
xi
;

146 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

147 if((
i
 !1Ë|| (
xi
 < -128) || (xi > 127)) {

148 
	`MSG
("ERROR:Ñssi_offset must be b/w -128 & 127\n");

149 
	`ußge
();

150  
EXIT_FAILURE
;

152 
rssi_off£t
 = (
öt8_t
)
xi
;

156 
	`MSG
("ERROR:árgumentÖarsing use -h option for help\n");

157 
	`ußge
();

158  
EXIT_FAILURE
;

162 
	`MSG
("INFO: Starting LoRa Gateway v1.5 LBTÅest\n");

165 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

166 
siga˘
.
ß_Êags
 = 0;

167 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

168 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

169 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

170 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

173 
i
 = 
	`lgw_c⁄√˘
(
Ál£
, 
LGW_DEFAULT_NOTCH_FREQ
);

174 i‡(
i
 !
LGW_REG_SUCCESS
) {

175 
	`MSG
("ERROR:Ügw_connect() didÇotÑeturn SUCCESS\n");

176  
EXIT_FAILURE
;

180 
	`lgw_Âga_ªg_r
(
LGW_FPGA_FEATURE
, &
vÆ
);

181 i‡(
	`TAKE_N_BITS_FROM
((
uöt8_t
)
vÆ
, 2, 1Ë!
åue
) {

182 
	`MSG
("ERROR: LBT i†nŸ suµ‹ãd (0x%x)\n", (
uöt8_t
)
vÆ
);

183  
EXIT_FAILURE
;

187 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_INITIAL_FREQ
, &
vÆ
);

188 
vÆ
) {

190 
f_öô
 = 915000000;

193 
f_öô
 = 863000000;

196 
	`MSG
("ERROR: LBT sèπ fªquícy %d i†nŸ suµ‹ãd\n", 
vÆ
);

197  
EXIT_FAILURE
;

201 i‡(
f_°¨t
 == 0) {

202 
f_°¨t
 = 
f_öô
;

203 } i‡(
f_°¨t
 < 
f_öô
) {

204 
	`MSG
("ERROR: LBT sèπ fªquícy %u i†nŸ suµ‹ãd (f_öô=%u)\n", 
f_°¨t
, 
f_öô
);

205  
EXIT_FAILURE
;

207 
	`MSG
("FREQ: %u\n", 
f_°¨t
);

210 
	`lgw_£tup_sx127x
(
f_öô
, 
MOD_FSK
, 
LGW_SX127X_RXBW_100K_HZ
, 
rssi_off£t
);

211 
i
 = 0; i < 100; i++) {

212 
	`lgw_sx127x_ªg_r
(0x11, &
rssi_vÆue
);

213 
	`MSG
("SX127x RSSI:%òdBm\n", -(
rssi_vÆue
/2));

214 
	`waô_ms
(10);

218 
vÆ
 = -2*(
rssi_èrgë_dBm
);

219 
	`lgw_Âga_ªg_w
(
LGW_FPGA_RSSI_TARGET
, 
vÆ
);

220 
i
 = 0; i < 
LBT_CHANNEL_FREQ_NB
; i++) {

221 
‰eq_off£t
 = (
f_°¨t
 - 
f_öô
)/100E3 + 
i
*2;

222 
	`lgw_Âga_ªg_w
(
LGW_FPGA_LBT_CH0_FREQ_OFFSET
+
i
, (
öt32_t
)
‰eq_off£t
);

223 i‡(
sˇn_time_us
 == 5000) {

224 
	`lgw_Âga_ªg_w
(
LGW_FPGA_LBT_SCAN_TIME_CH0
+
i
, 1);

228 
	`lgw_Âga_ªg_r
(
LGW_FPGA_RSSI_TARGET
, &
vÆ
);

229 
	`MSG
("RSSI_TARGET = %d\n", 
vÆ
);

230 i‡(
vÆ
 !(-2*
rssi_èrgë_dBm
)) {

231 
	`MSG
("ERROR: failedÅoÑead back RSSIÅargetÑegister value\n");

232  
EXIT_FAILURE
;

234 
i
 = 0; i < 
LBT_CHANNEL_FREQ_NB
; i++) {

235 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_CH0_FREQ_OFFSET
+
i
, &
vÆ
);

236 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_SCAN_TIME_CH0
+
i
, &
vÆ2
);

237 
	`MSG
("CH_%i: fªq=%u (off£t=%i), sˇn_time=%u (%i)\n", 
i
, (
uöt32_t
)((
vÆ
*100E3)+
f_öô
), vÆ, (
vÆ2
==1)?5000:128, val2);

239 
	`lgw_Âga_ªg_r
(
LGW_FPGA_VERSION
, &
vÆ
);

240 
	`MSG
("FPGA VERSION = %d\n", 
vÆ
);

243 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_FEATURE_START
, 1);

246 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

247 
	`MSG
("~~~~\n");

248 
ch™√l
 = 0; ch™√»< 
LBT_CHANNEL_FREQ_NB
; channel++) {

250 
	`lgw_Âga_ªg_w
(
LGW_FPGA_LBT_TIMESTAMP_SELECT_CH
, 
ch™√l
);

253 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_TIMESTAMP_CH
, &
vÆ
);

254 
time°amp
 = (
uöt32_t
)(
vÆ
 & 0x0000FFFF) * 256;

255 
	`MSG
(" TIMESTAMP_CH%u = %u\n", 
ch™√l
, 
time°amp
);

258 
lo›_˙t
 += 1;

259 
	`waô_ms
(400);

263 
i
 = 
	`lgw_disc⁄√˘
();

264 i‡(
i
 !
LGW_REG_SUCCESS
) {

265 
	`MSG
("ERROR:Ügw_disconnect() didÇotÑeturn SUCCESS\n");

266  
EXIT_FAILURE
;

269 
	`MSG
("INFO: Exiting LoRa Gateway v1.5 LBTÅest successfully\n");

270  
EXIT_SUCCESS
;

271 
	}
}

	@util_pkt_logger/inc/parson.h

24 #i‚de‡
∑rs⁄_∑rs⁄_h


25 
	#∑rs⁄_∑rs⁄_h


	)

27 #ifde‡
__˝lu•lus


32 
	~<°ddef.h
>

35 
js⁄_obje˘_t
 
	tJSON_Obje˘
;

36 
js⁄_¨øy_t
 
	tJSON_Aºay
;

37 
js⁄_vÆue_t
 
	tJSON_VÆue
;

39 
	ejs⁄_vÆue_ty≥
 {

40 
JSONEº‹
 = -1,

41 
JSONNuŒ
 = 1,

42 
JSONSåög
 = 2,

43 
JSONNumbî
 = 3,

44 
JSONObje˘
 = 4,

45 
JSONAºay
 = 5,

46 
JSONBoﬁón
 = 6

48 
	tJSON_VÆue_Ty≥
;

50 
	ejs⁄_ªsu…_t
 {

51 
JSONSuc˚ss
 = 0,

52 
JSONFaûuª
 = -1

54 
	tJSON_Sètus
;

56 * (*
	tJSON_MÆloc_Fun˘i⁄
)(
	tsize_t
);

57 (*
JSON_Fªe_Fun˘i⁄
)(*);

61 
js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
);

64 
JSON_VÆue
 * 
js⁄_∑r£_fûe
(c⁄° *
fûíame
);

68 
JSON_VÆue
 * 
js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
);

71 
JSON_VÆue
 * 
js⁄_∑r£_°rög
(c⁄° *
°rög
);

75 
JSON_VÆue
 * 
js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
);

78 
size_t
 
js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
);

79 
JSON_Sètus
 
js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

80 
JSON_Sètus
 
js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

81 * 
js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
);

84 
size_t
 
js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

85 
JSON_Sètus
 
js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
);

86 
JSON_Sètus
 
js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
);

87 * 
js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
);

89 
js⁄_‰ì_£rülized_°rög
(*
°rög
);

92 
js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
);

104 
JSON_Sètus
 
js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
);

109 
JSON_VÆue
 * 
js⁄_obje˘_gë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

110 c⁄° * 
js⁄_obje˘_gë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

111 
JSON_Obje˘
 * 
js⁄_obje˘_gë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

112 
JSON_Aºay
 * 
js⁄_obje˘_gë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

113 
js⁄_obje˘_gë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

114 
js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

120 
JSON_VÆue
 * 
js⁄_obje˘_dŸgë_vÆue
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

121 c⁄° * 
js⁄_obje˘_dŸgë_°rög
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

122 
JSON_Obje˘
 * 
js⁄_obje˘_dŸgë_obje˘
 (c⁄° JSON_Obje˘ *
obje˘
, c⁄° *
«me
);

123 
JSON_Aºay
 * 
js⁄_obje˘_dŸgë_¨øy
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

124 
js⁄_obje˘_dŸgë_numbî
 (c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

125 
js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

128 
size_t
 
js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
);

129 c⁄° * 
js⁄_obje˘_gë_«me
 (c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
);

133 
JSON_Sètus
 
js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

134 
JSON_Sètus
 
js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

135 
JSON_Sètus
 
js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

136 
JSON_Sètus
 
js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

137 
JSON_Sètus
 
js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

141 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

142 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
);

143 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
);

144 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
);

145 
JSON_Sètus
 
js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

148 
JSON_Sètus
 
js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
);

151 
JSON_Sètus
 
js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
key
);

154 
JSON_Sètus
 
js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
);

159 
JSON_VÆue
 * 
js⁄_¨øy_gë_vÆue
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

160 c⁄° * 
js⁄_¨øy_gë_°rög
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

161 
JSON_Obje˘
 * 
js⁄_¨øy_gë_obje˘
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

162 
JSON_Aºay
 * 
js⁄_¨øy_gë_¨øy
 (c⁄° JSON_Aºay *
¨øy
, 
size_t
 
ödex
);

163 
js⁄_¨øy_gë_numbî
 (c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

164 
js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
);

165 
size_t
 
js⁄_¨øy_gë_cou¡
 (c⁄° 
JSON_Aºay
 *
¨øy
);

169 
JSON_Sètus
 
js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

174 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
JSON_VÆue
 *
vÆue
);

175 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
);

176 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
);

177 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
);

178 
JSON_Sètus
 
js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
);

181 
JSON_Sètus
 
js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
);

185 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

186 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
);

187 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
);

188 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
);

189 
JSON_Sètus
 
js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
);

194 
JSON_VÆue
 * 
js⁄_vÆue_öô_obje˘
 ();

195 
JSON_VÆue
 * 
js⁄_vÆue_öô_¨øy
 ();

196 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög
 (c⁄° *
°rög
);

197 
JSON_VÆue
 * 
js⁄_vÆue_öô_numbî
 (
numbî
);

198 
JSON_VÆue
 * 
js⁄_vÆue_öô_boﬁón
(
boﬁón
);

199 
JSON_VÆue
 * 
js⁄_vÆue_öô_nuŒ
 ();

200 
JSON_VÆue
 * 
js⁄_vÆue_dìp_c›y
 (c⁄° JSON_VÆuê*
vÆue
);

201 
js⁄_vÆue_‰ì
 (
JSON_VÆue
 *
vÆue
);

203 
JSON_VÆue_Ty≥
 
js⁄_vÆue_gë_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

204 
JSON_Obje˘
 * 
js⁄_vÆue_gë_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

205 
JSON_Aºay
 * 
js⁄_vÆue_gë_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

206 c⁄° * 
js⁄_vÆue_gë_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

207 
js⁄_vÆue_gë_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

208 
js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

211 
JSON_VÆue_Ty≥
 
js⁄_ty≥
 (c⁄° 
JSON_VÆue
 *
vÆue
);

212 
JSON_Obje˘
 * 
js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
);

213 
JSON_Aºay
 * 
js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
);

214 c⁄° * 
js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
);

215 
js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
);

216 
js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
);

218 #ifde‡
__˝lu•lus


	@util_pkt_logger/src/parson.c

23 #ifde‡
_MSC_VER


24 
	#_CRT_SECURE_NO_WARNINGS


	)

27 
	~"∑rs⁄.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<˘y≥.h
>

33 
	~<m©h.h
>

35 
	#STARTING_CAPACITY
 15

	)

36 
	#ARRAY_MAX_CAPACITY
 122880

	)

37 
	#OBJECT_MAX_CAPACITY
 960

	)

38 
	#MAX_NESTING
 19

	)

39 
	#DOUBLE_SERIALIZATION_FORMAT
 "%f"

	)

41 
	#SIZEOF_TOKEN
(
a
Ë(◊Ë- 1)

	)

42 
	#SKIP_CHAR
(
°r
Ë((*°r)++)

	)

43 
	#SKIP_WHITESPACES
(
°r
Ë
	`is•a˚
(**°r)Ë{ 
	`SKIP_CHAR
(°r); }

	)

44 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

46 #unde‡
mÆloc


47 #unde‡
‰ì


49 
JSON_MÆloc_Fun˘i⁄
 
	g∑rs⁄_mÆloc
 = 
mÆloc
;

50 
JSON_Fªe_Fun˘i⁄
 
	g∑rs⁄_‰ì
 = 
‰ì
;

52 
	#IS_CONT
(
b
Ë((()(bË& 0xC0Ë=0x80Ë

	)

55 
	ujs⁄_vÆue_vÆue
 {

56 *
	m°rög
;

57 
	mnumbî
;

58 
JSON_Obje˘
 *
	mobje˘
;

59 
JSON_Aºay
 *
	m¨øy
;

60 
	mboﬁón
;

61 
	mnuŒ
;

62 } 
	tJSON_VÆue_VÆue
;

64 
	sjs⁄_vÆue_t
 {

65 
JSON_VÆue_Ty≥
 
	mty≥
;

66 
JSON_VÆue_VÆue
 
	mvÆue
;

69 
	sjs⁄_obje˘_t
 {

70 **
	m«mes
;

71 
JSON_VÆue
 **
	mvÆues
;

72 
size_t
 
	mcou¡
;

73 
size_t
 
	mˇ∑côy
;

76 
	sjs⁄_¨øy_t
 {

77 
JSON_VÆue
 **
	môems
;

78 
size_t
 
	mcou¡
;

79 
size_t
 
	mˇ∑côy
;

83 * 
ªad_fûe
(c⁄° *
fûíame
);

84 
ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
);

85 * 
∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
);

86 * 
∑rs⁄_°rdup
(c⁄° *
°rög
);

87 
is_utf16_hex
(c⁄° *
°rög
);

88 
num_byãs_ö_utf8_£quí˚
(
c
);

89 
vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
);

90 
is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
);

91 
is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
);

94 
JSON_Obje˘
 * 
js⁄_obje˘_öô
();

95 
JSON_Sètus
 
js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
);

96 
JSON_Sètus
 
js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
);

97 
JSON_VÆue
 * 
js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
);

98 
js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
);

101 
JSON_Aºay
 * 
js⁄_¨øy_öô
();

102 
JSON_Sètus
 
js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
);

103 
JSON_Sètus
 
js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
);

104 
js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
);

107 
JSON_VÆue
 * 
js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
);

110 
skù_quŸes
(c⁄° **
°rög
);

111 
∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
);

112 * 
¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
);

113 * 
gë_quŸed_°rög
(c⁄° **
°rög
);

114 
JSON_VÆue
 * 
∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

115 
JSON_VÆue
 * 
∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

116 
JSON_VÆue
 * 
∑r£_°rög_vÆue
(c⁄° **
°rög
);

117 
JSON_VÆue
 * 
∑r£_boﬁón_vÆue
(c⁄° **
°rög
);

118 
JSON_VÆue
 * 
∑r£_numbî_vÆue
(c⁄° **
°rög
);

119 
JSON_VÆue
 * 
∑r£_nuŒ_vÆue
(c⁄° **
°rög
);

120 
JSON_VÆue
 * 
∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
);

123 
js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
);

124 
js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
);

125 
≠≥nd_ödít
(*
buf
, 
Àvñ
);

126 
≠≥nd_°rög
(*
buf
, c⁄° *
°rög
);

129 * 
	$∑rs⁄_°∫dup
(c⁄° *
°rög
, 
size_t
 
n
) {

130 *
ouçut_°rög
 = (*)
	`∑rs⁄_mÆloc
(
n
 + 1);

131 i‡(!
ouçut_°rög
)

132  
NULL
;

133 
ouçut_°rög
[
n
] = '\0';

134 
	`°∫˝y
(
ouçut_°rög
, 
°rög
, 
n
);

135  
ouçut_°rög
;

136 
	}
}

138 * 
	$∑rs⁄_°rdup
(c⁄° *
°rög
) {

139  
	`∑rs⁄_°∫dup
(
°rög
, 
	`°æí
(string));

140 
	}
}

142 
	$is_utf16_hex
(c⁄° *
s
) {

143  
	`isxdigô
(
s
[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);

144 
	}
}

146 
	$num_byãs_ö_utf8_£quí˚
(
c
) {

147 i‡(
c
 =0xC0 || c =0xC1 || c > 0xF4 || 
	`IS_CONT
(c)) {

149 } i‡((
c
 & 0x80) == 0) {

151 } i‡((
c
 & 0xE0) == 0xC0) {

153 } i‡((
c
 & 0xF0) == 0xE0) {

155 } i‡((
c
 & 0xF8) == 0xF0) {

159 
	}
}

161 
	$vîify_utf8_£quí˚
(c⁄° *
°rög
, *
Àn
) {

162 
˝
 = 0;

163 *
Àn
 = 
	`num_byãs_ö_utf8_£quí˚
(
°rög
[0]);

165 i‡(*
Àn
 == 1) {

166 
˝
 = 
°rög
[0];

167 } i‡(*
Àn
 =2 && 
	`IS_CONT
(
°rög
[1])) {

168 
˝
 = 
°rög
[0] & 0x1F;

169 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

170 } i‡(*
Àn
 =3 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2])) {

171 
˝
 = (()
°rög
[0]) & 0xF;

172 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

173 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

174 } i‡(*
Àn
 =4 && 
	`IS_CONT
(
°rög
[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {

175 
˝
 = 
°rög
[0] & 0x7;

176 
˝
 = (˝ << 6Ë| (
°rög
[1] & 0x3F);

177 
˝
 = (˝ << 6Ë| (
°rög
[2] & 0x3F);

178 
˝
 = (˝ << 6Ë| (
°rög
[3] & 0x3F);

184 i‡((
˝
 < 0x80 && *
Àn
 > 1) ||

185 (
˝
 < 0x800 && *
Àn
 > 2) ||

186 (
˝
 < 0x10000 && *
Àn
 > 3)) {

191 i‡(
˝
 > 0x10FFFF) {

196 i‡(
˝
 >= 0xD800 && cp <= 0xDFFF) {

201 
	}
}

203 
	$is_vÆid_utf8
(c⁄° *
°rög
, 
size_t
 
°rög_Àn
) {

204 
Àn
 = 0;

205 c⁄° *
°rög_íd
 = 
°rög
 + 
°rög_Àn
;

206 
°rög
 < 
°rög_íd
) {

207 i‡(!
	`vîify_utf8_£quí˚
((c⁄° *)
°rög
, &
Àn
)) {

210 
°rög
 +
Àn
;

213 
	}
}

215 
	$is_decimÆ
(c⁄° *
°rög
, 
size_t
 
Àngth
) {

216 i‡(
Àngth
 > 1 && 
°rög
[0] == '0' && string[1] != '.')

218 i‡(
Àngth
 > 2 && !
	`°∫cmp
(
°rög
, "-0", 2) && string[2] != '.')

220 
Àngth
--)

221 i‡(
	`°rchr
("xX", 
°rög
[
Àngth
]))

224 
	}
}

226 * 
	$ªad_fûe
(c⁄° * 
fûíame
) {

227 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

228 
size_t
 
fûe_size
;

229 
pos
;

230 *
fûe_c⁄ã¡s
;

231 i‡(!
Â
)

232  
NULL
;

233 
	`f£ek
(
Â
, 0L, 
SEEK_END
);

234 
pos
 = 
	`·ñl
(
Â
);

235 i‡(
pos
 < 0) {

236 
	`f˛o£
(
Â
);

237  
NULL
;

239 
fûe_size
 = 
pos
;

240 
	`ªwöd
(
Â
);

241 
fûe_c⁄ã¡s
 = (*)
	`∑rs⁄_mÆloc
((Ë* (
fûe_size
 + 1));

242 i‡(!
fûe_c⁄ã¡s
) {

243 
	`f˛o£
(
Â
);

244  
NULL
;

246 i‡(
	`‰ód
(
fûe_c⁄ã¡s
, 
fûe_size
, 1, 
Â
) < 1) {

247 i‡(
	`„º‹
(
Â
)) {

248 
	`f˛o£
(
Â
);

249 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

250  
NULL
;

253 
	`f˛o£
(
Â
);

254 
fûe_c⁄ã¡s
[
fûe_size
] = '\0';

255  
fûe_c⁄ã¡s
;

256 
	}
}

258 
	$ªmove_commíts
(*
°rög
, c⁄° *
°¨t_tokí
, c⁄° *
íd_tokí
) {

259 
ö_°rög
 = 0, 
esˇ≥d
 = 0;

260 
size_t
 
i
;

261 *
±r
 = 
NULL
, 
cuºít_ch¨
;

262 
size_t
 
°¨t_tokí_Àn
 = 
	`°æí
(
°¨t_tokí
);

263 
size_t
 
íd_tokí_Àn
 = 
	`°æí
(
íd_tokí
);

264 i‡(
°¨t_tokí_Àn
 =0 || 
íd_tokí_Àn
 == 0)

266 (
cuºít_ch¨
 = *
°rög
) != '\0') {

267 i‡(
cuºít_ch¨
 ='\\' && !
esˇ≥d
) {

268 
esˇ≥d
 = 1;

269 
°rög
++;

271 } i‡(
cuºít_ch¨
 ='\"' && !
esˇ≥d
) {

272 
ö_°rög
 = !in_string;

273 } i‡(!
ö_°rög
 && 
	`°∫cmp
(
°rög
, 
°¨t_tokí
, 
°¨t_tokí_Àn
) == 0) {

274 
i
 = 0; i < 
°¨t_tokí_Àn
; i++)

275 
°rög
[
i
] = ' ';

276 
°rög
 = såög + 
°¨t_tokí_Àn
;

277 
±r
 = 
	`°r°r
(
°rög
, 
íd_tokí
);

278 i‡(!
±r
)

280 
i
 = 0; i < (
±r
 - 
°rög
Ë+ 
íd_tokí_Àn
; i++)

281 
°rög
[
i
] = ' ';

282 
°rög
 = 
±r
 + 
íd_tokí_Àn
 - 1;

284 
esˇ≥d
 = 0;

285 
°rög
++;

287 
	}
}

290 
JSON_Obje˘
 * 
	$js⁄_obje˘_öô
() {

291 
JSON_Obje˘
 *
√w_obj
 = (JSON_Obje˘*)
	`∑rs⁄_mÆloc
((JSON_Object));

292 i‡(!
√w_obj
)

293  
NULL
;

294 
√w_obj
->
«mes
 = (**)
NULL
;

295 
√w_obj
->
vÆues
 = (
JSON_VÆue
**)
NULL
;

296 
√w_obj
->
ˇ∑côy
 = 0;

297 
√w_obj
->
cou¡
 = 0;

298  
√w_obj
;

299 
	}
}

301 
JSON_Sètus
 
	$js⁄_obje˘_add
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

302 
size_t
 
ödex
 = 0;

303 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL) {

304  
JSONFaûuª
;

306 i‡(
obje˘
->
cou¡
 >obje˘->
ˇ∑côy
) {

307 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
obje˘
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

308 i‡(
√w_ˇ∑côy
 > 
OBJECT_MAX_CAPACITY
)

309  
JSONFaûuª
;

310 i‡(
	`js⁄_obje˘_ªsize
(
obje˘
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

311  
JSONFaûuª
;

313 i‡(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
Ë!
NULL
)

314  
JSONFaûuª
;

315 
ödex
 = 
obje˘
->
cou¡
;

316 
obje˘
->
«mes
[
ödex
] = 
	`∑rs⁄_°rdup
(
«me
);

317 i‡(
obje˘
->
«mes
[
ödex
] =
NULL
)

318  
JSONFaûuª
;

319 
obje˘
->
vÆues
[
ödex
] = 
vÆue
;

320 
obje˘
->
cou¡
++;

321  
JSONSuc˚ss
;

322 
	}
}

324 
JSON_Sètus
 
	$js⁄_obje˘_ªsize
(
JSON_Obje˘
 *
obje˘
, 
size_t
 
√w_ˇ∑côy
) {

325 **
ãmp_«mes
 = 
NULL
;

326 
JSON_VÆue
 **
ãmp_vÆues
 = 
NULL
;

328 i‡((
obje˘
->
«mes
 =
NULL
 && obje˘->
vÆues
 != NULL) ||

329 (
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 == NULL) ||

330 
√w_ˇ∑côy
 == 0) {

331  
JSONFaûuª
;

334 
ãmp_«mes
 = (**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (*));

335 i‡(
ãmp_«mes
 =
NULL
)

336  
JSONFaûuª
;

338 
ãmp_vÆues
 = (
JSON_VÆue
**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

339 i‡(
ãmp_vÆues
 =
NULL
) {

340 
	`∑rs⁄_‰ì
(
ãmp_«mes
);

341  
JSONFaûuª
;

344 i‡(
obje˘
->
«mes
 !
NULL
 && obje˘->
vÆues
 !NULL && obje˘->
cou¡
 > 0) {

345 
	`mem˝y
(
ãmp_«mes
, 
obje˘
->
«mes
, obje˘->
cou¡
 * (*));

346 
	`mem˝y
(
ãmp_vÆues
, 
obje˘
->
vÆues
, obje˘->
cou¡
 * (
JSON_VÆue
*));

348 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
);

349 
	`∑rs⁄_‰ì
(
obje˘
->
vÆues
);

350 
obje˘
->
«mes
 = 
ãmp_«mes
;

351 
obje˘
->
vÆues
 = 
ãmp_vÆues
;

352 
obje˘
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

353  
JSONSuc˚ss
;

354 
	}
}

356 
JSON_VÆue
 * 
	$js⁄_obje˘_ngë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
size_t
 
n
) {

357 
size_t
 
i
, 
«me_Àngth
;

358 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

359 
«me_Àngth
 = 
	`°æí
(
obje˘
->
«mes
[
i
]);

360 i‡(
«me_Àngth
 !
n
)

362 i‡(
	`°∫cmp
(
obje˘
->
«mes
[
i
], 
«me
, 
n
) == 0)

363  
obje˘
->
vÆues
[
i
];

365  
NULL
;

366 
	}
}

368 
	$js⁄_obje˘_‰ì
(
JSON_Obje˘
 *
obje˘
) {

369 
obje˘
->
cou¡
--) {

370 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[obje˘->
cou¡
]);

371 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[obje˘->
cou¡
]);

373 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
);

374 
	`∑rs⁄_‰ì
(
obje˘
->
vÆues
);

375 
	`∑rs⁄_‰ì
(
obje˘
);

376 
	}
}

379 
JSON_Aºay
 * 
	$js⁄_¨øy_öô
() {

380 
JSON_Aºay
 *
√w_¨øy
 = (JSON_Aºay*)
	`∑rs⁄_mÆloc
((JSON_Array));

381 i‡(!
√w_¨øy
)

382  
NULL
;

383 
√w_¨øy
->
ôems
 = (
JSON_VÆue
**)
NULL
;

384 
√w_¨øy
->
ˇ∑côy
 = 0;

385 
√w_¨øy
->
cou¡
 = 0;

386  
√w_¨øy
;

387 
	}
}

389 
JSON_Sètus
 
	$js⁄_¨øy_add
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

390 i‡(
¨øy
->
cou¡
 >¨øy->
ˇ∑côy
) {

391 
size_t
 
√w_ˇ∑côy
 = 
	`MAX
(
¨øy
->
ˇ∑côy
 * 2, 
STARTING_CAPACITY
);

392 i‡(
√w_ˇ∑côy
 > 
ARRAY_MAX_CAPACITY
)

393  
JSONFaûuª
;

394 i‡(
	`js⁄_¨øy_ªsize
(
¨øy
, 
√w_ˇ∑côy
Ë=
JSONFaûuª
)

395  
JSONFaûuª
;

397 
¨øy
->
ôems
[¨øy->
cou¡
] = 
vÆue
;

398 
¨øy
->
cou¡
++;

399  
JSONSuc˚ss
;

400 
	}
}

402 
JSON_Sètus
 
	$js⁄_¨øy_ªsize
(
JSON_Aºay
 *
¨øy
, 
size_t
 
√w_ˇ∑côy
) {

403 
JSON_VÆue
 **
√w_ôems
 = 
NULL
;

404 i‡(
√w_ˇ∑côy
 == 0) {

405  
JSONFaûuª
;

407 
√w_ôems
 = (
JSON_VÆue
**)
	`∑rs⁄_mÆloc
(
√w_ˇ∑côy
 * (JSON_Value*));

408 i‡(
√w_ôems
 =
NULL
) {

409  
JSONFaûuª
;

411 i‡(
¨øy
->
ôems
 !
NULL
 &&áºay->
cou¡
 > 0) {

412 
	`mem˝y
(
√w_ôems
, 
¨øy
->
ôems
,áºay->
cou¡
 * (
JSON_VÆue
*));

414 
	`∑rs⁄_‰ì
(
¨øy
->
ôems
);

415 
¨øy
->
ôems
 = 
√w_ôems
;

416 
¨øy
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

417  
JSONSuc˚ss
;

418 
	}
}

420 
	$js⁄_¨øy_‰ì
(
JSON_Aºay
 *
¨øy
) {

421 
¨øy
->
cou¡
--)

422 
	`js⁄_vÆue_‰ì
(
¨øy
->
ôems
[¨øy->
cou¡
]);

423 
	`∑rs⁄_‰ì
(
¨øy
->
ôems
);

424 
	`∑rs⁄_‰ì
(
¨øy
);

425 
	}
}

428 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög_no_c›y
(*
°rög
) {

429 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

430 i‡(!
√w_vÆue
)

431  
NULL
;

432 
√w_vÆue
->
ty≥
 = 
JSONSåög
;

433 
√w_vÆue
->
vÆue
.
°rög
 = string;

434  
√w_vÆue
;

435 
	}
}

438 
	$skù_quŸes
(c⁄° **
°rög
) {

439 
	`SKIP_CHAR
(
°rög
);

440 **
°rög
 != '\"') {

441 i‡(**
°rög
 == '\0')

443 i‡(**
°rög
 == '\\') {

444 
	`SKIP_CHAR
(
°rög
);

445 i‡(**
°rög
 == '\0')

448 
	`SKIP_CHAR
(
°rög
);

450 
	`SKIP_CHAR
(
°rög
);

451 
	}
}

453 
	$∑r£_utf_16
(c⁄° **
u≈ro˚s£d
, **
¥o˚s£d
) {

454 
˝
, 
Àad
, 
åaû
;

455 *
¥o˚s£d_±r
 = *
¥o˚s£d
;

456 c⁄° *
u≈ro˚s£d_±r
 = *
u≈ro˚s£d
;

457 
u≈ro˚s£d_±r
++;

458 i‡(!
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
Ë|| 
	`ssˇnf
(u≈ro˚s£d_±r, "%4x", &
˝
Ë=
EOF
)

459  
JSONFaûuª
;

460 i‡(
˝
 < 0x80) {

461 *
¥o˚s£d_±r
 = 
˝
;

462 } i‡(
˝
 < 0x800) {

463 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x1F) | 0xC0;

464 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

465 } i‡(
˝
 < 0xD800 || cp > 0xDFFF) {

466 *
¥o˚s£d_±r
++ = ((
˝
 >> 12) & 0x0F) | 0xE0;

467 *
¥o˚s£d_±r
++ = ((
˝
 >> 6) & 0x3F) | 0x80;

468 *
¥o˚s£d_±r
 = ((
˝
 ) & 0x3F) | 0x80;

469 } i‡(
˝
 >= 0xD800 && cp <= 0xDBFF) {

470 
Àad
 = 
˝
;

471 
u≈ro˚s£d_±r
 += 4;

472 i‡(*
u≈ro˚s£d_±r
++ != '\\' || *unprocessed_ptr++ != 'u' ||

473 !
	`is_utf16_hex
((c⁄° *)
u≈ro˚s£d_±r
) ||

474 
	`ssˇnf
(
u≈ro˚s£d_±r
, "%4x", &
åaû
Ë=
EOF
 ||

475 
åaû
 < 0xDC00 ||Årail > 0xDFFF) {

476  
JSONFaûuª
;

478 
˝
 = ((((
Àad
-0xD800)&0x3FF)<<10)|((
åaû
-0xDC00)&0x3FF))+0x010000;

479 *
¥o˚s£d_±r
++ = (((
˝
 >> 18) & 0x07) | 0xF0);

480 *
¥o˚s£d_±r
++ = (((
˝
 >> 12) & 0x3F) | 0x80);

481 *
¥o˚s£d_±r
++ = (((
˝
 >> 6) & 0x3F) | 0x80);

482 *
¥o˚s£d_±r
 = (((
˝
 ) & 0x3F) | 0x80);

484  
JSONFaûuª
;

486 
u≈ro˚s£d_±r
 += 3;

487 *
¥o˚s£d
 = 
¥o˚s£d_±r
;

488 *
u≈ro˚s£d
 = 
u≈ro˚s£d_±r
;

489  
JSONSuc˚ss
;

490 
	}
}

495 * 
	$¥o˚ss_°rög
(c⁄° *
öput
, 
size_t
 
Àn
) {

496 c⁄° *
öput_±r
 = 
öput
;

497 
size_t
 
öôül_size
 = (
Àn
 + 1) * ();

498 
size_t
 
föÆ_size
 = 0;

499 *
ouçut
 = (*)
	`∑rs⁄_mÆloc
(
öôül_size
);

500 *
ouçut_±r
 = 
ouçut
;

501 *
ªsized_ouçut
 = 
NULL
;

502 (*
öput_±r
 !'\0'Ë&& (
size_t
)(öput_±∏- 
öput
Ë< 
Àn
) {

503 i‡(*
öput_±r
 == '\\') {

504 
öput_±r
++;

505 *
öput_±r
) {

506 '\"': *
ouçut_±r
 = '\"'; ;

507 '\\': *
ouçut_±r
 = '\\'; ;

508 '/': *
ouçut_±r
 = '/'; ;

509 'b': *
ouçut_±r
 = '\b'; ;

510 'f': *
ouçut_±r
 = '\f'; ;

511 'n': *
ouçut_±r
 = '\n'; ;

512 'r': *
ouçut_±r
 = '\r'; ;

513 't': *
ouçut_±r
 = '\t'; ;

515 i‡(
	`∑r£_utf_16
(&
öput_±r
, &
ouçut_±r
Ë=
JSONFaûuª
)

516 
îr‹
;

519 
îr‹
;

521 } i‡(()*
öput_±r
 < 0x20) {

522 
îr‹
;

524 *
ouçut_±r
 = *
öput_±r
;

526 
ouçut_±r
++;

527 
öput_±r
++;

529 *
ouçut_±r
 = '\0';

531 
föÆ_size
 = (
size_t
)(
ouçut_±r
-
ouçut
) + 1;

532 
ªsized_ouçut
 = (*)
	`∑rs⁄_mÆloc
(
föÆ_size
);

533 i‡(
ªsized_ouçut
 =
NULL
)

534 
îr‹
;

535 
	`mem˝y
(
ªsized_ouçut
, 
ouçut
, 
föÆ_size
);

536 
	`∑rs⁄_‰ì
(
ouçut
);

537  
ªsized_ouçut
;

538 
îr‹
:

539 
	`∑rs⁄_‰ì
(
ouçut
);

540  
NULL
;

541 
	}
}

545 * 
	$gë_quŸed_°rög
(c⁄° **
°rög
) {

546 c⁄° *
°rög_°¨t
 = *
°rög
;

547 
size_t
 
°rög_Àn
 = 0;

548 
	`skù_quŸes
(
°rög
);

549 i‡(**
°rög
 == '\0')

550  
NULL
;

551 
°rög_Àn
 = *
°rög
 - 
°rög_°¨t
 - 2;

552  
	`¥o˚ss_°rög
(
°rög_°¨t
 + 1, 
°rög_Àn
);

553 
	}
}

555 
JSON_VÆue
 * 
	$∑r£_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

556 i‡(
√°ög
 > 
MAX_NESTING
)

557  
NULL
;

558 
	`SKIP_WHITESPACES
(
°rög
);

559 **
°rög
) {

561  
	`∑r£_obje˘_vÆue
(
°rög
, 
√°ög
 + 1);

563  
	`∑r£_¨øy_vÆue
(
°rög
, 
√°ög
 + 1);

565  
	`∑r£_°rög_vÆue
(
°rög
);

567  
	`∑r£_boﬁón_vÆue
(
°rög
);

571  
	`∑r£_numbî_vÆue
(
°rög
);

573  
	`∑r£_nuŒ_vÆue
(
°rög
);

575  
NULL
;

577 
	}
}

579 
JSON_VÆue
 * 
	$∑r£_obje˘_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

580 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
(), *
√w_vÆue
 = 
NULL
;

581 
JSON_Obje˘
 *
ouçut_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
ouçut_vÆue
);

582 *
√w_key
 = 
NULL
;

583 i‡(
ouçut_vÆue
 =
NULL
)

584  
NULL
;

585 
	`SKIP_CHAR
(
°rög
);

586 
	`SKIP_WHITESPACES
(
°rög
);

587 i‡(**
°rög
 == '}') {

588 
	`SKIP_CHAR
(
°rög
);

589  
ouçut_vÆue
;

591 **
°rög
 != '\0') {

592 
√w_key
 = 
	`gë_quŸed_°rög
(
°rög
);

593 
	`SKIP_WHITESPACES
(
°rög
);

594 i‡(
√w_key
 =
NULL
 || **
°rög
 != ':') {

595 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

596  
NULL
;

598 
	`SKIP_CHAR
(
°rög
);

599 
√w_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

600 i‡(
√w_vÆue
 =
NULL
) {

601 
	`∑rs⁄_‰ì
(
√w_key
);

602 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

603  
NULL
;

605 if(
	`js⁄_obje˘_add
(
ouçut_obje˘
, 
√w_key
, 
√w_vÆue
Ë=
JSONFaûuª
) {

606 
	`∑rs⁄_‰ì
(
√w_key
);

607 
	`∑rs⁄_‰ì
(
√w_vÆue
);

608 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

609  
NULL
;

611 
	`∑rs⁄_‰ì
(
√w_key
);

612 
	`SKIP_WHITESPACES
(
°rög
);

613 i‡(**
°rög
 != ',')

615 
	`SKIP_CHAR
(
°rög
);

616 
	`SKIP_WHITESPACES
(
°rög
);

618 
	`SKIP_WHITESPACES
(
°rög
);

619 i‡(**
°rög
 != '}' ||

620 
	`js⁄_obje˘_ªsize
(
ouçut_obje˘
, 
	`js⁄_obje˘_gë_cou¡
(ouçut_obje˘)Ë=
JSONFaûuª
) {

621 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

622  
NULL
;

624 
	`SKIP_CHAR
(
°rög
);

625  
ouçut_vÆue
;

626 
	}
}

628 
JSON_VÆue
 * 
	$∑r£_¨øy_vÆue
(c⁄° **
°rög
, 
size_t
 
√°ög
) {

629 
JSON_VÆue
 *
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
(), *
√w_¨øy_vÆue
 = 
NULL
;

630 
JSON_Aºay
 *
ouçut_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
ouçut_vÆue
);

631 i‡(!
ouçut_vÆue
)

632  
NULL
;

633 
	`SKIP_CHAR
(
°rög
);

634 
	`SKIP_WHITESPACES
(
°rög
);

635 i‡(**
°rög
 == ']') {

636 
	`SKIP_CHAR
(
°rög
);

637  
ouçut_vÆue
;

639 **
°rög
 != '\0') {

640 
√w_¨øy_vÆue
 = 
	`∑r£_vÆue
(
°rög
, 
√°ög
);

641 i‡(!
√w_¨øy_vÆue
) {

642 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

643  
NULL
;

645 if(
	`js⁄_¨øy_add
(
ouçut_¨øy
, 
√w_¨øy_vÆue
Ë=
JSONFaûuª
) {

646 
	`∑rs⁄_‰ì
(
√w_¨øy_vÆue
);

647 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

648  
NULL
;

650 
	`SKIP_WHITESPACES
(
°rög
);

651 i‡(**
°rög
 != ',')

653 
	`SKIP_CHAR
(
°rög
);

654 
	`SKIP_WHITESPACES
(
°rög
);

656 
	`SKIP_WHITESPACES
(
°rög
);

657 i‡(**
°rög
 != ']' ||

658 
	`js⁄_¨øy_ªsize
(
ouçut_¨øy
, 
	`js⁄_¨øy_gë_cou¡
(ouçut_¨øy)Ë=
JSONFaûuª
) {

659 
	`js⁄_vÆue_‰ì
(
ouçut_vÆue
);

660  
NULL
;

662 
	`SKIP_CHAR
(
°rög
);

663  
ouçut_vÆue
;

664 
	}
}

666 
JSON_VÆue
 * 
	$∑r£_°rög_vÆue
(c⁄° **
°rög
) {

667 
JSON_VÆue
 *
vÆue
 = 
NULL
;

668 *
√w_°rög
 = 
	`gë_quŸed_°rög
(
°rög
);

669 i‡(
√w_°rög
 =
NULL
)

670  
NULL
;

671 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
√w_°rög
);

672 i‡(
vÆue
 =
NULL
) {

673 
	`∑rs⁄_‰ì
(
√w_°rög
);

674  
NULL
;

676  
vÆue
;

677 
	}
}

679 
JSON_VÆue
 * 
	$∑r£_boﬁón_vÆue
(c⁄° **
°rög
) {

680 
size_t
 
åue_tokí_size
 = 
	`SIZEOF_TOKEN
("true");

681 
size_t
 
Ál£_tokí_size
 = 
	`SIZEOF_TOKEN
("false");

682 i‡(
	`°∫cmp
("åue", *
°rög
, 
åue_tokí_size
) == 0) {

683 *
°rög
 +
åue_tokí_size
;

684  
	`js⁄_vÆue_öô_boﬁón
(1);

685 } i‡(
	`°∫cmp
("Ál£", *
°rög
, 
Ál£_tokí_size
) == 0) {

686 *
°rög
 +
Ál£_tokí_size
;

687  
	`js⁄_vÆue_öô_boﬁón
(0);

689  
NULL
;

690 
	}
}

692 
JSON_VÆue
 * 
	$∑r£_numbî_vÆue
(c⁄° **
°rög
) {

693 *
íd
;

694 
numbî
 = 
	`°πod
(*
°rög
, &
íd
);

695 
JSON_VÆue
 *
ouçut_vÆue
;

696 i‡(
	`is_decimÆ
(*
°rög
, 
íd
 - *string)) {

697 *
°rög
 = 
íd
;

698 
ouçut_vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

700 
ouçut_vÆue
 = 
NULL
;

702  
ouçut_vÆue
;

703 
	}
}

705 
JSON_VÆue
 * 
	$∑r£_nuŒ_vÆue
(c⁄° **
°rög
) {

706 
size_t
 
tokí_size
 = 
	`SIZEOF_TOKEN
("null");

707 i‡(
	`°∫cmp
("nuŒ", *
°rög
, 
tokí_size
) == 0) {

708 *
°rög
 +
tokí_size
;

709  
	`js⁄_vÆue_öô_nuŒ
();

711  
NULL
;

712 
	}
}

715 
	#APPEND_STRING
(
°r
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_°rög
(
buf
, (str)); \

716 i‡(
wrôãn
 < 0) {  -1; } \

717 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

718 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

720 
	#APPEND_INDENT
(
Àvñ
Ëdÿ{ 
wrôãn
 = 
	`≠≥nd_ödít
(
buf
, (level)); \

721 i‡(
wrôãn
 < 0) {  -1; } \

722 i‡(
buf
 !
NULL
Ë{ bu‡+
wrôãn
; } \

723 
wrôãn_tŸÆ
 +
wrôãn
; } 0)

	)

725 
	$js⁄_£rülize_to_buf„r_r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
Àvñ
, 
is_¥ëty
, *
num_buf
)

727 c⁄° *
key
 = 
NULL
, *
°rög
 = NULL;

728 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

729 
JSON_Aºay
 *
¨øy
 = 
NULL
;

730 
JSON_Obje˘
 *
obje˘
 = 
NULL
;

731 
size_t
 
i
 = 0, 
cou¡
 = 0;

732 
num
 = 0.0;

733 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

735 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

736 
JSONAºay
:

737 
¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

738 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
);

739 
	`APPEND_STRING
("[");

740 i‡(
cou¡
 > 0 && 
is_¥ëty
)

741 
	`APPEND_STRING
("\n");

742 
i
 = 0; i < 
cou¡
; i++) {

743 i‡(
is_¥ëty
)

744 
	`APPEND_INDENT
(
Àvñ
+1);

745 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
);

746 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

747 i‡(
wrôãn
 < 0)

749 i‡(
buf
 !
NULL
)

750 
buf
 +
wrôãn
;

751 
wrôãn_tŸÆ
 +
wrôãn
;

752 i‡(
i
 < (
cou¡
 - 1))

753 
	`APPEND_STRING
(",");

754 i‡(
is_¥ëty
)

755 
	`APPEND_STRING
("\n");

757 i‡(
cou¡
 > 0 && 
is_¥ëty
)

758 
	`APPEND_INDENT
(
Àvñ
);

759 
	`APPEND_STRING
("]");

760  
wrôãn_tŸÆ
;

761 
JSONObje˘
:

762 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

763 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
);

764 
	`APPEND_STRING
("{");

765 i‡(
cou¡
 > 0 && 
is_¥ëty
)

766 
	`APPEND_STRING
("\n");

767 
i
 = 0; i < 
cou¡
; i++) {

768 
key
 = 
	`js⁄_obje˘_gë_«me
(
obje˘
, 
i
);

769 i‡(
is_¥ëty
)

770 
	`APPEND_INDENT
(
Àvñ
+1);

771 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
key
, 
buf
);

772 i‡(
wrôãn
 < 0)

774 i‡(
buf
 !
NULL
)

775 
buf
 +
wrôãn
;

776 
wrôãn_tŸÆ
 +
wrôãn
;

777 
	`APPEND_STRING
(":");

778 i‡(
is_¥ëty
)

779 
	`APPEND_STRING
(" ");

780 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
key
);

781 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
ãmp_vÆue
, 
buf
, 
Àvñ
+1, 
is_¥ëty
, 
num_buf
);

782 i‡(
wrôãn
 < 0)

784 i‡(
buf
 !
NULL
)

785 
buf
 +
wrôãn
;

786 
wrôãn_tŸÆ
 +
wrôãn
;

787 i‡(
i
 < (
cou¡
 - 1))

788 
	`APPEND_STRING
(",");

789 i‡(
is_¥ëty
)

790 
	`APPEND_STRING
("\n");

792 i‡(
cou¡
 > 0 && 
is_¥ëty
)

793 
	`APPEND_INDENT
(
Àvñ
);

794 
	`APPEND_STRING
("}");

795  
wrôãn_tŸÆ
;

796 
JSONSåög
:

797 
°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

798 
wrôãn
 = 
	`js⁄_£rülize_°rög
(
°rög
, 
buf
);

799 i‡(
wrôãn
 < 0)

801 i‡(
buf
 !
NULL
)

802 
buf
 +
wrôãn
;

803 
wrôãn_tŸÆ
 +
wrôãn
;

804  
wrôãn_tŸÆ
;

805 
JSONBoﬁón
:

806 i‡(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
))

807 
	`APPEND_STRING
("true");

809 
	`APPEND_STRING
("false");

810  
wrôãn_tŸÆ
;

811 
JSONNumbî
:

812 
num
 = 
	`js⁄_vÆue_gë_numbî
(
vÆue
);

813 i‡(
buf
 !
NULL
)

814 
num_buf
 = 
buf
;

815 i‡(
num
 == (()()num))

816 
wrôãn
 = 
	`•rötf
(
num_buf
, "%d", ()
num
);

818 
wrôãn
 = 
	`•rötf
(
num_buf
, 
DOUBLE_SERIALIZATION_FORMAT
, 
num
);

819 i‡(
wrôãn
 < 0)

821 i‡(
buf
 !
NULL
)

822 
buf
 +
wrôãn
;

823 
wrôãn_tŸÆ
 +
wrôãn
;

824  
wrôãn_tŸÆ
;

825 
JSONNuŒ
:

826 
	`APPEND_STRING
("null");

827  
wrôãn_tŸÆ
;

828 
JSONEº‹
:

833 
	}
}

835 
	$js⁄_£rülize_°rög
(c⁄° *
°rög
, *
buf
) {

836 
size_t
 
i
 = 0, 
Àn
 = 
	`°æí
(
°rög
);

837 
c
 = '\0';

838 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

839 
	`APPEND_STRING
("\"");

840 
i
 = 0; i < 
Àn
; i++) {

841 
c
 = 
°rög
[
i
];

842 
c
) {

843 '\"': 
	`APPEND_STRING
("\\\""); ;

844 '\\': 
	`APPEND_STRING
("\\\\"); ;

845 '/': 
	`APPEND_STRING
("\\/"); ;

846 '\b': 
	`APPEND_STRING
("\\b"); ;

847 '\f': 
	`APPEND_STRING
("\\f"); ;

848 '\n': 
	`APPEND_STRING
("\\n"); ;

849 '\r': 
	`APPEND_STRING
("\\r"); ;

850 '\t': 
	`APPEND_STRING
("\\t"); ;

852 i‡(
buf
 !
NULL
) {

853 
buf
[0] = 
c
;

854 
buf
 += 1;

856 
wrôãn_tŸÆ
 += 1;

860 
	`APPEND_STRING
("\"");

861  
wrôãn_tŸÆ
;

862 
	}
}

864 
	$≠≥nd_ödít
(*
buf
, 
Àvñ
) {

865 
i
;

866 
wrôãn
 = -1, 
wrôãn_tŸÆ
 = 0;

867 
i
 = 0; i < 
Àvñ
; i++) {

868 
	`APPEND_STRING
(" ");

870  
wrôãn_tŸÆ
;

871 
	}
}

873 
	$≠≥nd_°rög
(*
buf
, c⁄° *
°rög
) {

874 i‡(
buf
 =
NULL
) {

875  ()
	`°æí
(
°rög
);

877  
	`•rötf
(
buf
, "%s", 
°rög
);

878 
	}
}

880 #unde‡
APPEND_STRING


881 #unde‡
APPEND_INDENT


884 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe
(c⁄° *
fûíame
) {

885 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

886 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

887 i‡(
fûe_c⁄ã¡s
 =
NULL
)

888  
NULL
;

889 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög
(
fûe_c⁄ã¡s
);

890 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

891  
ouçut_vÆue
;

892 
	}
}

894 
JSON_VÆue
 * 
	$js⁄_∑r£_fûe_wôh_commíts
(c⁄° *
fûíame
) {

895 *
fûe_c⁄ã¡s
 = 
	`ªad_fûe
(
fûíame
);

896 
JSON_VÆue
 *
ouçut_vÆue
 = 
NULL
;

897 i‡(
fûe_c⁄ã¡s
 =
NULL
)

898  
NULL
;

899 
ouçut_vÆue
 = 
	`js⁄_∑r£_°rög_wôh_commíts
(
fûe_c⁄ã¡s
);

900 
	`∑rs⁄_‰ì
(
fûe_c⁄ã¡s
);

901  
ouçut_vÆue
;

902 
	}
}

904 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög
(c⁄° *
°rög
) {

905 i‡(
°rög
 =
NULL
)

906  
NULL
;

907 
	`SKIP_WHITESPACES
(&
°rög
);

908 i‡(*
°rög
 != '{' && *string != '[')

909  
NULL
;

910  
	`∑r£_vÆue
((c⁄° **)&
°rög
, 0);

911 
	}
}

913 
JSON_VÆue
 * 
	$js⁄_∑r£_°rög_wôh_commíts
(c⁄° *
°rög
) {

914 
JSON_VÆue
 *
ªsu…
 = 
NULL
;

915 *
°rög_muèbÀ_c›y
 = 
NULL
, *
°rög_muèbÀ_c›y_±r
 = NULL;

916 
°rög_muèbÀ_c›y
 = 
	`∑rs⁄_°rdup
(
°rög
);

917 i‡(
°rög_muèbÀ_c›y
 =
NULL
)

918  
NULL
;

919 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "/*", "*/");

920 
	`ªmove_commíts
(
°rög_muèbÀ_c›y
, "//", "\n");

921 
°rög_muèbÀ_c›y_±r
 = 
°rög_muèbÀ_c›y
;

922 
	`SKIP_WHITESPACES
(&
°rög_muèbÀ_c›y_±r
);

923 i‡(*
°rög_muèbÀ_c›y_±r
 != '{' && *string_mutable_copy_ptr != '[') {

924 
	`∑rs⁄_‰ì
(
°rög_muèbÀ_c›y
);

925  
NULL
;

927 
ªsu…
 = 
	`∑r£_vÆue
((c⁄° **)&
°rög_muèbÀ_c›y_±r
, 0);

928 
	`∑rs⁄_‰ì
(
°rög_muèbÀ_c›y
);

929  
ªsu…
;

930 
	}
}

935 
JSON_VÆue
 * 
	$js⁄_obje˘_gë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

936 i‡(
obje˘
 =
NULL
 || 
«me
 == NULL)

937  
NULL
;

938  
	`js⁄_obje˘_ngë_vÆue
(
obje˘
, 
«me
, 
	`°æí
(name));

939 
	}
}

941 c⁄° * 
	$js⁄_obje˘_gë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

942  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

943 
	}
}

945 
	$js⁄_obje˘_gë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

946  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

947 
	}
}

949 
JSON_Obje˘
 * 
	$js⁄_obje˘_gë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

950  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

951 
	}
}

953 
JSON_Aºay
 * 
	$js⁄_obje˘_gë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

954  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

955 
	}
}

957 
	$js⁄_obje˘_gë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

958  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
));

959 
	}
}

961 
JSON_VÆue
 * 
	$js⁄_obje˘_dŸgë_vÆue
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

962 c⁄° *
dŸ_posôi⁄
 = 
	`°rchr
(
«me
, '.');

963 i‡(!
dŸ_posôi⁄
)

964  
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

965 
obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_ngë_vÆue
(obje˘, 
«me
, 
dŸ_posôi⁄
 -Çame));

966  
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
dŸ_posôi⁄
 + 1);

967 
	}
}

969 c⁄° * 
	$js⁄_obje˘_dŸgë_°rög
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

970  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

971 
	}
}

973 
	$js⁄_obje˘_dŸgë_numbî
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

974  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

975 
	}
}

977 
JSON_Obje˘
 * 
	$js⁄_obje˘_dŸgë_obje˘
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

978  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

979 
	}
}

981 
JSON_Aºay
 * 
	$js⁄_obje˘_dŸgë_¨øy
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

982  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

983 
	}
}

985 
	$js⁄_obje˘_dŸgë_boﬁón
(c⁄° 
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

986  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_obje˘_dŸgë_vÆue
(
obje˘
, 
«me
));

987 
	}
}

989 
size_t
 
	$js⁄_obje˘_gë_cou¡
(c⁄° 
JSON_Obje˘
 *
obje˘
) {

990  
obje˘
 ? obje˘->
cou¡
 : 0;

991 
	}
}

993 c⁄° * 
	$js⁄_obje˘_gë_«me
(c⁄° 
JSON_Obje˘
 *
obje˘
, 
size_t
 
ödex
) {

994 i‡(
ödex
 >
	`js⁄_obje˘_gë_cou¡
(
obje˘
))

995  
NULL
;

996  
obje˘
->
«mes
[
ödex
];

997 
	}
}

1000 
JSON_VÆue
 * 
	$js⁄_¨øy_gë_vÆue
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1001 i‡(
ödex
 >
	`js⁄_¨øy_gë_cou¡
(
¨øy
))

1002  
NULL
;

1003  
¨øy
->
ôems
[
ödex
];

1004 
	}
}

1006 c⁄° * 
	$js⁄_¨øy_gë_°rög
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1007  
	`js⁄_vÆue_gë_°rög
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1008 
	}
}

1010 
	$js⁄_¨øy_gë_numbî
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1011  
	`js⁄_vÆue_gë_numbî
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1012 
	}
}

1014 
JSON_Obje˘
 * 
	$js⁄_¨øy_gë_obje˘
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1015  
	`js⁄_vÆue_gë_obje˘
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1016 
	}
}

1018 
JSON_Aºay
 * 
	$js⁄_¨øy_gë_¨øy
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1019  
	`js⁄_vÆue_gë_¨øy
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1020 
	}
}

1022 
	$js⁄_¨øy_gë_boﬁón
(c⁄° 
JSON_Aºay
 *
¨øy
, 
size_t
 
ödex
) {

1023  
	`js⁄_vÆue_gë_boﬁón
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ödex
));

1024 
	}
}

1026 
size_t
 
	$js⁄_¨øy_gë_cou¡
(c⁄° 
JSON_Aºay
 *
¨øy
) {

1027  
¨øy
 ?áºay->
cou¡
 : 0;

1028 
	}
}

1031 
JSON_VÆue_Ty≥
 
	$js⁄_vÆue_gë_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1032  
vÆue
 ? vÆue->
ty≥
 : 
JSONEº‹
;

1033 
	}
}

1035 
JSON_Obje˘
 * 
	$js⁄_vÆue_gë_obje˘
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1036  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONObje˘
 ? vÆue->vÆue.
obje˘
 : 
NULL
;

1037 
	}
}

1039 
JSON_Aºay
 * 
	$js⁄_vÆue_gë_¨øy
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1040  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONAºay
 ? vÆue->vÆue.
¨øy
 : 
NULL
;

1041 
	}
}

1043 c⁄° * 
	$js⁄_vÆue_gë_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1044  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONSåög
 ? vÆue->vÆue.
°rög
 : 
NULL
;

1045 
	}
}

1047 
	$js⁄_vÆue_gë_numbî
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1048  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONNumbî
 ? vÆue->vÆue.
numbî
 : 0;

1049 
	}
}

1051 
	$js⁄_vÆue_gë_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1052  
	`js⁄_vÆue_gë_ty≥
(
vÆue
Ë=
JSONBoﬁón
 ? vÆue->vÆue.
boﬁón
 : -1;

1053 
	}
}

1055 
	$js⁄_vÆue_‰ì
(
JSON_VÆue
 *
vÆue
) {

1056 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1057 
JSONObje˘
:

1058 
	`js⁄_obje˘_‰ì
(
vÆue
->vÆue.
obje˘
);

1060 
JSONSåög
:

1061 i‡(
vÆue
->vÆue.
°rög
Ë{ 
	`∑rs⁄_‰ì
(value->value.string); }

1063 
JSONAºay
:

1064 
	`js⁄_¨øy_‰ì
(
vÆue
->vÆue.
¨øy
);

1069 
	`∑rs⁄_‰ì
(
vÆue
);

1070 
	}
}

1072 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_obje˘
() {

1073 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1074 i‡(!
√w_vÆue
)

1075  
NULL
;

1076 
√w_vÆue
->
ty≥
 = 
JSONObje˘
;

1077 
√w_vÆue
->
vÆue
.
obje˘
 = 
	`js⁄_obje˘_öô
();

1078 i‡(!
√w_vÆue
->
vÆue
.
obje˘
) {

1079 
	`∑rs⁄_‰ì
(
√w_vÆue
);

1080  
NULL
;

1082  
√w_vÆue
;

1083 
	}
}

1085 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_¨øy
() {

1086 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1087 i‡(!
√w_vÆue
)

1088  
NULL
;

1089 
√w_vÆue
->
ty≥
 = 
JSONAºay
;

1090 
√w_vÆue
->
vÆue
.
¨øy
 = 
	`js⁄_¨øy_öô
();

1091 i‡(!
√w_vÆue
->
vÆue
.
¨øy
) {

1092 
	`∑rs⁄_‰ì
(
√w_vÆue
);

1093  
NULL
;

1095  
√w_vÆue
;

1096 
	}
}

1098 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_°rög
(c⁄° *
°rög
) {

1099 *
c›y
 = 
NULL
;

1100 
JSON_VÆue
 *
vÆue
;

1101 
size_t
 
°rög_Àn
 = 0;

1102 i‡(
°rög
 =
NULL
)

1103  
NULL
;

1104 
°rög_Àn
 = 
	`°æí
(
°rög
);

1105 i‡(!
	`is_vÆid_utf8
(
°rög
, 
°rög_Àn
))

1106  
NULL
;

1107 
c›y
 = 
	`∑rs⁄_°∫dup
(
°rög
, 
°rög_Àn
);

1108 i‡(
c›y
 =
NULL
)

1109  
NULL
;

1110 
vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
c›y
);

1111 i‡(
vÆue
 =
NULL
)

1112 
	`∑rs⁄_‰ì
(
c›y
);

1113  
vÆue
;

1114 
	}
}

1116 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_numbî
(
numbî
) {

1117 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1118 i‡(!
√w_vÆue
)

1119  
NULL
;

1120 
√w_vÆue
->
ty≥
 = 
JSONNumbî
;

1121 
√w_vÆue
->
vÆue
.
numbî
 =Çumber;

1122  
√w_vÆue
;

1123 
	}
}

1125 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_boﬁón
(
boﬁón
) {

1126 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1127 i‡(!
√w_vÆue
)

1128  
NULL
;

1129 
√w_vÆue
->
ty≥
 = 
JSONBoﬁón
;

1130 
√w_vÆue
->
vÆue
.
boﬁón
 = boolean ? 1 : 0;

1131  
√w_vÆue
;

1132 
	}
}

1134 
JSON_VÆue
 * 
	$js⁄_vÆue_öô_nuŒ
() {

1135 
JSON_VÆue
 *
√w_vÆue
 = (JSON_VÆue*)
	`∑rs⁄_mÆloc
((JSON_Value));

1136 i‡(!
√w_vÆue
)

1137  
NULL
;

1138 
√w_vÆue
->
ty≥
 = 
JSONNuŒ
;

1139  
√w_vÆue
;

1140 
	}
}

1142 
JSON_VÆue
 * 
	$js⁄_vÆue_dìp_c›y
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1143 
size_t
 
i
 = 0;

1144 
JSON_VÆue
 *
ªtu∫_vÆue
 = 
NULL
, *
ãmp_vÆue_c›y
 = NULL, *
ãmp_vÆue
 = NULL;

1145 c⁄° *
ãmp_°rög
 = 
NULL
, *
ãmp_key
 = NULL;

1146 *
ãmp_°rög_c›y
 = 
NULL
;

1147 
JSON_Aºay
 *
ãmp_¨øy
 = 
NULL
, *
ãmp_¨øy_c›y
 = NULL;

1148 
JSON_Obje˘
 *
ãmp_obje˘
 = 
NULL
, *
ãmp_obje˘_c›y
 = NULL;

1150 
	`js⁄_vÆue_gë_ty≥
(
vÆue
)) {

1151 
JSONAºay
:

1152 
ãmp_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1153 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_¨øy
();

1154 i‡(
ªtu∫_vÆue
 =
NULL
)

1155  
NULL
;

1156 
ãmp_¨øy_c›y
 = 
	`js⁄_vÆue_gë_¨øy
(
ªtu∫_vÆue
);

1157 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
ãmp_¨øy
); i++) {

1158 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
ãmp_¨øy
, 
i
);

1159 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1160 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1161 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1162  
NULL
;

1164 i‡(
	`js⁄_¨øy_add
(
ãmp_¨øy_c›y
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1165 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1166 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1167  
NULL
;

1170  
ªtu∫_vÆue
;

1171 
JSONObje˘
:

1172 
ãmp_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1173 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1174 i‡(
ªtu∫_vÆue
 =
NULL
)

1175  
NULL
;

1176 
ãmp_obje˘_c›y
 = 
	`js⁄_vÆue_gë_obje˘
(
ªtu∫_vÆue
);

1177 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
ãmp_obje˘
); i++) {

1178 
ãmp_key
 = 
	`js⁄_obje˘_gë_«me
(
ãmp_obje˘
, 
i
);

1179 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
ãmp_obje˘
, 
ãmp_key
);

1180 
ãmp_vÆue_c›y
 = 
	`js⁄_vÆue_dìp_c›y
(
ãmp_vÆue
);

1181 i‡(
ãmp_vÆue_c›y
 =
NULL
) {

1182 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1183  
NULL
;

1185 i‡(
	`js⁄_obje˘_add
(
ãmp_obje˘_c›y
, 
ãmp_key
, 
ãmp_vÆue_c›y
Ë=
JSONFaûuª
) {

1186 
	`js⁄_vÆue_‰ì
(
ªtu∫_vÆue
);

1187 
	`js⁄_vÆue_‰ì
(
ãmp_vÆue_c›y
);

1188  
NULL
;

1191  
ªtu∫_vÆue
;

1192 
JSONBoﬁón
:

1193  
	`js⁄_vÆue_öô_boﬁón
(
	`js⁄_vÆue_gë_boﬁón
(
vÆue
));

1194 
JSONNumbî
:

1195  
	`js⁄_vÆue_öô_numbî
(
	`js⁄_vÆue_gë_numbî
(
vÆue
));

1196 
JSONSåög
:

1197 
ãmp_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1198 
ãmp_°rög_c›y
 = 
	`∑rs⁄_°rdup
(
ãmp_°rög
);

1199 i‡(
ãmp_°rög_c›y
 =
NULL
)

1200  
NULL
;

1201 
ªtu∫_vÆue
 = 
	`js⁄_vÆue_öô_°rög_no_c›y
(
ãmp_°rög_c›y
);

1202 i‡(
ªtu∫_vÆue
 =
NULL
)

1203 
	`∑rs⁄_‰ì
(
ãmp_°rög_c›y
);

1204  
ªtu∫_vÆue
;

1205 
JSONNuŒ
:

1206  
	`js⁄_vÆue_öô_nuŒ
();

1207 
JSONEº‹
:

1208  
NULL
;

1210  
NULL
;

1212 
	}
}

1214 
size_t
 
	$js⁄_£rüliz©i⁄_size
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1215 
num_buf
[1100];

1216 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 0, 
num_buf
);

1217  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1218 
	}
}

1220 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1221 
wrôãn
 = -1;

1222 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1223 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes) {

1224  
JSONFaûuª
;

1226 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 0, 
NULL
);

1227 i‡(
wrôãn
 < 0)

1228  
JSONFaûuª
;

1229  
JSONSuc˚ss
;

1230 
	}
}

1232 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1233 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1234 
FILE
 *
Â
 = 
NULL
;

1235 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög
(
vÆue
);

1236 i‡(
£rülized_°rög
 =
NULL
) {

1237  
JSONFaûuª
;

1239 
Â
 = 
	`f›í
 (
fûíame
, "w");

1240 i‡(
Â
 !
NULL
) {

1241 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1242 
ªtu∫_code
 = 
JSONFaûuª
;

1244 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1245 
ªtu∫_code
 = 
JSONFaûuª
;

1248 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1249  
ªtu∫_code
;

1250 
	}
}

1252 * 
	$js⁄_£rülize_to_°rög
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1253 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1254 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size
(
vÆue
);

1255 *
buf
 = 
NULL
;

1256 i‡(
buf_size_byãs
 == 0) {

1257  
NULL
;

1259 
buf
 = (*)
	`∑rs⁄_mÆloc
(
buf_size_byãs
);

1260 i‡(
buf
 =
NULL
)

1261  
NULL
;

1262 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r
(
vÆue
, 
buf
, 
buf_size_byãs
);

1263 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1264 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1265  
NULL
;

1267  
buf
;

1268 
	}
}

1270 
size_t
 
	$js⁄_£rüliz©i⁄_size_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1271 
num_buf
[1100];

1272 
ªs
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
NULL
, 0, 1, 
num_buf
);

1273  
ªs
 < 0 ? 0 : (
size_t
)(res + 1);

1274 
	}
}

1276 
JSON_Sètus
 
	$js⁄_£rülize_to_buf„r_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, *
buf
, 
size_t
 
buf_size_ö_byãs
) {

1277 
wrôãn
 = -1;

1278 
size_t
 
√eded_size_ö_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1279 i‡(
√eded_size_ö_byãs
 =0 || 
buf_size_ö_byãs
 <Çeeded_size_in_bytes)

1280  
JSONFaûuª
;

1281 
wrôãn
 = 
	`js⁄_£rülize_to_buf„r_r
(
vÆue
, 
buf
, 0, 1, 
NULL
);

1282 i‡(
wrôãn
 < 0)

1283  
JSONFaûuª
;

1284  
JSONSuc˚ss
;

1285 
	}
}

1287 
JSON_Sètus
 
	$js⁄_£rülize_to_fûe_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
, c⁄° *
fûíame
) {

1288 
JSON_Sètus
 
ªtu∫_code
 = 
JSONSuc˚ss
;

1289 
FILE
 *
Â
 = 
NULL
;

1290 *
£rülized_°rög
 = 
	`js⁄_£rülize_to_°rög_¥ëty
(
vÆue
);

1291 i‡(
£rülized_°rög
 =
NULL
) {

1292  
JSONFaûuª
;

1294 
Â
 = 
	`f›í
 (
fûíame
, "w");

1295 i‡(
Â
 !
NULL
) {

1296 i‡(
	`Âuts
 (
£rülized_°rög
, 
Â
Ë=
EOF
) {

1297 
ªtu∫_code
 = 
JSONFaûuª
;

1299 i‡(
	`f˛o£
 (
Â
Ë=
EOF
) {

1300 
ªtu∫_code
 = 
JSONFaûuª
;

1303 
	`js⁄_‰ì_£rülized_°rög
(
£rülized_°rög
);

1304  
ªtu∫_code
;

1305 
	}
}

1307 * 
	$js⁄_£rülize_to_°rög_¥ëty
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1308 
JSON_Sètus
 
£rüliz©i⁄_ªsu…
 = 
JSONFaûuª
;

1309 
size_t
 
buf_size_byãs
 = 
	`js⁄_£rüliz©i⁄_size_¥ëty
(
vÆue
);

1310 *
buf
 = 
NULL
;

1311 i‡(
buf_size_byãs
 == 0) {

1312  
NULL
;

1314 
buf
 = (*)
	`∑rs⁄_mÆloc
(
buf_size_byãs
);

1315 i‡(
buf
 =
NULL
)

1316  
NULL
;

1317 
£rüliz©i⁄_ªsu…
 = 
	`js⁄_£rülize_to_buf„r_¥ëty
(
vÆue
, 
buf
, 
buf_size_byãs
);

1318 i‡(
£rüliz©i⁄_ªsu…
 =
JSONFaûuª
) {

1319 
	`js⁄_‰ì_£rülized_°rög
(
buf
);

1320  
NULL
;

1322  
buf
;

1323 
	}
}

1325 
	$js⁄_‰ì_£rülized_°rög
(*
°rög
) {

1326 
	`∑rs⁄_‰ì
(
°rög
);

1327 
	}
}

1329 
JSON_Sètus
 
	$js⁄_¨øy_ªmove
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
) {

1330 
JSON_VÆue
 *
ãmp_vÆue
 = 
NULL
;

1331 
size_t
 
œ°_ñemít_ix
 = 0;

1332 i‡(
¨øy
 =
NULL
 || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1333  
JSONFaûuª
;

1335 
œ°_ñemít_ix
 = 
	`js⁄_¨øy_gë_cou¡
(
¨øy
) - 1;

1336 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1337 i‡(
ix
 !
œ°_ñemít_ix
) {

1338 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
œ°_ñemít_ix
);

1339 i‡(
ãmp_vÆue
 =
NULL
) {

1340  
JSONFaûuª
;

1342 
¨øy
->
ôems
[
ix
] = 
ãmp_vÆue
;

1344 
¨øy
->
cou¡
 -= 1;

1345  
JSONSuc˚ss
;

1346 
	}
}

1348 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_vÆue
(
JSON_Aºay
 *
¨øy
, 
size_t
 
ix
, 
JSON_VÆue
 *
vÆue
) {

1349 i‡(
¨øy
 =
NULL
 || 
vÆue
 =NULL || 
ix
 >
	`js⁄_¨øy_gë_cou¡
(array)) {

1350  
JSONFaûuª
;

1352 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
ix
));

1353 
¨øy
->
ôems
[
ix
] = 
vÆue
;

1354  
JSONSuc˚ss
;

1355 
	}
}

1357 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_°rög
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, c⁄° * 
°rög
) {

1358 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1359 i‡(
vÆue
 =
NULL
)

1360  
JSONFaûuª
;

1361 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1362 
	`js⁄_vÆue_‰ì
(
vÆue
);

1363  
JSONFaûuª
;

1365  
JSONSuc˚ss
;

1366 
	}
}

1368 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_numbî
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
numbî
) {

1369 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1370 i‡(
vÆue
 =
NULL
)

1371  
JSONFaûuª
;

1372 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1373 
	`js⁄_vÆue_‰ì
(
vÆue
);

1374  
JSONFaûuª
;

1376  
JSONSuc˚ss
;

1377 
	}
}

1379 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_boﬁón
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
, 
boﬁón
) {

1380 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1381 i‡(
vÆue
 =
NULL
)

1382  
JSONFaûuª
;

1383 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1384 
	`js⁄_vÆue_‰ì
(
vÆue
);

1385  
JSONFaûuª
;

1387  
JSONSuc˚ss
;

1388 
	}
}

1390 
JSON_Sètus
 
	$js⁄_¨øy_ª∂a˚_nuŒ
(
JSON_Aºay
 *
¨øy
, 
size_t
 
i
) {

1391 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1392 i‡(
vÆue
 =
NULL
)

1393  
JSONFaûuª
;

1394 i‡(
	`js⁄_¨øy_ª∂a˚_vÆue
(
¨øy
, 
i
, 
vÆue
Ë=
JSONFaûuª
) {

1395 
	`js⁄_vÆue_‰ì
(
vÆue
);

1396  
JSONFaûuª
;

1398  
JSONSuc˚ss
;

1399 
	}
}

1401 
JSON_Sètus
 
	$js⁄_¨øy_˛ór
(
JSON_Aºay
 *
¨øy
) {

1402 
size_t
 
i
 = 0;

1403 i‡(
¨øy
 =
NULL
)

1404  
JSONFaûuª
;

1405 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
¨øy
); i++) {

1406 
	`js⁄_vÆue_‰ì
(
	`js⁄_¨øy_gë_vÆue
(
¨øy
, 
i
));

1408 
¨øy
->
cou¡
 = 0;

1409  
JSONSuc˚ss
;

1410 
	}
}

1412 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_vÆue
(
JSON_Aºay
 *
¨øy
, 
JSON_VÆue
 *
vÆue
) {

1413 i‡(
¨øy
 =
NULL
 || 
vÆue
 == NULL)

1414  
JSONFaûuª
;

1415  
	`js⁄_¨øy_add
(
¨øy
, 
vÆue
);

1416 
	}
}

1418 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_°rög
(
JSON_Aºay
 *
¨øy
, c⁄° *
°rög
) {

1419 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1420 i‡(
vÆue
 =
NULL
)

1421  
JSONFaûuª
;

1422 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1423 
	`js⁄_vÆue_‰ì
(
vÆue
);

1424  
JSONFaûuª
;

1426  
JSONSuc˚ss
;

1427 
	}
}

1429 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_numbî
(
JSON_Aºay
 *
¨øy
, 
numbî
) {

1430 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1431 i‡(
vÆue
 =
NULL
)

1432  
JSONFaûuª
;

1433 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1434 
	`js⁄_vÆue_‰ì
(
vÆue
);

1435  
JSONFaûuª
;

1437  
JSONSuc˚ss
;

1438 
	}
}

1440 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_boﬁón
(
JSON_Aºay
 *
¨øy
, 
boﬁón
) {

1441 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1442 i‡(
vÆue
 =
NULL
)

1443  
JSONFaûuª
;

1444 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1445 
	`js⁄_vÆue_‰ì
(
vÆue
);

1446  
JSONFaûuª
;

1448  
JSONSuc˚ss
;

1449 
	}
}

1451 
JSON_Sètus
 
	$js⁄_¨øy_≠≥nd_nuŒ
(
JSON_Aºay
 *
¨øy
) {

1452 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1453 i‡(
vÆue
 =
NULL
)

1454  
JSONFaûuª
;

1455 i‡(
	`js⁄_¨øy_≠≥nd_vÆue
(
¨øy
, 
vÆue
Ë=
JSONFaûuª
) {

1456 
	`js⁄_vÆue_‰ì
(
vÆue
);

1457  
JSONFaûuª
;

1459  
JSONSuc˚ss
;

1460 
	}
}

1462 
JSON_Sètus
 
	$js⁄_obje˘_£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1463 
size_t
 
i
 = 0;

1464 
JSON_VÆue
 *
ﬁd_vÆue
;

1465 i‡(
obje˘
 =
NULL
 || 
«me
 =NULL || 
vÆue
 == NULL)

1466  
JSONFaûuª
;

1467 
ﬁd_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
obje˘
, 
«me
);

1468 i‡(
ﬁd_vÆue
 !
NULL
) {

1469 
	`js⁄_vÆue_‰ì
(
ﬁd_vÆue
);

1470 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1471 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1472 
obje˘
->
vÆues
[
i
] = 
vÆue
;

1473  
JSONSuc˚ss
;

1478  
	`js⁄_obje˘_add
(
obje˘
, 
«me
, 
vÆue
);

1479 
	}
}

1481 
JSON_Sètus
 
	$js⁄_obje˘_£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1482  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_°rög
(
°rög
));

1483 
	}
}

1485 
JSON_Sètus
 
	$js⁄_obje˘_£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1486  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_numbî
(
numbî
));

1487 
	}
}

1489 
JSON_Sètus
 
	$js⁄_obje˘_£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1490  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
));

1491 
	}
}

1493 
JSON_Sètus
 
	$js⁄_obje˘_£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1494  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
	`js⁄_vÆue_öô_nuŒ
());

1495 
	}
}

1497 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_vÆue
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
JSON_VÆue
 *
vÆue
) {

1498 c⁄° *
dŸ_pos
 = 
NULL
;

1499 *
cuºít_«me
 = 
NULL
;

1500 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1501 
JSON_VÆue
 *
√w_vÆue
 = 
NULL
;

1502 i‡(
vÆue
 =
NULL
 || 
«me
 == NULL || value == NULL)

1503  
JSONFaûuª
;

1504 
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1505 i‡(
dŸ_pos
 =
NULL
) {

1506  
	`js⁄_obje˘_£t_vÆue
(
obje˘
, 
«me
, 
vÆue
);

1508 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1509 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1510 i‡(
ãmp_obj
 =
NULL
) {

1511 
√w_vÆue
 = 
	`js⁄_vÆue_öô_obje˘
();

1512 i‡(
√w_vÆue
 =
NULL
) {

1513 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1514  
JSONFaûuª
;

1516 i‡(
	`js⁄_obje˘_add
(
obje˘
, 
cuºít_«me
, 
√w_vÆue
Ë=
JSONFaûuª
) {

1517 
	`js⁄_vÆue_‰ì
(
√w_vÆue
);

1518 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1519  
JSONFaûuª
;

1521 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1523 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1524  
	`js⁄_obje˘_dŸ£t_vÆue
(
ãmp_obj
, 
dŸ_pos
 + 1, 
vÆue
);

1526 
	}
}

1528 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_°rög
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, c⁄° *
°rög
) {

1529 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_°rög
(
°rög
);

1530 i‡(
vÆue
 =
NULL
)

1531  
JSONFaûuª
;

1532 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1533 
	`js⁄_vÆue_‰ì
(
vÆue
);

1534  
JSONFaûuª
;

1536  
JSONSuc˚ss
;

1537 
	}
}

1539 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_numbî
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
numbî
) {

1540 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_numbî
(
numbî
);

1541 i‡(
vÆue
 =
NULL
)

1542  
JSONFaûuª
;

1543 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1544 
	`js⁄_vÆue_‰ì
(
vÆue
);

1545  
JSONFaûuª
;

1547  
JSONSuc˚ss
;

1548 
	}
}

1550 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_boﬁón
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
, 
boﬁón
) {

1551 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_boﬁón
(
boﬁón
);

1552 i‡(
vÆue
 =
NULL
)

1553  
JSONFaûuª
;

1554 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1555 
	`js⁄_vÆue_‰ì
(
vÆue
);

1556  
JSONFaûuª
;

1558  
JSONSuc˚ss
;

1559 
	}
}

1561 
JSON_Sètus
 
	$js⁄_obje˘_dŸ£t_nuŒ
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1562 
JSON_VÆue
 *
vÆue
 = 
	`js⁄_vÆue_öô_nuŒ
();

1563 i‡(
vÆue
 =
NULL
)

1564  
JSONFaûuª
;

1565 i‡(
	`js⁄_obje˘_dŸ£t_vÆue
(
obje˘
, 
«me
, 
vÆue
Ë=
JSONFaûuª
) {

1566 
	`js⁄_vÆue_‰ì
(
vÆue
);

1567  
JSONFaûuª
;

1569  
JSONSuc˚ss
;

1570 
	}
}

1572 
JSON_Sètus
 
	$js⁄_obje˘_ªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1573 
size_t
 
i
 = 0, 
œ°_ôem_ödex
 = 0;

1574 i‡(
obje˘
 =
NULL
 || 
	`js⁄_obje˘_gë_vÆue
(obje˘, 
«me
) == NULL)

1575  
JSONFaûuª
;

1576 
œ°_ôem_ödex
 = 
	`js⁄_obje˘_gë_cou¡
(
obje˘
) - 1;

1577 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1578 i‡(
	`°rcmp
(
obje˘
->
«mes
[
i
], 
«me
) == 0) {

1579 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[
i
]);

1580 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1581 i‡(
i
 !
œ°_ôem_ödex
) {

1582 
obje˘
->
«mes
[
i
] = obje˘->«mes[
œ°_ôem_ödex
];

1583 
obje˘
->
vÆues
[
i
] = obje˘->vÆues[
œ°_ôem_ödex
];

1585 
obje˘
->
cou¡
 -= 1;

1586  
JSONSuc˚ss
;

1589  
JSONFaûuª
;

1590 
	}
}

1592 
JSON_Sètus
 
	$js⁄_obje˘_dŸªmove
(
JSON_Obje˘
 *
obje˘
, c⁄° *
«me
) {

1593 c⁄° *
dŸ_pos
 = 
	`°rchr
(
«me
, '.');

1594 *
cuºít_«me
 = 
NULL
;

1595 
JSON_Obje˘
 *
ãmp_obj
 = 
NULL
;

1596 i‡(
dŸ_pos
 =
NULL
) {

1597  
	`js⁄_obje˘_ªmove
(
obje˘
, 
«me
);

1599 
cuºít_«me
 = 
	`∑rs⁄_°∫dup
(
«me
, 
dŸ_pos
 -Çame);

1600 
ãmp_obj
 = 
	`js⁄_obje˘_gë_obje˘
(
obje˘
, 
cuºít_«me
);

1601 i‡(
ãmp_obj
 =
NULL
) {

1602 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1603  
JSONFaûuª
;

1605 
	`∑rs⁄_‰ì
(
cuºít_«me
);

1606  
	`js⁄_obje˘_dŸªmove
(
ãmp_obj
, 
dŸ_pos
 + 1);

1608 
	}
}

1610 
JSON_Sètus
 
	$js⁄_obje˘_˛ór
(
JSON_Obje˘
 *
obje˘
) {

1611 
size_t
 
i
 = 0;

1612 i‡(
obje˘
 =
NULL
) {

1613  
JSONFaûuª
;

1615 
i
 = 0; i < 
	`js⁄_obje˘_gë_cou¡
(
obje˘
); i++) {

1616 
	`∑rs⁄_‰ì
(
obje˘
->
«mes
[
i
]);

1617 
	`js⁄_vÆue_‰ì
(
obje˘
->
vÆues
[
i
]);

1619 
obje˘
->
cou¡
 = 0;

1620  
JSONSuc˚ss
;

1621 
	}
}

1623 
JSON_Sètus
 
	$js⁄_vÆid©e
(c⁄° 
JSON_VÆue
 *
schema
, c⁄° JSON_VÆuê*
vÆue
) {

1624 
JSON_VÆue
 *
ãmp_schema_vÆue
 = 
NULL
, *
ãmp_vÆue
 = NULL;

1625 
JSON_Aºay
 *
schema_¨øy
 = 
NULL
, *
vÆue_¨øy
 = NULL;

1626 
JSON_Obje˘
 *
schema_obje˘
 = 
NULL
, *
vÆue_obje˘
 = NULL;

1627 
JSON_VÆue_Ty≥
 
schema_ty≥
 = 
JSONEº‹
, 
vÆue_ty≥
 = JSONError;

1628 c⁄° *
key
 = 
NULL
;

1629 
size_t
 
i
 = 0, 
cou¡
 = 0;

1630 i‡(
schema
 =
NULL
 || 
vÆue
 == NULL)

1631  
JSONFaûuª
;

1632 
schema_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
schema
);

1633 
vÆue_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1634 i‡(
schema_ty≥
 !
vÆue_ty≥
 && schema_ty≥ !
JSONNuŒ
)

1635  
JSONFaûuª
;

1636 
schema_ty≥
) {

1637 
JSONAºay
:

1638 
schema_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
schema
);

1639 
vÆue_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1640 
cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
schema_¨øy
);

1641 i‡(
cou¡
 == 0)

1642  
JSONSuc˚ss
;

1644 
ãmp_schema_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
schema_¨øy
, 0);

1645 
i
 = 0; i < 
	`js⁄_¨øy_gë_cou¡
(
vÆue_¨øy
); i++) {

1646 
ãmp_vÆue
 = 
	`js⁄_¨øy_gë_vÆue
(
vÆue_¨øy
, 
i
);

1647 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
) == 0) {

1648  
JSONFaûuª
;

1651  
JSONSuc˚ss
;

1652 
JSONObje˘
:

1653 
schema_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
schema
);

1654 
vÆue_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1655 
cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
schema_obje˘
);

1656 i‡(
cou¡
 == 0)

1657  
JSONSuc˚ss
;

1658 i‡(
	`js⁄_obje˘_gë_cou¡
(
vÆue_obje˘
Ë< 
cou¡
)

1659  
JSONFaûuª
;

1660 
i
 = 0; i < 
cou¡
; i++) {

1661 
key
 = 
	`js⁄_obje˘_gë_«me
(
schema_obje˘
, 
i
);

1662 
ãmp_schema_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
schema_obje˘
, 
key
);

1663 
ãmp_vÆue
 = 
	`js⁄_obje˘_gë_vÆue
(
vÆue_obje˘
, 
key
);

1664 i‡(
ãmp_vÆue
 =
NULL
)

1665  
JSONFaûuª
;

1666 i‡(
	`js⁄_vÆid©e
(
ãmp_schema_vÆue
, 
ãmp_vÆue
Ë=
JSONFaûuª
)

1667  
JSONFaûuª
;

1669  
JSONSuc˚ss
;

1670 
JSONSåög
: 
JSONNumbî
: 
JSONBoﬁón
: 
JSONNuŒ
:

1671  
JSONSuc˚ss
;

1672 
JSONEº‹
: :

1673  
JSONFaûuª
;

1675 
	}
}

1677 
JSON_Sètus
 
	$js⁄_vÆue_equÆs
(c⁄° 
JSON_VÆue
 *
a
, c⁄° JSON_VÆuê*
b
) {

1678 
JSON_Obje˘
 *
a_obje˘
 = 
NULL
, *
b_obje˘
 = NULL;

1679 
JSON_Aºay
 *
a_¨øy
 = 
NULL
, *
b_¨øy
 = NULL;

1680 c⁄° *
a_°rög
 = 
NULL
, *
b_°rög
 = NULL;

1681 c⁄° *
key
 = 
NULL
;

1682 
size_t
 
a_cou¡
 = 0, 
b_cou¡
 = 0, 
i
 = 0;

1683 
JSON_VÆue_Ty≥
 
a_ty≥
, 
b_ty≥
;

1684 
a_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
a
);

1685 
b_ty≥
 = 
	`js⁄_vÆue_gë_ty≥
(
b
);

1686 i‡(
a_ty≥
 !
b_ty≥
) {

1689 
a_ty≥
) {

1690 
JSONAºay
:

1691 
a_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
a
);

1692 
b_¨øy
 = 
	`js⁄_vÆue_gë_¨øy
(
b
);

1693 
a_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
a_¨øy
);

1694 
b_cou¡
 = 
	`js⁄_¨øy_gë_cou¡
(
b_¨øy
);

1695 i‡(
a_cou¡
 !
b_cou¡
) {

1698 
i
 = 0; i < 
a_cou¡
; i++) {

1699 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_¨øy_gë_vÆue
(
a_¨øy
, 
i
),

1700 
	`js⁄_¨øy_gë_vÆue
(
b_¨øy
, 
i
))) {

1705 
JSONObje˘
:

1706 
a_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
a
);

1707 
b_obje˘
 = 
	`js⁄_vÆue_gë_obje˘
(
b
);

1708 
a_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
a_obje˘
);

1709 
b_cou¡
 = 
	`js⁄_obje˘_gë_cou¡
(
b_obje˘
);

1710 i‡(
a_cou¡
 !
b_cou¡
) {

1713 
i
 = 0; i < 
a_cou¡
; i++) {

1714 
key
 = 
	`js⁄_obje˘_gë_«me
(
a_obje˘
, 
i
);

1715 i‡(!
	`js⁄_vÆue_equÆs
(
	`js⁄_obje˘_gë_vÆue
(
a_obje˘
, 
key
),

1716 
	`js⁄_obje˘_gë_vÆue
(
b_obje˘
, 
key
))) {

1721 
JSONSåög
:

1722 
a_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
a
);

1723 
b_°rög
 = 
	`js⁄_vÆue_gë_°rög
(
b
);

1724  
	`°rcmp
(
a_°rög
, 
b_°rög
) == 0;

1725 
JSONBoﬁón
:

1726  
	`js⁄_vÆue_gë_boﬁón
(
a
Ë=js⁄_vÆue_gë_boﬁón(
b
);

1727 
JSONNumbî
:

1728  
	`Ábs
(
	`js⁄_vÆue_gë_numbî
(
a
Ë- js⁄_vÆue_gë_numbî(
b
)) < 0.000001;

1729 
JSONEº‹
:

1731 
JSONNuŒ
:

1736 
	}
}

1738 
JSON_VÆue_Ty≥
 
	$js⁄_ty≥
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1739  
	`js⁄_vÆue_gë_ty≥
(
vÆue
);

1740 
	}
}

1742 
JSON_Obje˘
 * 
	$js⁄_obje˘
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1743  
	`js⁄_vÆue_gë_obje˘
(
vÆue
);

1744 
	}
}

1746 
JSON_Aºay
 * 
	$js⁄_¨øy
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1747  
	`js⁄_vÆue_gë_¨øy
(
vÆue
);

1748 
	}
}

1750 c⁄° * 
	$js⁄_°rög
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1751  
	`js⁄_vÆue_gë_°rög
(
vÆue
);

1752 
	}
}

1754 
	$js⁄_numbî
 (c⁄° 
JSON_VÆue
 *
vÆue
) {

1755  
	`js⁄_vÆue_gë_numbî
(
vÆue
);

1756 
	}
}

1758 
	$js⁄_boﬁón
(c⁄° 
JSON_VÆue
 *
vÆue
) {

1759  
	`js⁄_vÆue_gë_boﬁón
(
vÆue
);

1760 
	}
}

1762 
	$js⁄_£t_Æloˇti⁄_fun˘i⁄s
(
JSON_MÆloc_Fun˘i⁄
 
mÆloc_fun
, 
JSON_Fªe_Fun˘i⁄
 
‰ì_fun
) {

1763 
∑rs⁄_mÆloc
 = 
mÆloc_fun
;

1764 
∑rs⁄_‰ì
 = 
‰ì_fun
;

1765 
	}
}

	@util_pkt_logger/src/util_pkt_logger.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<sig«l.h
>

33 
	~<time.h
>

34 
	~<uni°d.h
>

35 
	~<°dlib.h
>

37 
	~"∑rs⁄.h
"

38 
	~"l‹agw_hÆ.h
"

43 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

44 
	#MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,"l‹agw_pkt_loggî: "árgsË

	)

50 
siga˘i⁄
 
	gsiga˘
;

51 
	gexô_sig
 = 0;

52 
	gquô_sig
 = 0;

55 
uöt64_t
 
	glgwm
 = 0;

56 
	glgwm_°r
[17];

59 
time_t
 
	gnow_time
;

60 
time_t
 
	glog_°¨t_time
;

61 
FILE
 * 
	glog_fûe
 = 
NULL
;

62 
	glog_fûe_«me
[64];

67 
sig_h™dÀr
(
sigio
);

69 
∑r£_SX1301_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

71 
∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
);

73 
›í_log
();

75 
ußge
 ();

80 
	$sig_h™dÀr
(
sigio
) {

81 i‡(
sigio
 =
SIGQUIT
) {

82 
quô_sig
 = 1;;

83 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

84 
exô_sig
 = 1;

86 
	}
}

88 
	$∑r£_SX1301_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

89 
i
;

90 c⁄° 
c⁄f_obj
[] = "SX1301_conf";

91 
∑øm_«me
[32];

92 c⁄° *
°r
;

93 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

94 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

95 
lgw_c⁄f_rxif_s
 
ifc⁄f
;

96 
JSON_VÆue
 *
roŸ_vÆ
;

97 
JSON_Obje˘
 *
roŸ
 = 
NULL
;

98 
JSON_Obje˘
 *
c⁄f
 = 
NULL
;

99 
JSON_VÆue
 *
vÆ
;

100 
uöt32_t
 
sf
, 
bw
;

103 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

104 
roŸ
 = 
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
);

105 i‡(
roŸ
 =
NULL
) {

106 
	`MSG
("ERROR: %†idÇŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

107 
	`exô
(
EXIT_FAILURE
);

109 
c⁄f
 = 
	`js⁄_obje˘_gë_obje˘
(
roŸ
, 
c⁄f_obj
);

110 i‡(
c⁄f
 =
NULL
) {

111 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj
);

114 
	`MSG
("INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög SX1301Ö¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj
);

118 
	`mem£t
(&
bﬂrdc⁄f
, 0,  boardconf);

119 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f
, "lorawan_public");

120 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

121 
bﬂrdc⁄f
.
l‹aw™_public
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

123 
	`MSG
("WARNING: DataÅype forÜorawan_public seems wrong,Ölease check\n");

124 
bﬂrdc⁄f
.
l‹aw™_public
 = 
Ál£
;

126 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f
, "clksrc");

127 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONNumbî
) {

128 
bﬂrdc⁄f
.
˛k§c
 = (
uöt8_t
)
	`js⁄_vÆue_gë_numbî
(
vÆ
);

130 
	`MSG
("WARNING: DataÅype for clksrc seems wrong,Ölease check\n");

131 
bﬂrdc⁄f
.
˛k§c
 = 0;

133 
	`MSG
("INFO:Ü‹aw™_publi¯%d, clk§¯%d\n", 
bﬂrdc⁄f
.
l‹aw™_public
, bﬂrdc⁄f.
˛k§c
);

135 i‡(
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
Ë!
LGW_HAL_SUCCESS
) {

136 
	`MSG
("ERROR: FailedÅo configure board\n");

141 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; ++i) {

142 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

143 
	`•rötf
(
∑øm_«me
, "ødio_%i", 
i
);

144 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f
, 
∑øm_«me
);

145 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

146 
	`MSG
("INFO:Çÿc⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

150 
	`•rötf
(
∑øm_«me
, "ødio_%i.íabÀ", 
i
);

151 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f
, 
∑øm_«me
);

152 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

153 
rfc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

155 
rfc⁄f
.
íabÀ
 = 
Ál£
;

157 i‡(
rfc⁄f
.
íabÀ
 =
Ál£
) {

158 
	`MSG
("INFO:Ñadiÿ%òdißbÀd\n", 
i
);

160 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.‰eq", 
i
);

161 
rfc⁄f
.
‰eq_hz
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, 
∑øm_«me
);

162 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.rssi_off£t", 
i
);

163 
rfc⁄f
.
rssi_off£t
 = ()
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, 
∑øm_«me
);

164 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.ty≥", 
i
);

165 
°r
 = 
	`js⁄_obje˘_dŸgë_°rög
(
c⁄f
, 
∑øm_«me
);

166 i‡(!
	`°∫cmp
(
°r
, "SX1255", 6)) {

167 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

168 } i‡(!
	`°∫cmp
(
°r
, "SX1257", 6)) {

169 
rfc⁄f
.
ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

171 
	`MSG
("WARNING: invÆidÑadiÿty≥: %†(should bêSX1255 o∏SX1257)\n", 
°r
);

173 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_íabÀ", 
i
);

174 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f
, 
∑øm_«me
);

175 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

176 
rfc⁄f
.
tx_íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

177 i‡(
rfc⁄f
.
tx_íabÀ
 =
åue
) {

179 
	`¢¥ötf
(
∑øm_«me
, Ö¨am_«me, "ødio_%i.tx_nŸch_‰eq", 
i
);

180 
rfc⁄f
.
tx_nŸch_‰eq
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, 
∑øm_«me
);

183 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

185 
	`MSG
("INFO:Ñadiÿ%òíabÀd (ty≥ %s), cíã∏‰equícy %u, RSSI off£à%f,ÅxÉ«bÀd %d,Åx_nŸch_‰eq %u\n", 
i
, 
°r
, 
rfc⁄f
.
‰eq_hz
,Ñfc⁄f.
rssi_off£t
,Ñfc⁄f.
tx_íabÀ
,Ñfc⁄f.
tx_nŸch_‰eq
);

188 i‡(
	`lgw_rxrf_£tc⁄f
(
i
, 
rfc⁄f
Ë!
LGW_HAL_SUCCESS
) {

189 
	`MSG
("ERROR: invÆid c⁄figuøti⁄ f‹Ñadiÿ%i\n", 
i
);

195 
i
 = 0; i < 
LGW_MULTI_NB
; ++i) {

196 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

197 
	`•rötf
(
∑øm_«me
, "ch™_mu…iSF_%i", 
i
);

198 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f
, 
∑øm_«me
);

199 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

200 
	`MSG
("INFO:Çÿc⁄figuøti⁄ f‹ LoR®mu…i-SF ch™√»%i\n", 
i
);

204 
	`•rötf
(
∑øm_«me
, "ch™_mu…iSF_%i.íabÀ", 
i
);

205 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f
, 
∑øm_«me
);

206 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

207 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

209 
ifc⁄f
.
íabÀ
 = 
Ál£
;

211 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

212 
	`MSG
("INFO: LoR®mu…i-SF ch™√»%òdißbÀd\n", 
i
);

214 
	`•rötf
(
∑øm_«me
, "ch™_mu…iSF_%i.ødio", 
i
);

215 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, 
∑øm_«me
);

216 
	`•rötf
(
∑øm_«me
, "ch™_mu…iSF_%i.if", 
i
);

217 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, 
∑øm_«me
);

219 
	`MSG
("INFO: LoR®mu…i-SF ch™√»%òíabÀd,Ñadiÿ%ò£À˘ed, IF %òHz, 125 kHz b™dwidth, SF 7Åÿ12\n", 
i
, 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
);

222 i‡(
	`lgw_rxif_£tc⁄f
(
i
, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

223 
	`MSG
("ERROR: invÆid c⁄figuøti⁄ f‹ L‹®mu…i-SF ch™√»%i\n", 
i
);

229 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

230 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f
, "chan_Lora_std");

231 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

232 
	`MSG
("INFO:Ço configuration for LoRa standard channel\n");

234 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f
, "chan_Lora_std.enable");

235 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

236 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

238 
ifc⁄f
.
íabÀ
 = 
Ál£
;

240 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

241 
	`MSG
("INFO: LoR®°™d¨d ch™√»%òdißbÀd\n", 
i
);

243 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_Lora_std.radio");

244 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_Lora_std.if");

245 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_Lora_std.bandwidth");

246 
bw
) {

247 500000: 
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
; ;

248 250000: 
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
; ;

249 125000: 
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
; ;

250 : 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

252 
sf
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_Lora_std.spread_factor");

253 
sf
) {

254 7: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF7
; ;

255 8: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF8
; ;

256 9: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF9
; ;

257 10: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF10
; ;

258 11: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF11
; ;

259 12: 
ifc⁄f
.
d©¨©e
 = 
DR_LORA_SF12
; ;

260 : 
ifc⁄f
.
d©¨©e
 = 
DR_UNDEFINED
;

262 
	`MSG
("INFO: LoR®°™d¨d ch™√»íabÀd,Ñadiÿ%ò£À˘ed, IF %òHz, %u Hz b™dwidth, SF %u\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, 
sf
);

264 i‡(
	`lgw_rxif_£tc⁄f
(8, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

265 
	`MSG
("ERROR: invalid configuration for Lora standard channel\n");

271 
	`mem£t
(&
ifc⁄f
, 0, (ifconf));

272 
vÆ
 = 
	`js⁄_obje˘_gë_vÆue
(
c⁄f
, "chan_FSK");

273 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë!
JSONObje˘
) {

274 
	`MSG
("INFO:Ço configuration for FSK channel\n");

276 
vÆ
 = 
	`js⁄_obje˘_dŸgë_vÆue
(
c⁄f
, "chan_FSK.enable");

277 i‡(
	`js⁄_vÆue_gë_ty≥
(
vÆ
Ë=
JSONBoﬁón
) {

278 
ifc⁄f
.
íabÀ
 = (
boﬁ
)
	`js⁄_vÆue_gë_boﬁón
(
vÆ
);

280 
ifc⁄f
.
íabÀ
 = 
Ál£
;

282 i‡(
ifc⁄f
.
íabÀ
 =
Ál£
) {

283 
	`MSG
("INFO: FSK ch™√»%òdißbÀd\n", 
i
);

285 
ifc⁄f
.
rf_chaö
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_FSK.radio");

286 
ifc⁄f
.
‰eq_hz
 = (
öt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_FSK.if");

287 
bw
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_FSK.bandwidth");

288 i‡(
bw
 <7800Ë
ifc⁄f
.
b™dwidth
 = 
BW_7K8HZ
;

289 i‡(
bw
 <15600Ë
ifc⁄f
.
b™dwidth
 = 
BW_15K6HZ
;

290 i‡(
bw
 <31200Ë
ifc⁄f
.
b™dwidth
 = 
BW_31K2HZ
;

291 i‡(
bw
 <62500Ë
ifc⁄f
.
b™dwidth
 = 
BW_62K5HZ
;

292 i‡(
bw
 <125000Ë
ifc⁄f
.
b™dwidth
 = 
BW_125KHZ
;

293 i‡(
bw
 <250000Ë
ifc⁄f
.
b™dwidth
 = 
BW_250KHZ
;

294 i‡(
bw
 <500000Ë
ifc⁄f
.
b™dwidth
 = 
BW_500KHZ
;

295 
ifc⁄f
.
b™dwidth
 = 
BW_UNDEFINED
;

296 
ifc⁄f
.
d©¨©e
 = (
uöt32_t
)
	`js⁄_obje˘_dŸgë_numbî
(
c⁄f
, "chan_FSK.datarate");

297 
	`MSG
("INFO: FSK ch™√»íabÀd,Ñadiÿ%ò£À˘ed, IF %òHz, %u Hz b™dwidth, %u bp†d©¨©e\n", 
ifc⁄f
.
rf_chaö
, ifc⁄f.
‰eq_hz
, 
bw
, ifc⁄f.
d©¨©e
);

299 i‡(
	`lgw_rxif_£tc⁄f
(9, 
ifc⁄f
Ë!
LGW_HAL_SUCCESS
) {

300 
	`MSG
("ERROR: invalid configuration for FSK channel\n");

304 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

306 
	}
}

308 
	$∑r£_g©eway_c⁄figuøti⁄
(c⁄° * 
c⁄f_fûe
) {

309 c⁄° 
c⁄f_obj
[] = "gateway_conf";

310 
JSON_VÆue
 *
roŸ_vÆ
;

311 
JSON_Obje˘
 *
roŸ
 = 
NULL
;

312 
JSON_Obje˘
 *
c⁄f
 = 
NULL
;

313 c⁄° *
°r
;

314 
uŒ
 = 0;

317 
roŸ_vÆ
 = 
	`js⁄_∑r£_fûe_wôh_commíts
(
c⁄f_fûe
);

318 
roŸ
 = 
	`js⁄_vÆue_gë_obje˘
(
roŸ_vÆ
);

319 i‡(
roŸ
 =
NULL
) {

320 
	`MSG
("ERROR: %†idÇŸá vÆid JSON fûe\n", 
c⁄f_fûe
);

321 
	`exô
(
EXIT_FAILURE
);

323 
c⁄f
 = 
	`js⁄_obje˘_gë_obje˘
(
roŸ
, 
c⁄f_obj
);

324 i‡(
c⁄f
 =
NULL
) {

325 
	`MSG
("INFO: %†d€†nŸ c⁄èöá JSON obje˘Çamed %s\n", 
c⁄f_fûe
, 
c⁄f_obj
);

328 
	`MSG
("INFO: %†d€†c⁄èöá JSON obje˘Çamed %s,Ö¨sög g©ewayÖ¨amëîs\n", 
c⁄f_fûe
, 
c⁄f_obj
);

332 
°r
 = 
	`js⁄_obje˘_gë_°rög
(
c⁄f
, "gateway_ID");

333 i‡(
°r
 !
NULL
) {

334 
	`ssˇnf
(
°r
, "%Œx", &
uŒ
);

335 
lgwm
 = 
uŒ
;

336 
	`MSG
("INFO: g©eway MACáddªs†i†c⁄figuªdÅÿ%016ŒX\n", 
uŒ
);

339 
	`js⁄_vÆue_‰ì
(
roŸ_vÆ
);

341 
	}
}

343 
	$›í_log
() {

344 
i
;

345 
iso_d©e
[20];

347 
	`°r·ime
(
iso_d©e
,
	`ARRAY_SIZE
(iso_d©e),"%Y%m%dT%H%M%SZ",
	`gmtime
(&
now_time
));

348 
log_°¨t_time
 = 
now_time
;

350 
	`•rötf
(
log_fûe_«me
, "pkéog_%s_%s.csv", 
lgwm_°r
, 
iso_d©e
);

351 
log_fûe
 = 
	`f›í
(
log_fûe_«me
, "a");

352 i‡(
log_fûe
 =
NULL
) {

353 
	`MSG
("ERROR: impossibÀÅÿ¸óãÜog fûê%s\n", 
log_fûe_«me
);

354 
	`exô
(
EXIT_FAILURE
);

357 
i
 = 
	`Ârötf
(
log_fûe
, "\"gateway ID\",\"node MAC\",\"UTCÅimestamp\",\"us count\",\"frequency\",\"RF chain\",\"RX chain\",\"status\",\"size\",\"modulation\",\"bandwidth\",\"datarate\",\"coderate\",\"RSSI\",\"SNR\",\"payload\"\n");

358 i‡(
i
 < 0) {

359 
	`MSG
("ERROR: impossibÀÅÿwrôêtÿlog fûê%s\n", 
log_fûe_«me
);

360 
	`exô
(
EXIT_FAILURE
);

363 
	`MSG
("INFO: Now wrôögÅÿlog fûê%s\n", 
log_fûe_«me
);

365 
	}
}

368 
	$ußge
() {

369 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n\n", 
	`lgw_vîsi⁄_öfo
());

370 
	`¥ötf
( "Available options:\n");

371 
	`¥ötf
( " -hÖrintÅhis help\n");

372 
	`¥ötf
( " -r <int>ÑotateÜog fileÉvery N seconds (-1 disableÜogÑotation)\n");

373 
	}
}

378 
	$maö
(
¨gc
, **
¨gv
)

380 
i
, 
j
;

381 
time•ec
 
¶ìp_time
 = {0, 3000000};

384 
log_rŸ©e_öãrvÆ
 = 3600;

385 
time_check
 = 0;

386 
pkt_ö_log
 = 0;

389 c⁄° 
globÆ_c⁄f_‚ame
[] = "global_conf.json";

390 c⁄° 
loˇl_c⁄f_‚ame
[] = "local_conf.json";

391 c⁄° 
debug_c⁄f_‚ame
[] = "debug_conf.json";

394 
lgw_pkt_rx_s
 
rxpkt
[16];

395 
lgw_pkt_rx_s
 *
p
;

396 
nb_pkt
;

399 
time•ec
 
„tch_time
;

400 
„tch_time°amp
[30];

401 
tm
 * 
x
;

404 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "hr:")) != -1) {

405 
i
) {

407 
	`ußge
();

408  
EXIT_FAILURE
;

412 
log_rŸ©e_öãrvÆ
 = 
	`©oi
(
›èrg
);

413 i‡((
log_rŸ©e_öãrvÆ
 == 0) || (log_rotate_interval < -1)) {

414 
	`MSG
( "ERROR: Invalidárgument for -r option\n");

415  
EXIT_FAILURE
;

420 
	`MSG
("ERROR:árgumentÖarsing use -h option for help\n");

421 
	`ußge
();

422  
EXIT_FAILURE
;

427 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

428 
siga˘
.
ß_Êags
 = 0;

429 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

430 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

431 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

432 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

435 i‡(
	`ac˚ss
(
debug_c⁄f_‚ame
, 
R_OK
) == 0) {

437 
	`MSG
("INFO: found debug c⁄figuøti⁄ fûê%s, othî c⁄figuøti⁄ fûe†wû»bêign‹ed\n", 
debug_c⁄f_‚ame
);

438 
	`∑r£_SX1301_c⁄figuøti⁄
(
debug_c⁄f_‚ame
);

439 
	`∑r£_g©eway_c⁄figuøti⁄
(
debug_c⁄f_‚ame
);

440 } i‡(
	`ac˚ss
(
globÆ_c⁄f_‚ame
, 
R_OK
) == 0) {

442 
	`MSG
("INFO: found globÆ c⁄figuøti⁄ fûê%s,ÅryögÅÿ∑r£ it\n", 
globÆ_c⁄f_‚ame
);

443 
	`∑r£_SX1301_c⁄figuøti⁄
(
globÆ_c⁄f_‚ame
);

444 
	`∑r£_g©eway_c⁄figuøti⁄
(
globÆ_c⁄f_‚ame
);

445 i‡(
	`ac˚ss
(
loˇl_c⁄f_‚ame
, 
R_OK
) == 0) {

446 
	`MSG
("INFO: foundÜoˇ»c⁄figuøti⁄ fûê%s,ÅryögÅÿ∑r£ it\n", 
loˇl_c⁄f_‚ame
);

447 
	`∑r£_SX1301_c⁄figuøti⁄
(
loˇl_c⁄f_‚ame
);

448 
	`∑r£_g©eway_c⁄figuøti⁄
(
loˇl_c⁄f_‚ame
);

450 } i‡(
	`ac˚ss
(
loˇl_c⁄f_‚ame
, 
R_OK
) == 0) {

452 
	`MSG
("INFO: foundÜoˇ»c⁄figuøti⁄ fûê%s,ÅryögÅÿ∑r£ it\n", 
loˇl_c⁄f_‚ame
);

453 
	`∑r£_SX1301_c⁄figuøti⁄
(
loˇl_c⁄f_‚ame
);

454 
	`∑r£_g©eway_c⁄figuøti⁄
(
loˇl_c⁄f_‚ame
);

456 
	`MSG
("ERROR: faûedÅÿfödány c⁄figuøti⁄ fûê«med %s, %†‹ %s\n", 
globÆ_c⁄f_‚ame
, 
loˇl_c⁄f_‚ame
, 
debug_c⁄f_‚ame
);

457  
EXIT_FAILURE
;

461 
i
 = 
	`lgw_°¨t
();

462 i‡(
i
 =
LGW_HAL_SUCCESS
) {

463 
	`MSG
("INFO: concentrator started,Öacket canÇow beÑeceived\n");

465 
	`MSG
("ERROR: failedÅo startÅhe concentrator\n");

466  
EXIT_FAILURE
;

470 
	`•rötf
(
lgwm_°r
, "%08X%08X", (
uöt32_t
)(
lgwm
 >> 32), (uint32_t)(lgwm & 0xFFFFFFFF));

473 
	`time
(&
now_time
);

474 
	`›í_log
();

477 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

479 
nb_pkt
 = 
	`lgw_ª˚ive
(
	`ARRAY_SIZE
(
rxpkt
),Ñxpkt);

480 i‡(
nb_pkt
 =
LGW_HAL_ERROR
) {

481 
	`MSG
("ERROR: failedÖacket fetch,Éxiting\n");

482  
EXIT_FAILURE
;

483 } i‡(
nb_pkt
 == 0) {

484 
	`˛ock_«no¶ìp
(
CLOCK_MONOTONIC
, 0, &
¶ìp_time
, 
NULL
);

487 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
„tch_time
);

488 
x
 = 
	`gmtime
(&(
„tch_time
.
tv_£c
));

489 
	`•rötf
(
„tch_time°amp
,"%04i-%02i-%02ò%02i:%02i:%02i.%03liZ",(
x
->
tm_yór
)+1900,(x->
tm_m⁄
)+1,x->
tm_mday
,x->
tm_hour
,x->
tm_mö
,x->
tm_£c
,(
„tch_time
.
tv_n£c
)/1000000);

493 
i
=0; i < 
nb_pkt
; ++i) {

494 
p
 = &
rxpkt
[
i
];

497 
	`Ârötf
(
log_fûe
, "\"%08X%08X\",", (
uöt32_t
)(
lgwm
 >> 32), (uint32_t)(lgwm & 0xFFFFFFFF));

500 
	`Âuts
("\"\",", 
log_fûe
);

503 
	`Ârötf
(
log_fûe
, "\"%s\",", 
„tch_time°amp
);

507 
	`Ârötf
(
log_fûe
, "%10u,", 
p
->
cou¡_us
);

510 
	`Ârötf
(
log_fûe
, "%10u,", 
p
->
‰eq_hz
);

513 
	`Ârötf
(
log_fûe
, "%u,", 
p
->
rf_chaö
);

516 
	`Ârötf
(
log_fûe
, "%2d,", 
p
->
if_chaö
);

519 
p
->
°©us
) {

520 
STAT_CRC_OK
: 
	`Âuts
("\"CRC_OK\" ,", 
log_fûe
); ;

521 
STAT_CRC_BAD
: 
	`Âuts
("\"CRC_BAD\",", 
log_fûe
); ;

522 
STAT_NO_CRC
: 
	`Âuts
("\"NO_CRC\" ,", 
log_fûe
); ;

523 
STAT_UNDEFINED
: 
	`Âuts
("\"UNDEF\" ,", 
log_fûe
); ;

524 : 
	`Âuts
("\"ERR\" ,", 
log_fûe
);

528 
	`Ârötf
(
log_fûe
, "%3u,", 
p
->
size
);

531 
p
->
moduœti⁄
) {

532 
MOD_LORA
: 
	`Âuts
("\"LORA\",", 
log_fûe
); ;

533 
MOD_FSK
: 
	`Âuts
("\"FSK\" ,", 
log_fûe
); ;

534 : 
	`Âuts
("\"ERR\" ,", 
log_fûe
);

538 
p
->
b™dwidth
) {

539 
BW_500KHZ
: 
	`Âuts
("500000,", 
log_fûe
); ;

540 
BW_250KHZ
: 
	`Âuts
("250000,", 
log_fûe
); ;

541 
BW_125KHZ
: 
	`Âuts
("125000,", 
log_fûe
); ;

542 
BW_62K5HZ
: 
	`Âuts
("62500 ,", 
log_fûe
); ;

543 
BW_31K2HZ
: 
	`Âuts
("31200 ,", 
log_fûe
); ;

544 
BW_15K6HZ
: 
	`Âuts
("15600 ,", 
log_fûe
); ;

545 
BW_7K8HZ
: 
	`Âuts
("7800 ,", 
log_fûe
); ;

546 
BW_UNDEFINED
: 
	`Âuts
("0 ,", 
log_fûe
); ;

547 : 
	`Âuts
("-1 ,", 
log_fûe
);

551 i‡(
p
->
moduœti⁄
 =
MOD_LORA
) {

552 
p
->
d©¨©e
) {

553 
DR_LORA_SF7
: 
	`Âuts
("\"SF7\" ,", 
log_fûe
); ;

554 
DR_LORA_SF8
: 
	`Âuts
("\"SF8\" ,", 
log_fûe
); ;

555 
DR_LORA_SF9
: 
	`Âuts
("\"SF9\" ,", 
log_fûe
); ;

556 
DR_LORA_SF10
: 
	`Âuts
("\"SF10\" ,", 
log_fûe
); ;

557 
DR_LORA_SF11
: 
	`Âuts
("\"SF11\" ,", 
log_fûe
); ;

558 
DR_LORA_SF12
: 
	`Âuts
("\"SF12\" ,", 
log_fûe
); ;

559 : 
	`Âuts
("\"ERR\" ,", 
log_fûe
);

561 } i‡(
p
->
moduœti⁄
 =
MOD_FSK
) {

562 
	`Ârötf
(
log_fûe
, "\"%6u\",", 
p
->
d©¨©e
);

564 
	`Âuts
("\"ERR\" ,", 
log_fûe
);

568 
p
->
codî©e
) {

569 
CR_LORA_4_5
: 
	`Âuts
("\"4/5\",", 
log_fûe
); ;

570 
CR_LORA_4_6
: 
	`Âuts
("\"2/3\",", 
log_fûe
); ;

571 
CR_LORA_4_7
: 
	`Âuts
("\"4/7\",", 
log_fûe
); ;

572 
CR_LORA_4_8
: 
	`Âuts
("\"1/2\",", 
log_fûe
); ;

573 
CR_UNDEFINED
: 
	`Âuts
("\"\" ,", 
log_fûe
); ;

574 : 
	`Âuts
("\"ERR\",", 
log_fûe
);

578 
	`Ârötf
(
log_fûe
, "%+.0f,", 
p
->
rssi
);

581 
	`Ârötf
(
log_fûe
, "%+5.1f,", 
p
->
¢r
);

584 
	`Âuts
("\"", 
log_fûe
);

585 
j
 = 0; j < 
p
->
size
; ++j) {

586 i‡((
j
 > 0Ë&& (j%4 =0)Ë
	`Âuts
("-", 
log_fûe
);

587 
	`Ârötf
(
log_fûe
, "%02X", 
p
->
∑ylﬂd
[
j
]);

591 
	`Âuts
("\"\n", 
log_fûe
);

592 
	`fÊush
(
log_fûe
);

593 ++
pkt_ö_log
;

597 ++
time_check
;

598 i‡(
time_check
 >= 8) {

599 
time_check
 = 0;

600 
	`time
(&
now_time
);

601 i‡(
	`dif·ime
(
now_time
, 
log_°¨t_time
Ë> 
log_rŸ©e_öãrvÆ
) {

602 
	`f˛o£
(
log_fûe
);

603 
	`MSG
("INFO:Üog fûê%†˛o£d, %luÖackë(sËªc‹ded\n", 
log_fûe_«me
, 
pkt_ö_log
);

604 
pkt_ö_log
 = 0;

605 
	`›í_log
();

610 i‡(
exô_sig
 == 1) {

612 
i
 = 
	`lgw_°›
();

613 i‡(
i
 =
LGW_HAL_SUCCESS
) {

614 
	`MSG
("INFO: concentrator stopped successfully\n");

616 
	`MSG
("WARNING: failedÅo stop concentrator successfully\n");

618 
	`f˛o£
(
log_fûe
);

619 
	`MSG
("INFO:Üog fûê%†˛o£d, %luÖackë(sËªc‹ded\n", 
log_fûe_«me
, 
pkt_ö_log
);

622 
	`MSG
("INFO: ExitingÖacketÜoggerÖrogram\n");

623  
EXIT_SUCCESS
;

624 
	}
}

	@util_sink/src/util_sink.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dio.h
>

30 
	~<°rög.h
>

31 
	~<time.h
>

32 
	~<°dlib.h
>

33 
	~<î∫o.h
>

35 
	~<sys/sockë.h
>

36 
	~<√töë/ö.h
>

37 
	~<¨∑/öë.h
>

38 
	~<√tdb.h
>

43 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

44 
	#STRINGIFY
(
x
Ë#x

	)

45 
	#STR
(
x
Ë
	`STRINGIFY
(x)

	)

46 
	#MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgsË

	)

51 
	$maö
(
¨gc
, **
¨gv
)

53 
i
;

56 
sock
;

57 
addröfo
 
höts
;

58 
addröfo
 *
ªsu…
;

59 
addröfo
 *
q
;

60 
ho°_«me
[64];

61 
p‹t_«me
[64];

64 
sockaddr_°‹age
 
di°_addr
;

65 
sockÀn_t
 
addr_Àn
 =  
di°_addr
;

66 
uöt8_t
 
d©abuf
[4096];

67 
byã_nb
;

70 i‡(
¨gc
 != 2) {

71 
	`MSG
("Usage: util_sink <portÇumber>\n");

72 
	`exô
(
EXIT_FAILURE
);

76 
	`mem£t
(&
höts
, 0,  hints);

77 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

78 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

79 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

82 
i
 = 
	`gëaddröfo
(
NULL
, 
¨gv
[1], &
höts
, &
ªsu…
);

83 i‡(
i
 != 0) {

84 
	`MSG
("ERROR: gëaddröfÿªtu∫ed %s\n", 
	`gai_°ªº‹
(
i
));

85 
	`exô
(
EXIT_FAILURE
);

89 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

90 
sock
 = 
	`sockë
(
q
->
ai_Ámûy
, q->
ai_sockty≥
,q->
ai_¥Ÿocﬁ
);

91 i‡(
sock
 == -1) {

94 
i
 = 
	`böd
(
sock
, 
q
->
ai_addr
, q->
ai_addæí
);

95 i‡(
i
 == -1) {

96 
	`shutdown
(
sock
, 
SHUT_RDWR
);

103 i‡(
q
 =
NULL
) {

104 
	`MSG
("ERROR: failedÅo open socket orÅo bindÅo it\n");

105 
i
 = 1;

106 
q
=
ªsu…
; q!=
NULL
; q=q->
ai_√xt
) {

107 
	`gë«meöfo
(
q
->
ai_addr
, q->
ai_addæí
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

108 
	`MSG
("ªsu… %òho°:%†£rvi˚:%s\n", 
i
, 
ho°_«me
, 
p‹t_«me
);

109 ++
i
;

111 
	`exô
(
EXIT_FAILURE
);

113 
	`MSG
("INFO: utû_sökÜi°íög o¿p‹à%s\n", 
¨gv
[1]);

114 
	`‰ìaddröfo
(
ªsu…
);

117 
byã_nb
 = 
	`ªcv‰om
(
sock
, 
d©abuf
,  d©abuf, 0, (
sockaddr
 *)&
di°_addr
, &
addr_Àn
);

118 i‡(
byã_nb
 == -1) {

119 
	`MSG
("ERROR:Ñecv‰omÑëu∫ed %†\n", 
	`°ªº‹
(
î∫o
));

120 
	`exô
(
EXIT_FAILURE
);

122 
	`gë«meöfo
((
sockaddr
 *)&
di°_addr
, 
addr_Àn
, 
ho°_«me
,  ho°_«me, 
p‹t_«me
, Ö‹t_«me, 
NI_NUMERICHOST
);

123 
	`¥ötf
("GŸÖackë from ho° %†p‹à%s, %òbyã†l⁄g\n", 
ho°_«me
, 
p‹t_«me
, 
byã_nb
);

125 
	}
}

	@util_spectral_scan/src/util_spectral_scan.c

22 #i‡
__STDC_VERSION__
 >= 199901L

23 
	#_XOPEN_SOURCE
 600

	)

25 
	#_XOPEN_SOURCE
 500

	)

28 
	~<°döt.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

34 
	~"l‹agw_aux.h
"

35 
	~"l‹agw_ªg.h
"

36 
	~"l‹agw_hÆ.h
"

37 
	~"l‹agw_ødio.h
"

38 
	~"l‹agw_Âga.h
"

43 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 
	#DEFAULT_START_FREQ
 863000000

	)

46 
	#DEFAULT_STOP_FREQ
 870000000

	)

47 
	#DEFAULT_STEP_FREQ
 200000

	)

48 
	#DEFAULT_RSSI_PTS
 65535

	)

49 
	#DEFAULT_CHAN_BW
 
LGW_SX127X_RXBW_62K5_HZ


	)

50 
	#DEFAULT_LOG_NAME
 "rssi_hi°ogøm"

	)

51 
	#DEFAULT_SX127X_RSSI_OFFSET
 -4

	)

53 
	#RSSI_RANGE
 256

	)

55 
	#MAX_FREQ
 1000000000

	)

56 
	#MIN_FREQ
 800000000

	)

57 
	#MIN_STEP_FREQ
 5000

	)

59 
	#FPGA_FEATURE_SPECTRAL_SCAN
 1

	)

60 
	#FPGA_FEATURE_LBT
 2

	)

63 
	#LBT_DEFAULT_RSSI_PTS
 129*129

	)

64 
	#LBT_MIN_STEP_FREQ
 100000

	)

72 
	$maö
–
¨gc
, ** 
¨gv
 )

74 
i
, 
j
, 
k
;

75 
x
;

76 
öt32_t
 
ªg_vÆ
;

79 
¨g_lf
[3] = {0,0,0};

80 
¨g_u
 = 0;

81 
¨g_i
 = 0;

82 
¨g_s
[64];

85 
uöt32_t
 
öô_‰eq
 = 
DEFAULT_START_FREQ
;

86 
uöt32_t
 
°¨t_‰eq
 = 
DEFAULT_START_FREQ
;

87 
uöt32_t
 
°›_‰eq
 = 
DEFAULT_STOP_FREQ
;

88 
uöt32_t
 
°ï_‰eq
 = 
DEFAULT_STEP_FREQ
;

89 
uöt16_t
 
rssi_±s
 = 
DEFAULT_RSSI_PTS
;

90 
öt8_t
 
rssi_off£t
 = 
DEFAULT_SX127X_RSSI_OFFSET
;

91 
lgw_sx127x_rxbw_e
 
ch™√l_bw_khz
 = 
DEFAULT_CHAN_BW
;

92 
log_fûe_«me
[64] = 
DEFAULT_LOG_NAME
;

93 
FILE
 * 
log_fûe
 = 
NULL
;

96 
boﬁ
 
lbt_suµ‹t
 = 
Ál£
;

97 
‰eq_idx
;

98 
‰eq_nb
;

99 
uöt64_t
 
‰eq_ªg
;

100 
uöt32_t
 
‰eq
;

101 
uöt8_t
 
ªad_bur°
[
RSSI_RANGE
*2];

102 
uöt16_t
 
rssi_hi°o
;

103 
uöt16_t
 
rssi_cumu
;

104 
rssi_thªsh
[] = {0.1,0.3,0.5,0.8,1};

107 (
i
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hf:n:b:l:o:")) != -1) {

108 
i
) {

110 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

111 
	`¥ötf
(" -f <float>:<float>:<float> Frequency vectorÅo scan in MHz (start:step:stop)\n");

112 
	`¥ötf
(" sèπ>%3.3‡°ï>%1.3‡°›<%3.3f\n", 
MIN_FREQ
/1e6, 
MIN_STEP_FREQ
/1e6, 
MAX_FREQ
/1e6);

113 
	`¥ötf
(" -b <uint> Channel bandwidth in KHz [25,50,100,125,200,250,500]\n");

114 
	`¥ötf
(" -n <uint> TotalÇumber of RSSIÖoints [1..65535]\n");

115 
	`¥ötf
(" -o <int> Offset in dBÅo beáppliedÅoÅhe SX127x RSSI [-128..127]\n");

116 
	`¥ötf
(" -l <char> Log fileÇame\n");

117 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

118  
EXIT_SUCCESS
;

121 
j
 = 
	`ssˇnf
(
›èrg
, "%lf:%lf:%lf", &
¨g_lf
[0], &arg_lf[1], &arg_lf[2]);

122 i‡((
j
!=3Ë|| (
¨g_lf
[0] < 
MIN_FREQ
/1e6Ë|| (¨g_lf[0] > 
MAX_FREQ
/1e6Ë|| (¨g_lf[1] < 
MIN_STEP_FREQ
/1e6) || (arg_lf[2] < MIN_FREQ/1e6) || (arg_lf[2] > MAX_FREQ/1e6)) {

123 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. -h for help.\n");

124  
EXIT_FAILURE
;

126 
°¨t_‰eq
 = (
uöt32_t
)((
¨g_lf
[0] * 1e6) + 0.5);

127 
°ï_‰eq
 = (
uöt32_t
)((
¨g_lf
[1] * 1e6) + 0.5);

128 
°›_‰eq
 = (
uöt32_t
)((
¨g_lf
[2] * 1e6) + 0.5);

133 
j
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

134 i‡(
j
 != 1) {

135 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. -h for help.\n");

136  
EXIT_FAILURE
;

138 
¨g_u
) {

140 
ch™√l_bw_khz
 = 
LGW_SX127X_RXBW_12K5_HZ
;

143 
ch™√l_bw_khz
 = 
LGW_SX127X_RXBW_25K_HZ
;

146 
ch™√l_bw_khz
 = 
LGW_SX127X_RXBW_50K_HZ
;

149 
ch™√l_bw_khz
 = 
LGW_SX127X_RXBW_62K5_HZ
;

152 
ch™√l_bw_khz
 = 
LGW_SX127X_RXBW_100K_HZ
;

155 
ch™√l_bw_khz
 = 
LGW_SX127X_RXBW_125K_HZ
;

158 
ch™√l_bw_khz
 = 
LGW_SX127X_RXBW_250K_HZ
;

161 
	`¥ötf
("ERROR:árgumentÖarsing of -bárgument. -h for help.\n");

162  
EXIT_FAILURE
;

168 
j
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

169 i‡((
j
 !1Ë|| (
¨g_u
 < 1) || (arg_u > 65535)) {

170 
	`¥ötf
("ERROR:árgumentÖarsing of -nárgument. -h for help.\n");

171  
EXIT_FAILURE
;

173 
rssi_±s
 = (
uöt16_t
)
¨g_u
;

178 
j
 = 
	`ssˇnf
(
›èrg
, "%i", &
¨g_i
);

179 i‡((
j
 !1Ë|| (
¨g_i
 < -128) || (arg_i > 127)) {

180 
	`¥ötf
("ERROR:árgumentÖarsing of -oárgument. -h for help.\n");

181  
EXIT_FAILURE
;

183 
rssi_off£t
 = (
öt8_t
)
¨g_i
;

188 
j
 = 
	`ssˇnf
(
›èrg
, "%s", 
¨g_s
);

189 i‡(
j
 != 1) {

190 
	`¥ötf
("ERROR:árgumentÖarsing of -lárgument. -h for help.\n");

191  
EXIT_FAILURE
;

193 
	`•rötf
(
log_fûe_«me
, "%s", 
¨g_s
);

198 
	`¥ötf
("ERROR:árgumentÖarsing options. -h for help.\n");

199  
EXIT_FAILURE
;

204 
	`¥ötf
("+++ Start spectral scan of LoRa gateway channels +++\n");

206 
x
 = 
	`lgw_c⁄√˘
(
åue
, 0);

207 if(
x
 != 0) {

208 
	`¥ötf
("ERROR: FailedÅo connectÅo FPGA\n");

209  
EXIT_FAILURE
;

213 
	`lgw_Âga_ªg_r
(
LGW_FPGA_FEATURE
, &
ªg_vÆ
);

214 i‡(
	`TAKE_N_BITS_FROM
((
uöt8_t
)
ªg_vÆ
, 
FPGA_FEATURE_SPECTRAL_SCAN
, 1Ë!
åue
) {

215 
	`¥ötf
("ERROR: S≥˘ø»Sˇ¿i†nŸ suµ‹ãd (0x%x)\n", (
uöt8_t
)
ªg_vÆ
);

216  
EXIT_FAILURE
;

220 
	`lgw_Âga_ªg_r
(
LGW_FPGA_FEATURE
, &
ªg_vÆ
);

221 i‡(
	`TAKE_N_BITS_FROM
((
uöt8_t
)
ªg_vÆ
, 
FPGA_FEATURE_LBT
, 1Ë=
åue
) {

222 
	`¥ötf
("WARNING: The FPGA supports LBT, soÑunning spectral scan with specific constraints\n");

223 
	`¥ötf
(" => CheckÅheÖarameters summary below\n");

225 
	`lgw_Âga_ªg_r
(
LGW_FPGA_LBT_INITIAL_FREQ
, &
ªg_vÆ
);

226 
ªg_vÆ
) {

228 
öô_‰eq
 = 915000000;

231 
öô_‰eq
 = 863000000;

234 
	`¥ötf
("ERROR: inô fªquícy %d i†nŸ suµ‹ãd\n", 
ªg_vÆ
);

235  
EXIT_FAILURE
;

239 i‡(
°¨t_‰eq
 < 
öô_‰eq
) {

240 
	`¥ötf
("ERROR: sèπ fªquícy %d i†nŸ suµ‹ãd, should bê>=%d\n", 
°¨t_‰eq
, 
öô_‰eq
);

241  
EXIT_FAILURE
;

243 i‡(
°›_‰eq
 > (
öô_‰eq
 + 255*
LBT_MIN_STEP_FREQ
)) {

244 
	`¥ötf
("ERROR: st› fªquícy %d i†nŸ suµ‹ãd, should bê<%d\n", 
°›_‰eq
, 
öô_‰eq
 + 255*
LBT_MIN_STEP_FREQ
);

245  
EXIT_FAILURE
;

247 i‡(
°ï_‰eq
 < 
LBT_MIN_STEP_FREQ
) {

248 
	`¥ötf
("ERROR: sã∞‰equícy %d i†nŸ suµ‹ãd, should bê>=%d\n", 
°ï_‰eq
, 
LBT_MIN_STEP_FREQ
);

249  
EXIT_FAILURE
;

252 
°ï_‰eq
 = (°ï_‰eq / 
LBT_MIN_STEP_FREQ
) * LBT_MIN_STEP_FREQ;

256 
rssi_±s
 = 
LBT_DEFAULT_RSSI_PTS
;

259 
lbt_suµ‹t
 = 
åue
;

262 
x
 = 
	`lgw_disc⁄√˘
();

263 if(
x
 != 0) {

264 
	`¥ötf
("ERROR: FailedÅo disconnect from FPGA\n");

265  
EXIT_FAILURE
;

267 
x
 = 
	`lgw_c⁄√˘
(
Ál£
, 
LGW_DEFAULT_NOTCH_FREQ
);

268 if(
x
 != 0) {

269 
	`¥ötf
("ERROR: FailedÅo connectÅo FPGA\n");

270  
EXIT_FAILURE
;

273 
x
 = 
	`lgw_Âga_ªg_w
(
LGW_FPGA_HISTO_NB_READ
, 
rssi_±s
-1);

274 if–
x
 !
LGW_REG_SUCCESS
 )

276 
	`¥ötf
( "ERROR: FailedÅo configure FPGA\n" );

277  
EXIT_FAILURE
;

281 
‰eq_ªg
 = ((
uöt64_t
)
°¨t_‰eq
 << 19) / (uint64_t)32000000;

282 
	`lgw_Âga_ªg_w
(
LGW_FPGA_HISTO_SCAN_FREQ
, (
öt32_t
)
‰eq_ªg
);

286 
	`°rˇt
(
log_fûe_«me
,".csv");

287 
log_fûe
 = 
	`f›í
(
log_fûe_«me
, "w");

288 i‡(
log_fûe
 =
NULL
) {

289 
	`¥ötf
("ERROR: impossibÀÅÿ¸óãÜog fûê%s\n", 
log_fûe_«me
);

290  
EXIT_FAILURE
;

292 
	`¥ötf
("WrôögÅÿfûe: %s\n", 
log_fûe_«me
);

295 
‰eq_nb
 = ()((
°›_‰eq
 - 
°¨t_‰eq
Ë/ 
°ï_‰eq
) + 1;

296 
	`¥ötf
("Sˇ¬ög fªquícõs:\n°¨t: %d Hz\n°› : %d Hz\n°ï : %d Hz\¬b : %d\n", 
°¨t_‰eq
, 
°›_‰eq
, 
°ï_‰eq
, 
‰eq_nb
);

299 
j
 = 0; j < 
‰eq_nb
; j++) {

301 
‰eq
 = 
°¨t_‰eq
 + 
j
 * 
°ï_‰eq
;

302 
	`¥ötf
("%d", 
‰eq
);

304 i‡(
lbt_suµ‹t
 =
Ál£
) {

306 
x
 = 
	`lgw_£tup_sx127x
(
‰eq
, 
MOD_FSK
, 
ch™√l_bw_khz
, 
rssi_off£t
);

307 if–
x
 != 0 )

309 
	`¥ötf
( "ERROR: SX127x setup failed\n" );

310  
EXIT_FAILURE
;

314 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_FEATURE_START
, 1);

321 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_CLEAR_HISTO_MEM
, 1);

325 
	`waô_ms
(10);

326 
	`lgw_Âga_ªg_r
(
LGW_FPGA_STATUS
, &
ªg_vÆ
);

328 (
	`TAKE_N_BITS_FROM
((
uöt8_t
)
ªg_vÆ
, 0, 5)) != 1);

331 i‡(
lbt_suµ‹t
 =
Ál£
) {

333 
‰eq_ªg
 = ((
uöt64_t
)
‰eq
 << 19) / (uint64_t)32000000;

334 
	`lgw_Âga_ªg_w
(
LGW_FPGA_HISTO_SCAN_FREQ
, (
öt32_t
)
‰eq_ªg
);

337 
‰eq_idx
 = (
‰eq
 - 
öô_‰eq
Ë/ 
LBT_MIN_STEP_FREQ
;

338 
	`¥ötf
(" (idx=%iË", 
‰eq_idx
);

339 
	`lgw_Âga_ªg_w
(
LGW_FPGA_SCAN_FREQ_OFFSET
, 
‰eq_idx
);

343 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_CLEAR_HISTO_MEM
, 0);

347 
	`waô_ms
(1000);

348 
	`lgw_Âga_ªg_r
(
LGW_FPGA_STATUS
, &
ªg_vÆ
);

350 (
	`TAKE_N_BITS_FROM
((
uöt8_t
)
ªg_vÆ
, 5, 1)) != 1);

352 i‡(
lbt_suµ‹t
 =
Ál£
) {

354 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_FEATURE_START
, 0);

361 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_ACCESS_HISTO_MEM
, 1);

362 
	`lgw_Âga_ªg_w
(
LGW_FPGA_HISTO_RAM_ADDR
, 0);

363 
	`lgw_Âga_ªg_rb
(
LGW_FPGA_HISTO_RAM_DATA
, 
ªad_bur°
, 
RSSI_RANGE
*2);

364 
	`lgw_Âga_ªg_w
(
LGW_FPGA_CTRL_ACCESS_HISTO_MEM
, 0);

367 
	`Ârötf
(
log_fûe
, "%d", 
‰eq
);

368 
rssi_cumu
 = 0;

369 
k
 = 0;

370 
i
 = 0; i < 
RSSI_RANGE
; i++) {

371 
rssi_hi°o
 = (
uöt16_t
)
ªad_bur°
[2*
i
] | ((uint16_t)read_burst[2*i+1] << 8);

372 
	`Ârötf
(
log_fûe
, ",%.1f,%d", -
i
/2.0, 
rssi_hi°o
);

373 
rssi_cumu
 +
rssi_hi°o
;

374 i‡(
rssi_cumu
 > 
rssi_±s
) {

375 
	`¥ötf
(" - WARNING:Çumbî o‡RSSIÖoöt†highîÅh™Éx≥˘ed (%u,%u)", 
rssi_cumu
, 
rssi_±s
);

376 
rssi_cumu
 = 
rssi_±s
;

378 i‡(
rssi_cumu
 > 
rssi_thªsh
[
k
]*
rssi_±s
) {

379 
	`¥ötf
(" %d%%<%.1f", (
uöt16_t
)(
rssi_thªsh
[
k
]*100), -
i
/2.0);

380 
k
++;

383 
	`Ârötf
(
log_fûe
, "\n");

384 
	`¥ötf
("\n");

386 
	`f˛o£
(
log_fûe
);

389 
x
 = 
	`lgw_disc⁄√˘
();

390 if(
x
 != 0) {

391 
	`¥ötf
("ERROR: FailedÅo disconnect FPGA\n");

392  
EXIT_FAILURE
;

395 
	`¥ötf
("+++ Exiting Spectral scanÖrogram +++\n");

397  
EXIT_SUCCESS
;

398 
	}
}

	@util_spi_stress/src/util_spi_stress.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

31 
	~<sig«l.h
>

32 
	~<uni°d.h
>

33 
	~<°dlib.h
>

35 
	~"l‹agw_ªg.h
"

40 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

41 
	#MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgsË

	)

46 
	#VERS
 103

	)

47 
	#READS_WHEN_ERROR
 16

	)

48 
	#BUFF_SIZE
 1024

	)

49 
	#DEFAULT_TX_NOTCH_FREQ
 129E3

	)

55 
siga˘i⁄
 
	gsiga˘
;

56 
	gexô_sig
 = 0;

57 
	gquô_sig
 = 0;

62 
sig_h™dÀr
(
sigio
);

64 
ußge
 ();

69 
	$sig_h™dÀr
(
sigio
) {

70 i‡(
sigio
 =
SIGQUIT
) {

71 
quô_sig
 = 1;;

72 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

73 
exô_sig
 = 1;

75 
	}
}

78 
	$ußge
() {

79 
	`MSG
( "Available options:\n");

80 
	`MSG
( " -hÖrintÅhis help\n");

81 
	`MSG
( " -t <int> specify whichÅest you wantÅoÑun (1-4)\n");

82 
	}
}

87 
	$maö
(
¨gc
, **
¨gv
)

89 
i
;

90 
xi
 = 0;

93 
ã°_numbî
 = 1;

94 
cy˛e_numbî
 = 0;

95 
ª≥©s_≥r_cy˛e
 = 1000;

96 
boﬁ
 
îr‹
 = 
Ál£
;

99 
öt32_t
 
ã°_vÆue
;

100 
öt32_t
 
ªad_vÆue
;

101 
öt32_t
 
rb1
, 
rb2
, 
rb3
;

104 
öt32_t
 
ã°_addr
;

105 
uöt8_t
 
ã°_buff
[
BUFF_SIZE
];

106 
uöt8_t
 
ªad_buff
[
BUFF_SIZE
];

109 (
i
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "ht:")) != -1) {

110 
i
) {

112 
	`ußge
();

113  
EXIT_FAILURE
;

117 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

118 i‡((
i
 !1Ë|| (
xi
 < 1) || (xi > 4)) {

119 
	`MSG
("ERROR: invalidÅestÇumber\n");

120  
EXIT_FAILURE
;

122 
ã°_numbî
 = 
xi
;

127 
	`MSG
("ERROR:árgumentÖarsing use -h option for help\n");

128 
	`ußge
();

129  
EXIT_FAILURE
;

132 
	`MSG
("INFO: Sèπög LoR®c⁄˚¡øt‹ SPI såess-ã°Çumbî %i\n", 
ã°_numbî
);

135 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

136 
siga˘
.
ß_Êags
 = 0;

137 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

138 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

139 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

140 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

143 
i
 = 
	`lgw_c⁄√˘
(
Ál£
, 
DEFAULT_TX_NOTCH_FREQ
);

144 i‡(
i
 !
LGW_REG_SUCCESS
) {

145 
	`MSG
("ERROR:Ügw_connect() didÇotÑeturn SUCCESS");

146  
EXIT_FAILURE
;

149 i‡(
ã°_numbî
 == 1) {

151 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

152 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

153 
i
=0; i<
ª≥©s_≥r_cy˛e
; ++i) {

154 
ã°_vÆue
 = (
	`ønd
() % 256);

155 
	`lgw_ªg_w
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, 
ã°_vÆue
);

156 
	`lgw_ªg_r
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, &
ªad_vÆue
);

157 i‡(
ªad_vÆue
 !
ã°_vÆue
) {

158 
îr‹
 = 
åue
;

162 i‡(
îr‹
) {

163 
	`¥ötf
("îr‹ durögÅhê%ôh iãøti⁄: wrôê0x%02X,Ñód 0x%02X\n", 
i
+1, 
ã°_vÆue
, 
ªad_vÆue
);

164 
	`¥ötf
("RepeatÑead ofÅargetÑegister:");

165 
i
=0; i<
READS_WHEN_ERROR
; ++i) {

166 
	`lgw_ªg_r
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, &
ªad_vÆue
);

167 
	`¥ötf
(" 0x%02X", 
ªad_vÆue
);

169 
	`¥ötf
("\n");

170  
EXIT_FAILURE
;

172 
	`¥ötf
("did %òR/W o¿™ 8 bô†ªg wôhÇÿîr‹\n", 
ª≥©s_≥r_cy˛e
);

173 ++
cy˛e_numbî
;

176 } i‡(
ã°_numbî
 == 2) {

178 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

179 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

180 
i
=0; i<
ª≥©s_≥r_cy˛e
; ++i) {

181 
ã°_vÆue
 = (
	`ønd
() % 256);

182 
	`lgw_ªg_r
(
LGW_VERSION
, &
rb1
);

183 
	`lgw_ªg_w
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, 
ã°_vÆue
);

184 
	`lgw_ªg_r
(
LGW_VERSION
, &
rb2
);

185 
	`lgw_ªg_r
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, &
ªad_vÆue
);

186 
	`lgw_ªg_r
(
LGW_VERSION
, &
rb3
);

187 i‡((
rb1
 !
VERS
Ë|| (
rb2
 !VERSË|| (
rb3
 !VERSË|| (
ªad_vÆue
 !
ã°_vÆue
)) {

188 
îr‹
 = 
åue
;

192 i‡(
îr‹
) {

193 
	`¥ötf
("îr‹ durögÅhê%ôh iãøti⁄: wrôê%02X,Ñód %02X, vîsi⁄ (%i, %i, %i)\n", 
i
+1, 
ã°_vÆue
, 
ªad_vÆue
, 
rb1
, 
rb2
, 
rb3
);

194 
	`¥ötf
("RepeatÑead ofÅargetÑegister:");

195 
i
=0; i<
READS_WHEN_ERROR
; ++i) {

196 
	`lgw_ªg_r
(
LGW_IMPLICIT_PAYLOAD_LENGHT
, &
ªad_vÆue
);

197 
	`¥ötf
(" 0x%02X", 
ªad_vÆue
);

199 
	`¥ötf
("\n");

200  
EXIT_FAILURE
;

202 
	`¥ötf
("did %òR/W o¿™ 8 bô†ªg wôhÇÿîr‹\n", 
ª≥©s_≥r_cy˛e
);

203 ++
cy˛e_numbî
;

206 } i‡(
ã°_numbî
 == 3) {

208 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

209 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

210 
i
=0; i<
ª≥©s_≥r_cy˛e
; ++i) {

211 
ã°_vÆue
 = (
	`ønd
() & 0x0000FFFF);

212 
ã°_vÆue
 +(
öt32_t
)(
	`ønd
() & 0x0000FFFF) << 16;

213 
	`lgw_ªg_w
(
LGW_FSK_REF_PATTERN_LSB
, 
ã°_vÆue
);

214 
	`lgw_ªg_r
(
LGW_FSK_REF_PATTERN_LSB
, &
ªad_vÆue
);

215 i‡(
ªad_vÆue
 !
ã°_vÆue
) {

216 
îr‹
 = 
åue
;

220 i‡(
îr‹
) {

221 
	`¥ötf
("îr‹ durögÅhê%ôh iãøti⁄: wrôê0x%08X,Ñód 0x%08X\n", 
i
+1, 
ã°_vÆue
, 
ªad_vÆue
);

222 
	`¥ötf
("RepeatÑead ofÅargetÑegister:");

223 
i
=0; i<
READS_WHEN_ERROR
; ++i) {

224 
	`lgw_ªg_r
(
LGW_FSK_REF_PATTERN_LSB
, &
ªad_vÆue
);

225 
	`¥ötf
(" 0x%08X", 
ªad_vÆue
);

227 
	`¥ötf
("\n");

228  
EXIT_FAILURE
;

230 
	`¥ötf
("did %òR/W o¿®32 bô†ªg wôhÇÿîr‹\n", 
ª≥©s_≥r_cy˛e
);

231 ++
cy˛e_numbî
;

234 } i‡(
ã°_numbî
 == 4) {

236 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

237 
i
=0; i<
BUFF_SIZE
; ++i) {

238 
ã°_buff
[
i
] = 
	`ønd
() & 0xFF;

240 
	`¥ötf
("Cy˛ê%ò> ", 
cy˛e_numbî
);

241 
ã°_addr
 = 
	`ønd
() & 0xFFFF;

242 
	`lgw_ªg_w
(
LGW_RX_DATA_BUF_ADDR
, 
ã°_addr
);

243 
	`lgw_ªg_wb
(
LGW_RX_DATA_BUF_DATA
, 
ã°_buff
, 
BUFF_SIZE
);

244 
	`lgw_ªg_w
(
LGW_RX_DATA_BUF_ADDR
, 
ã°_addr
);

245 
	`lgw_ªg_rb
(
LGW_RX_DATA_BUF_DATA
, 
ªad_buff
, 
BUFF_SIZE
);

246 
i
=0; ((i<
BUFF_SIZE
Ë&& (
ã°_buff
[i] =
ªad_buff
[i])); ++i);

247 i‡(
i
 !
BUFF_SIZE
) {

248 
	`¥ötf
("error duringÅhe buffer comparison\n");

249 
	`¥ötf
("Written values:\n");

250 
i
=0; i<
BUFF_SIZE
; ++i) {

251 
	`¥ötf
(" %02X ", 
ã°_buff
[
i
]);

252 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

254 
	`¥ötf
("\n");

255 
	`¥ötf
("Read values:\n");

256 
i
=0; i<
BUFF_SIZE
; ++i) {

257 
	`¥ötf
(" %02X ", 
ªad_buff
[
i
]);

258 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

260 
	`¥ötf
("\n");

261 
	`lgw_ªg_w
(
LGW_RX_DATA_BUF_ADDR
, 
ã°_addr
);

262 
	`lgw_ªg_rb
(
LGW_RX_DATA_BUF_DATA
, 
ªad_buff
, 
BUFF_SIZE
);

263 
	`¥ötf
("Re-read values:\n");

264 
i
=0; i<
BUFF_SIZE
; ++i) {

265 
	`¥ötf
(" %02X ", 
ªad_buff
[
i
]);

266 i‡(
i
%16 =15Ë
	`¥ötf
("\n");

268 
	`¥ötf
("\n");

269  
EXIT_FAILURE
;

271 
	`¥ötf
("didá %i-byã R/W o¿®d©®buf„∏wôhÇÿîr‹\n", 
BUFF_SIZE
);

272 ++
cy˛e_numbî
;

276 
	`MSG
("ERROR: invalidÅestÇumber");

277 
	`ußge
();

281 
i
 = 
	`lgw_disc⁄√˘
();

282 i‡(
i
 !
LGW_REG_SUCCESS
) {

283 
	`MSG
("ERROR:Ügw_disconnect() didÇotÑeturn SUCCESS");

284  
EXIT_FAILURE
;

287 
	`MSG
("INFO: Exiting LoRa concentrator SPI stress-testÖrogram\n");

288  
EXIT_SUCCESS
;

289 
	}
}

	@util_tx_continuous/src/util_tx_continuous.c

22 #i‡
__STDC_VERSION__
 >= 199901L

23 
	#_XOPEN_SOURCE
 600

	)

25 
	#_XOPEN_SOURCE
 500

	)

28 
	~<°döt.h
>

29 
	~<°dboﬁ.h
>

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<sig«l.h
>

33 
	~<uni°d.h
>

34 
	~<°dlib.h
>

35 
	~<gë›t.h
>

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_ªg.h
"

39 
	~"l‹agw_aux.h
"

44 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 
	#MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgsË

	)

47 
	#TX_RF_CHAIN
 0

	)

48 
	#DEFAULT_RSSI_OFFSET
 0.0

	)

50 
	#DEFAULT_FREQ_HZ
 868e6

	)

51 
	#DEFAULT_DIGITAL_GAIN
 0

	)

52 
	#DEFAULT_DAC_GAIN
 3

	)

53 
	#DEFAULT_MIXER_GAIN
 14

	)

54 
	#DEFAULT_PA_GAIN
 3

	)

55 
	#DEFAULT_MODULATION
 "LORA"

	)

56 
	#DEFAULT_SF
 7

	)

57 
	#DEFAULT_BW_KHZ
 125

	)

58 
	#DEFAULT_BR_KBPS
 50

	)

59 
	#DEFAULT_FDEV_KHZ
 25

	)

60 
	#DEFAULT_BT
 2

	)

61 
	#DEFAULT_NOTCH_FREQ
 129000U

	)

67 
	gexô_sig
 = 0;

68 
	gquô_sig
 = 0;

73 
sig_h™dÀr
(
sigio
);

78 
	$maö
(
¨gc
, **
¨gv
)

80 
siga˘i⁄
 
siga˘
;

82 
i
;

85 
›ti⁄_ödex
 = 0;

86 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

100 
¨g_u
;

101 
¨g_f
;

102 
¨g_s
[64];

105 
uöt32_t
 
‰eq_hz
 = 
DEFAULT_FREQ_HZ
;

106 
uöt8_t
 
g_dig
 = 
DEFAULT_DIGITAL_GAIN
;

107 
uöt8_t
 
g_dac
 = 
DEFAULT_DAC_GAIN
;

108 
uöt8_t
 
g_mix
 = 
DEFAULT_MIXER_GAIN
;

109 
uöt8_t
 
g_∑
 = 
DEFAULT_PA_GAIN
;

110 
mod
[64] = 
DEFAULT_MODULATION
;

111 
uöt8_t
 
sf
 = 
DEFAULT_SF
;

112 
bw_khz
 = 
DEFAULT_BW_KHZ
;

113 
br_kbps
 = 
DEFAULT_BR_KBPS
;

114 
uöt8_t
 
fdev_khz
 = 
DEFAULT_FDEV_KHZ
;

115 
uöt8_t
 
bt
 = 
DEFAULT_BT
;

116 
uöt32_t
 
tx_nŸch_‰eq
 = 
DEFAULT_NOTCH_FREQ
;

118 
öt32_t
 
off£t_i
, 
off£t_q
;

121 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

122 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

123 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

124 
lgw_tx_gaö_lut_s
 
txlut
;

125 
lgw_pkt_tx_s
 
txpkt
;

129 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hud::f:r:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

130 
i
) {

132 
	`¥ötf
("~~~ Library version string~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

133 
	`¥ötf
(" %s\n", 
	`lgw_vîsi⁄_öfo
());

134 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

135 
	`¥ötf
(" -f <float> Tx RF frequency in MHz [800:1000]\n");

136 
	`¥ötf
(" -r <int> RadioÅype (SX1255:1255, SX1257:1257)\n");

137 
	`¥ötf
(" --notch <uint> TxÇotch filter frequency in KhZ [126..250]\n");

138 
	`¥ötf
(" --dig <uint> Digital gainÅrim, [0:3]\n");

139 
	`¥ötf
(" 0:1, 1:7/8, 2:3/4, 3:1/2\n");

140 
	`¥ötf
(" --mix <uint> Radio Tx mixer gainÅrim, [0:15]\n");

141 
	`¥ötf
(" 15 correspondsÅo maximum gain, 1 LSB correspondsÅo 2dB step\n");

142 
	`¥ötf
(" --pa <uint> PA gainÅrim, [0:3]\n");

143 
	`¥ötf
(" --mod <char> ModulationÅype ['LORA','FSK','CW']\n");

144 
	`¥ötf
(" --sf <uint> LoRa Spreading Factor, [7:12]\n");

145 
	`¥ötf
(" --bw <uint> LoRa bandwidth in kHz, [125,250,500]\n");

146 
	`¥ötf
(" --br <float> FSK bitrate in kbps, [0.5:250]\n");

147 
	`¥ötf
(" --fdev <uint> FSK frequency deviation in kHz, [1:250]\n");

148 
	`¥ötf
(" --bt <uint> FSK gaussian filter BTÅrim, [0:3]\n");

149 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

150  
EXIT_SUCCESS
;

154 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"dig") == 0) {

155 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

156 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

157 
	`¥ötf
("ERROR:árgumentÖarsing of --digárgument. Use -hÅoÖrint help\n");

158  
EXIT_FAILURE
;

162 
g_dig
 = (
uöt8_t
)
¨g_u
;

165 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"dac") == 0) {

166 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

167 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

168 
	`¥ötf
("ERROR:árgumentÖarsing of --dacárgument. Use -hÅoÖrint help\n");

169  
EXIT_FAILURE
;

172 
g_dac
 = (
uöt8_t
)
¨g_u
;

175 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"mix") == 0) {

176 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

177 i‡((
i
 !1Ë|| (
¨g_u
 > 15)) {

178 
	`¥ötf
("ERROR:árgumentÖarsing of --mixárgument. Use -hÅoÖrint help\n");

179  
EXIT_FAILURE
;

182 
g_mix
 = (
uöt8_t
)
¨g_u
;

185 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"pa") == 0) {

186 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

187 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

188 
	`¥ötf
("ERROR:árgumentÖarsing of --paárgument. Use -hÅoÖrint help\n");

189  
EXIT_FAILURE
;

192 
g_∑
 = 
¨g_u
;

195 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"mod") == 0) {

196 
i
 = 
	`ssˇnf
(
›èrg
, "%s", 
¨g_s
);

197 i‡((
i
 !1Ë|| ((
	`°rcmp
(
¨g_s
,"LORA") != 0) && (strcmp(arg_s,"FSK") != 0) && (strcmp(arg_s,"CW") != 0))) {

198 
	`¥ötf
("ERROR:árgumentÖarsing of --modárgument. Use -hÅoÖrint help\n");

199  
EXIT_FAILURE
;

202 
	`•rötf
(
mod
, "%s", 
¨g_s
);

205 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"sf") == 0) {

206 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

207 i‡((
i
 !1Ë|| (
¨g_u
 < 7) || (arg_u > 12)) {

208 
	`¥ötf
("ERROR:árgumentÖarsing of --sfárgument. Use -hÅoÖrint help\n");

209  
EXIT_FAILURE
;

212 
sf
 = (
uöt8_t
)
¨g_u
;

215 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"bw") == 0) {

216 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

217 i‡((
i
 !1Ë|| ((
¨g_u
 != 125) && (arg_u != 250) && (arg_u != 500))) {

218 
	`¥ötf
("ERROR:árgumentÖarsing of --bwárgument. Use -hÅoÖrint help\n");

219  
EXIT_FAILURE
;

222 
bw_khz
 = 
¨g_u
;

225 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"br") == 0) {

226 
i
 = 
	`ssˇnf
(
›èrg
, "%f", &
¨g_f
);

227 i‡((
i
 !1Ë|| (
¨g_f
 < 0.5) || (arg_f > 250)) {

228 
	`¥ötf
("ERROR:árgumentÖarsing of --brárgument. Use -hÅoÖrint help\n");

229  
EXIT_FAILURE
;

232 
br_kbps
 = 
¨g_f
;

235 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"fdev") == 0) {

236 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

237 i‡((
i
 !1Ë|| (
¨g_u
 < 1) || (arg_u > 250)) {

238 
	`¥ötf
("ERROR:árgumentÖarsing of --fdevárgument. Use -hÅoÖrint help\n");

239  
EXIT_FAILURE
;

242 
fdev_khz
 = (
uöt8_t
)
¨g_u
;

245 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"bt") == 0) {

246 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

247 i‡((
i
 !1Ë|| (
¨g_u
 > 3)) {

248 
	`¥ötf
("ERROR:árgumentÖarsing of --btárgument. Use -hÅoÖrint help\n");

249  
EXIT_FAILURE
;

252 
bt
 = (
uöt8_t
)
¨g_u
;

255 i‡(
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
,"notch") == 0) {

256 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

257 i‡((
i
 !1Ë|| ((
¨g_u
 < 126) || (arg_u > 250))) {

258 
	`¥ötf
("ERROR:árgumentÖarsing of --notchárgument. Use -hÅoÖrint help\n");

259  
EXIT_FAILURE
;

262 
tx_nŸch_‰eq
 = (
uöt32_t
)
¨g_u
 * 1000U;

266 
	`¥ötf
("ERROR:árgumentÖarsing options. Use -hÅoÖrint help\n");

267  
EXIT_FAILURE
;

272 
i
 = 
	`ssˇnf
(
›èrg
, "%f", &
¨g_f
);

273 i‡((
i
 !1Ë|| (
¨g_f
 < 1)) {

274 
	`¥ötf
("ERROR:árgumentÖarsing of -fárgument. Use -hÅoÖrint help\n");

275  
EXIT_FAILURE
;

278 
‰eq_hz
 = (
uöt32_t
)((
¨g_f
 * 1e6) + 0.5);

283 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
¨g_u
);

284 
¨g_u
) {

286 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

289 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

292 
	`¥ötf
("ERROR:árgumentÖarsing of -rárgument. Use -hÅoÖrint help\n");

293  
EXIT_FAILURE
;

298 
	`¥ötf
("ERROR:árgumentÖarsing options. Use -hÅoÖrint help\n");

299  
EXIT_FAILURE
;

304 
	`sigem±y£t
–&
siga˘
.
ß_mask
 );

305 
siga˘
.
ß_Êags
 = 0;

306 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

307 
	`siga˘i⁄
–
SIGQUIT
, &
siga˘
, 
NULL
 );

308 
	`siga˘i⁄
–
SIGINT
, &
siga˘
, 
NULL
 );

309 
	`siga˘i⁄
–
SIGTERM
, &
siga˘
, 
NULL
 );

312 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

313 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

314 
bﬂrdc⁄f
.
˛k§c
 = 1;

315 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

318 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

319 
rfc⁄f
.
íabÀ
 = 
åue
;

320 
rfc⁄f
.
‰eq_hz
 = freq_hz;

321 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

322 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

323 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

324 
rfc⁄f
.
tx_nŸch_‰eq
 =Åx_notch_freq;

325 
	`lgw_rxrf_£tc⁄f
(
TX_RF_CHAIN
, 
rfc⁄f
);

328 
	`mem£t
(&
txlut
, 0, Åxlut);

329 
txlut
.
size
 = 1;

330 
txlut
.
lut
[0].
dig_gaö
 = 
g_dig
;

331 
txlut
.
lut
[0].
∑_gaö
 = 
g_∑
;

332 
txlut
.
lut
[0].
dac_gaö
 = 
g_dac
;

333 
txlut
.
lut
[0].
mix_gaö
 = 
g_mix
;

334 
txlut
.
lut
[0].
rf_powî
 = 0;

335 
	`lgw_txgaö_£tc⁄f
(&
txlut
);

338 
i
 = 
	`lgw_°¨t
();

339 i‡(
i
 =
LGW_HAL_SUCCESS
) {

340 
	`MSG
("INFO: concentrator started,Öacket can be sent\n");

342 
	`MSG
("ERROR: failedÅo startÅhe concentrator\n");

343  
EXIT_FAILURE
;

347 
	`mem£t
(&
txpkt
, 0, (txpkt));

348 
txpkt
.
‰eq_hz
 = freq_hz;

349 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

350 
txpkt
.
rf_chaö
 = 
TX_RF_CHAIN
;

351 
txpkt
.
rf_powî
 = 0;

352 i‡(
	`°rcmp
(
mod
, "FSK") == 0) {

353 
txpkt
.
moduœti⁄
 = 
MOD_FSK
;

354 
txpkt
.
d©¨©e
 = 
br_kbps
 * 1e3;

356 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

357 
bw_khz
) {

358 125: 
txpkt
.
b™dwidth
 = 
BW_125KHZ
; ;

359 250: 
txpkt
.
b™dwidth
 = 
BW_250KHZ
; ;

360 500: 
txpkt
.
b™dwidth
 = 
BW_500KHZ
; ;

362 
	`MSG
("ERROR: invalid 'bw' variable\n");

363  
EXIT_FAILURE
;

365 
sf
) {

366 7: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF7
; ;

367 8: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF8
; ;

368 9: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
; ;

369 10: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF10
; ;

370 11: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF11
; ;

371 12: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF12
; ;

373 
	`MSG
("ERROR: invalid 'sf' variable\n");

374  
EXIT_FAILURE
;

377 
txpkt
.
codî©e
 = 
CR_LORA_4_5
;

378 
txpkt
.
f_dev
 = 
fdev_khz
;

379 
txpkt
.
¥ómbÀ
 = 65535;

380 
txpkt
.
övît_pﬁ
 = 
Ál£
;

381 
txpkt
.
no_¸c
 = 
åue
;

382 
txpkt
.
no_hódî
 = 
åue
;

383 
txpkt
.
size
 = 1;

384 
txpkt
.
∑ylﬂd
[0] = 0;

387 
	`lgw_ªg_w
(
LGW_TX_MODE
, 1);

388 
	`lgw_ªg_w
(
LGW_FSK_TX_GAUSSIAN_SELECT_BT
, 
bt
);

389 i‡(
	`°rcmp
(
mod
, "CW") == 0) {

391 
	`lgw_ªg_w
(
LGW_SIG_GEN_FREQ
, 0);

392 
	`lgw_ªg_w
(
LGW_SIG_GEN_EN
, 1);

393 
	`lgw_ªg_w
(
LGW_TX_OFFSET_I
, 0);

394 
	`lgw_ªg_w
(
LGW_TX_OFFSET_Q
, 0);

398 
i
 = 
	`lgw_£nd
(
txpkt
);

401 
	`¥ötf
("SX1301Üibøry vîsi⁄: %s\n", 
	`lgw_vîsi⁄_öfo
());

402 i‡(
	`°rcmp
(
mod
, "LORA") == 0) {

403 
	`¥ötf
("Moduœti⁄: LORA SF:%d BW:%d kHz\n", 
sf
, 
bw_khz
);

405 i‡(
	`°rcmp
(
mod
, "FSK") == 0) {

406 
	`¥ötf
("Moduœti⁄: FSK BR:%3.3‡kbp†FDEV:%d kHz BT:%d\n", 
br_kbps
, 
fdev_khz
, 
bt
);

408 i‡(
	`°rcmp
(
mod
, "CW") == 0) {

409 
	`¥ötf
("Modulation: CW\n");

411 
rfc⁄f
.
ty≥
) {

412 
LGW_RADIO_TYPE_SX1255
:

413 
	`¥ötf
("Radio Type: SX1255\n");

415 
LGW_RADIO_TYPE_SX1257
:

416 
	`¥ötf
("Radio Type: SX1257\n");

419 
	`¥ötf
("ERROR: undefinedÑadioÅype\n");

422 
	`¥ötf
("Fªquícy: %4.3‡MHz\n", 
‰eq_hz
/1e6);

423 
	`¥ötf
("TX Gaös: DigôÆ:%d DAC:%d Mixî:%d PA:%d\n", 
g_dig
, 
g_dac
, 
g_mix
, 
g_∑
);

424 i‡(
	`°rcmp
(
mod
, "CW") != 0) {

425 
	`lgw_ªg_r
(
LGW_TX_OFFSET_I
, &
off£t_i
);

426 
	`lgw_ªg_r
(
LGW_TX_OFFSET_Q
, &
off£t_q
);

427 
	`¥ötf
("CÆibøãd DC off£ts: I:%d Q:%d\n", 
off£t_i
, 
off£t_q
);

431 (
quô_sig
 !1Ë&& (
exô_sig
 != 1)) {

432 
	`waô_ms
(100);

436 
	`lgw_°›
();

439 
	}
}

444 
	$sig_h™dÀr
(
sigio
)

446 i‡(
sigio
 =
SIGQUIT
) {

447 
quô_sig
 = 1;

449 if((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

450 
exô_sig
 = 1;

452 
	}
}

	@util_tx_test/src/util_tx_test.c

21 #i‡
__STDC_VERSION__
 >= 199901L

22 
	#_XOPEN_SOURCE
 600

	)

24 
	#_XOPEN_SOURCE
 500

	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<sig«l.h
>

33 
	~<uni°d.h
>

34 
	~<°dlib.h
>

35 
	~<gë›t.h
>

37 
	~"l‹agw_hÆ.h
"

38 
	~"l‹agw_ªg.h
"

39 
	~"l‹agw_aux.h
"

44 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

45 
	#MSG
(
¨gs
...Ë
	`Ârötf
(
°dîr
,árgsË

	)

50 
	#TX_RF_CHAIN
 0

	)

51 
	#DEFAULT_RSSI_OFFSET
 0.0

	)

52 
	#DEFAULT_MODULATION
 "LORA"

	)

53 
	#DEFAULT_BR_KBPS
 50

	)

54 
	#DEFAULT_FDEV_KHZ
 25

	)

55 
	#DEFAULT_NOTCH_FREQ
 129000U

	)

56 
	#DEFAULT_SX127X_RSSI_OFFSET
 -4

	)

62 
siga˘i⁄
 
	gsiga˘
;

63 
	gexô_sig
 = 0;

64 
	gquô_sig
 = 0;

67 
lgw_tx_gaö_lut_s
 
	gtxgaö_lut
 = {

68 .
size
 = 5,

69 .
	glut
[0] = {

70 .
dig_gaö
 = 0,

71 .
	g∑_gaö
 = 0,

72 .
	gdac_gaö
 = 3,

73 .
	gmix_gaö
 = 12,

74 .
	grf_powî
 = 0

76 .
	glut
[1] = {

77 .
dig_gaö
 = 0,

78 .
	g∑_gaö
 = 1,

79 .
	gdac_gaö
 = 3,

80 .
	gmix_gaö
 = 12,

81 .
	grf_powî
 = 10

83 .
	glut
[2] = {

84 .
dig_gaö
 = 0,

85 .
	g∑_gaö
 = 2,

86 .
	gdac_gaö
 = 3,

87 .
	gmix_gaö
 = 10,

88 .
	grf_powî
 = 14

90 .
	glut
[3] = {

91 .
dig_gaö
 = 0,

92 .
	g∑_gaö
 = 3,

93 .
	gdac_gaö
 = 3,

94 .
	gmix_gaö
 = 9,

95 .
	grf_powî
 = 20

97 .
	glut
[4] = {

98 .
dig_gaö
 = 0,

99 .
	g∑_gaö
 = 3,

100 .
	gdac_gaö
 = 3,

101 .
	gmix_gaö
 = 14,

102 .
	grf_powî
 = 27

108 
sig_h™dÀr
(
sigio
);

110 
ußge
 ();

115 
	$sig_h™dÀr
(
sigio
) {

116 i‡(
sigio
 =
SIGQUIT
) {

117 
quô_sig
 = 1;;

118 } i‡((
sigio
 =
SIGINT
Ë|| (sigiÿ=
SIGTERM
)) {

119 
exô_sig
 = 1;

121 
	}
}

124 
	$ußge
() {

125 
i
;

127 
	`¥ötf
("*** Libøry vîsi⁄ inf‹m©i⁄ ***\n%s\n\n", 
	`lgw_vîsi⁄_öfo
());

128 
	`¥ötf
("Available options:\n");

129 
	`¥ötf
(" -hÖrintÅhis help\n");

130 
	`¥ötf
(" -r <int>ÑadioÅype (SX1255:1255, SX1257:1257)\n");

131 
	`¥ötf
(" -n <uint> TXÇotch filter frequency in kHz [126..250]\n");

132 
	`¥ötf
(" -f <float>Åarget frequency in MHz\n");

133 
	`¥ötf
(" -k <uint> concentrator clock source (0:Radio A, 1:Radio B)\n");

134 
	`¥ötf
(" -m <str> modulationÅype ['LORA', 'FSK']\n");

135 
	`¥ötf
(" -b <uint> LoRa bandwidth in kHz [125, 250, 500]\n");

136 
	`¥ötf
(" -s <uint> LoRa Spreading Factor [7-12]\n");

137 
	`¥ötf
(" -c <uint> LoRa Coding Rate [1-4]\n");

138 
	`¥ötf
(" -d <uint> FSK frequency deviation in kHz [1:250]\n");

139 
	`¥ötf
(" -q <float> FSK bitrate in kbps [0.5:250]\n");

140 
	`¥ötf
(" -p <int> RFÖower (dBm) [ ");

141 
i
 = 0; i < 
txgaö_lut
.
size
; i++) {

142 
	`¥ötf
("%ddBm ", 
txgaö_lut
.
lut
[
i
].
rf_powî
);

144 
	`¥ötf
("]\n");

145 
	`¥ötf
(" -l <uint> LoRaÖreambleÜength (symbols)\n");

146 
	`¥ötf
(" -z <uint>Öayload size (bytes, <256)\n");

147 
	`¥ötf
(" -i sendÖacket using inverted modulationÖolarity\n");

148 
	`¥ötf
(" -t <uint>Öause betweenÖackets (ms)\n");

149 
	`¥ötf
(" -x <int>Çb ofÅimesÅhe sequence isÑepeated (-1Üoop until stopped)\n");

150 
	`¥ötf
(" --lbt-freq <float>Übt first channel frequency in MHz\n");

151 
	`¥ötf
(" --lbt-nbch <uint>ÜbtÇumber of channels [1..8]\n");

152 
	`¥ötf
(" --lbt-sctm <uint>Übt scanÅime in usecÅo beáppliedÅoáll channels [128, 5000]\n");

153 
	`¥ötf
(" --lbt-rssi <int>ÜbtÑssiÅarget in dBm [-128..0]\n");

154 
	`¥ötf
(" --lbt-rssi-offset <int>Ñssi offset in dBÅo beáppliedÅo SX127x RSSI [-128..127]\n");

155 
	}
}

160 
	$maö
(
¨gc
, **
¨gv
)

162 
i
;

163 
uöt8_t
 
°©us_v¨
;

166 
xi
 = 0;

167 
xu
 = 0;

168 
xd
 = 0.0;

169 
xf
 = 0.0;

170 
¨g_s
[64];

173 
mod
[64] = 
DEFAULT_MODULATION
;

174 
uöt32_t
 
f_èrgë
 = 0;

175 
sf
 = 10;

176 
¸
 = 1;

177 
bw
 = 125;

178 
pow
 = 14;

179 
¥ómb
 = 8;

180 
∂_size
 = 16;

181 
dñay
 = 1000;

182 
ª≥©
 = -1;

183 
boﬁ
 
övît
 = 
Ál£
;

184 
br_kbps
 = 
DEFAULT_BR_KBPS
;

185 
uöt8_t
 
fdev_khz
 = 
DEFAULT_FDEV_KHZ
;

186 
boﬁ
 
lbt_íabÀ
 = 
Ál£
;

187 
uöt32_t
 
lbt_f_èrgë
 = 0;

188 
uöt32_t
 
lbt_sc_time
 = 5000;

189 
öt8_t
 
lbt_rssi_èrgë_dBm
 = -80;

190 
öt8_t
 
lbt_rssi_off£t_dB
 = 
DEFAULT_SX127X_RSSI_OFFSET
;

191 
uöt8_t
 
lbt_nb_ch™√l
 = 1;

192 
uöt32_t
 
sx1301_cou¡_us
;

193 
uöt32_t
 
tx_nŸch_‰eq
 = 
DEFAULT_NOTCH_FREQ
;

196 
lgw_ødio_ty≥_e
 
ødio_ty≥
 = 
LGW_RADIO_TYPE_NONE
;

197 
uöt8_t
 
˛ocksour˚
 = 1;

198 
lgw_c⁄f_bﬂrd_s
 
bﬂrdc⁄f
;

199 
lgw_c⁄f_lbt_s
 
lbtc⁄f
;

200 
lgw_c⁄f_rxrf_s
 
rfc⁄f
;

203 
lgw_pkt_tx_s
 
txpkt
;

206 
uöt16_t
 
cy˛e_cou¡
 = 0;

209 
›ti⁄_ödex
 = 0;

210 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

211 {"lbt-‰eq", 
ªquúed_¨gumít
, 0, 0},

212 {"lbt-s˘m", 
ªquúed_¨gumít
, 0, 0},

213 {"lbt-rssi", 
ªquúed_¨gumít
, 0, 0},

214 {"lbt-nbch", 
ªquúed_¨gumít
, 0, 0},

215 {"lbt-rssi-off£t", 
ªquúed_¨gumít
, 0, 0},

220 (
i
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "hif:n:m:b:s:c:p:l:z:t:x:r:k:d:q:", 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
)) != -1) {

221 
i
) {

223 
	`ußge
();

224  
EXIT_FAILURE
;

228 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

229 i‡((
i
 !1Ë|| (
xd
 < 30.0) || (xd > 3000.0)) {

230 
	`MSG
("ERROR: invalid TX frequency\n");

231 
	`ußge
();

232  
EXIT_FAILURE
;

234 
f_èrgë
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

239 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

240 i‡((
i
 !1Ë|| ((
xi
 < 126) || (xi > 250))) {

241 
	`MSG
("ERROR: invalid TXÇotch filter frequency\n");

242 
	`ußge
();

243  
EXIT_FAILURE
;

245 
tx_nŸch_‰eq
 = 
xi
*1000;

250 
i
 = 
	`ssˇnf
(
›èrg
, "%s", 
¨g_s
);

251 i‡((
i
 !1Ë|| ((
	`°rcmp
(
¨g_s
,"LORA") != 0) && (strcmp(arg_s,"FSK")))) {

252 
	`MSG
("ERROR: invalid modulationÅype\n");

253 
	`ußge
();

254  
EXIT_FAILURE
;

256 
	`•rötf
(
mod
, "%s", 
¨g_s
);

261 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

262 i‡((
i
 !1Ë|| ((
xi
 != 125) && (xi != 250) && (xi != 500))) {

263 
	`MSG
("ERROR: invalid LoRa bandwidth\n");

264 
	`ußge
();

265  
EXIT_FAILURE
;

267 
bw
 = 
xi
;

272 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

273 i‡((
i
 !1Ë|| (
xi
 < 7) || (xi > 12)) {

274 
	`MSG
("ERROR: invalid spreading factor\n");

275 
	`ußge
();

276  
EXIT_FAILURE
;

278 
sf
 = 
xi
;

283 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

284 i‡((
i
 !1Ë|| (
xi
 < 1) || (xi > 4)) {

285 
	`MSG
("ERROR: invalid codingÑate\n");

286 
	`ußge
();

287  
EXIT_FAILURE
;

289 
¸
 = 
xi
;

294 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

295 i‡((
i
 !1Ë|| (
xi
 < -60) || (xi > 60)) {

296 
	`MSG
("ERROR: invalid RFÖower\n");

297 
	`ußge
();

298  
EXIT_FAILURE
;

300 
pow
 = 
xi
;

305 
i
 = 
	`ssˇnf
(
›èrg
, "%u", &
xu
);

306 i‡((
i
 !1Ë|| (
xu
 < 1) || (xu > 250)) {

307 
	`MSG
("ERROR: invalid FSK frequency deviation\n");

308 
	`ußge
();

309  
EXIT_FAILURE
;

311 
fdev_khz
 = (
uöt8_t
)
xu
;

316 
i
 = 
	`ssˇnf
(
›èrg
, "%f", &
xf
);

317 i‡((
i
 !1Ë|| (
xf
 < 0.5) || (xf > 250)) {

318 
	`MSG
("ERROR: invalid FSK bitrate\n");

319 
	`ußge
();

320  
EXIT_FAILURE
;

322 
br_kbps
 = 
xf
;

327 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

328 i‡((
i
 !1Ë|| (
xi
 < 6)) {

329 
	`MSG
("ERROR:ÖreambleÜength must be >6 symbols \n");

330 
	`ußge
();

331  
EXIT_FAILURE
;

333 
¥ómb
 = 
xi
;

338 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

339 i‡((
i
 !1Ë|| (
xi
 <= 0)) {

340 
	`MSG
("ERROR: invalidÖayload size\n");

341 
	`ußge
();

342  
EXIT_FAILURE
;

344 
∂_size
 = 
xi
;

349 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

350 i‡((
i
 !1Ë|| (
xi
 < 0)) {

351 
	`MSG
("ERROR: invalidÅime betweenÖackets\n");

352 
	`ußge
();

353  
EXIT_FAILURE
;

355 
dñay
 = 
xi
;

360 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

361 i‡((
i
 !1Ë|| (
xi
 < -1)) {

362 
	`MSG
("ERROR: invalidÇumber ofÑepeats\n");

363 
	`ußge
();

364  
EXIT_FAILURE
;

366 
ª≥©
 = 
xi
;

371 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

372 
xi
) {

374 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1255
;

377 
ødio_ty≥
 = 
LGW_RADIO_TYPE_SX1257
;

380 
	`¥ötf
("ERROR: invalidÑadioÅype\n");

381 
	`ußge
();

382  
EXIT_FAILURE
;

387 
övît
 = 
åue
;

391 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

392 i‡((
i
 !1Ë|| ((
xi
 != 0) && (xi != 1))) {

393 
	`MSG
("ERROR: invalid clock source\n");

394 
	`ußge
();

395  
EXIT_FAILURE
;

397 
˛ocksour˚
 = (
uöt8_t
)
xi
;

402 if–
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "lbt-freq") == 0 ) {

403 
i
 = 
	`ssˇnf
(
›èrg
, "%lf", &
xd
);

404 i‡((
i
 !1Ë|| (
xd
 < 30.0) || (xd > 3000.0)) {

405 
	`MSG
("ERROR: invalid LBT start frequency\n");

406 
	`ußge
();

407  
EXIT_FAILURE
;

409 
lbt_f_èrgë
 = (
uöt32_t
)((
xd
*1e6) + 0.5);

410 
lbt_íabÀ
 = 
åue
;

412 } if–
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "lbt-sctm") == 0 ) {

413 i‡(
lbt_íabÀ
 =
åue
) {

414 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

415 i‡((
i
 !1Ë|| (
xi
 < 0)) {

416 
	`MSG
("ERROR: invalid LBT scanÅime\n");

417 
	`ußge
();

418  
EXIT_FAILURE
;

420 
lbt_sc_time
 = 
xi
;

423 
	`MSG
("ERROR: invalidÖarameter, LBT start frequency must be set\n");

424 
	`ußge
();

425  
EXIT_FAILURE
;

427 } if–
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "lbt-rssi") == 0 ) {

428 i‡(
lbt_íabÀ
 =
åue
) {

429 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

430 i‡((
i
 !1Ë|| ((
xi
 < -128) && (xi > 0))) {

431 
	`MSG
("ERROR: invalid LBT RSSIÅarget\n");

432 
	`ußge
();

433  
EXIT_FAILURE
;

435 
lbt_rssi_èrgë_dBm
 = 
xi
;

438 
	`MSG
("ERROR: invalidÖarameter, LBT start frequency must be set\n");

439 
	`ußge
();

440  
EXIT_FAILURE
;

442 } if–
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "lbt-rssi-offset") == 0 ) {

443 i‡(
lbt_íabÀ
 =
åue
) {

444 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

445 i‡((
i
 !1Ë|| ((
xi
 < -128) && (xi > 127))) {

446 
	`MSG
("ERROR: invalid LBT RSSI offset\n");

447 
	`ußge
();

448  
EXIT_FAILURE
;

450 
lbt_rssi_off£t_dB
 = 
xi
;

453 
	`MSG
("ERROR: invalidÖarameter, LBT start frequency must be set\n");

454 
	`ußge
();

455  
EXIT_FAILURE
;

457 } if–
	`°rcmp
(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
, "lbt-nbch") == 0 ) {

458 i‡(
lbt_íabÀ
 =
åue
) {

459 
i
 = 
	`ssˇnf
(
›èrg
, "%i", &
xi
);

460 i‡((
i
 !1Ë|| (
xi
 < 0)) {

461 
	`MSG
("ERROR: invalid LBTÇumber of channels\n");

462 
	`ußge
();

463  
EXIT_FAILURE
;

465 
lbt_nb_ch™√l
 = 
xi
;

468 
	`MSG
("ERROR: invalidÖarameter, LBT start frequency must be set\n");

469 
	`ußge
();

470  
EXIT_FAILURE
;

475 
	`MSG
("ERROR:árgumentÖarsing\n");

476 
	`ußge
();

477  
EXIT_FAILURE
;

482 i‡(
f_èrgë
 == 0) {

483 
	`MSG
("ERROR: frequencyÖarameterÇot set,Ölease use -f optionÅo specify it.\n");

484  
EXIT_FAILURE
;

486 i‡(
ødio_ty≥
 =
LGW_RADIO_TYPE_NONE
) {

487 
	`MSG
("ERROR:ÑadioÅypeÖarameterÇotÖroperly set,Ölease use -r optionÅo specify it.\n");

488  
EXIT_FAILURE
;

492 i‡(
	`°rcmp
(
mod
, "FSK") == 0) {

493 
	`¥ötf
("Sídög %òFSKÖackë†⁄ %u Hz (FDev %u kHz, Bôøã %.2f, %òbyã†∑ylﬂd, %òsymbﬁ†¥ómbÀË© %òdBm, wôh %òm†bëwì¿óch\n", 
ª≥©
, 
f_èrgë
, 
fdev_khz
, 
br_kbps
, 
∂_size
, 
¥ómb
, 
pow
, 
dñay
);

495 
	`¥ötf
("Sídög %òLoR®∑ckë†⁄ %u Hz (BW %òkHz, SF %i, CR %i, %òbyã†∑ylﬂd, %òsymbﬁ†¥ómbÀË© %òdBm, wôh %òm†bëwì¿óch\n", 
ª≥©
, 
f_èrgë
, 
bw
, 
sf
, 
¸
, 
∂_size
, 
¥ómb
, 
pow
, 
dñay
);

499 
	`sigem±y£t
(&
siga˘
.
ß_mask
);

500 
siga˘
.
ß_Êags
 = 0;

501 
siga˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

502 
	`siga˘i⁄
(
SIGQUIT
, &
siga˘
, 
NULL
);

503 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 
NULL
);

504 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 
NULL
);

508 
	`mem£t
(&
bﬂrdc⁄f
, 0, (boardconf));

509 
bﬂrdc⁄f
.
l‹aw™_public
 = 
åue
;

510 
bﬂrdc⁄f
.
˛k§c
 = 
˛ocksour˚
;

511 
	`lgw_bﬂrd_£tc⁄f
(
bﬂrdc⁄f
);

514 i‡(
lbt_íabÀ
) {

515 
	`mem£t
(&
lbtc⁄f
, 0, (lbtconf));

516 
lbtc⁄f
.
íabÀ
 = 
åue
;

517 
lbtc⁄f
.
nb_ch™√l
 = 
lbt_nb_ch™√l
;

518 
lbtc⁄f
.
rssi_èrgë
 = 
lbt_rssi_èrgë_dBm
;

519 
lbtc⁄f
.
rssi_off£t
 = 
lbt_rssi_off£t_dB
;

520 
lbtc⁄f
.
ch™√ls
[0].
‰eq_hz
 = 
lbt_f_èrgë
;

521 
lbtc⁄f
.
ch™√ls
[0].
sˇn_time_us
 = 
lbt_sc_time
;

522 
i
=1; i<
lbt_nb_ch™√l
; i++) {

523 
lbtc⁄f
.
ch™√ls
[
i
].
‰eq_hz
 =Übtconf.channels[i-1].freq_hz + 200E3;

524 
lbtc⁄f
.
ch™√ls
[
i
].
sˇn_time_us
 = 
lbt_sc_time
;

526 
	`lgw_lbt_£tc⁄f
(
lbtc⁄f
);

530 
	`mem£t
(&
rfc⁄f
, 0, (rfconf));

531 
rfc⁄f
.
íabÀ
 = 
åue
;

532 
rfc⁄f
.
‰eq_hz
 = 
f_èrgë
;

533 
rfc⁄f
.
rssi_off£t
 = 
DEFAULT_RSSI_OFFSET
;

534 
rfc⁄f
.
ty≥
 = 
ødio_ty≥
;

535 
i
 = 0; i < 
LGW_RF_CHAIN_NB
; i++) {

536 i‡(
i
 =
TX_RF_CHAIN
) {

537 
rfc⁄f
.
tx_íabÀ
 = 
åue
;

538 
rfc⁄f
.
tx_nŸch_‰eq
 =Åx_notch_freq;

540 
rfc⁄f
.
tx_íabÀ
 = 
Ál£
;

542 
	`lgw_rxrf_£tc⁄f
(
i
, 
rfc⁄f
);

546 
	`lgw_txgaö_£tc⁄f
(&
txgaö_lut
);

549 
i
 = 
	`lgw_°¨t
();

550 i‡(
i
 =
LGW_HAL_SUCCESS
) {

551 
	`MSG
("INFO: concentrator started,Öacket can be sent\n");

553 
	`MSG
("ERROR: failedÅo startÅhe concentrator\n");

554  
EXIT_FAILURE
;

558 
	`mem£t
(&
txpkt
, 0, (txpkt));

559 
txpkt
.
‰eq_hz
 = 
f_èrgë
;

560 i‡(
lbt_íabÀ
 =
åue
) {

561 
txpkt
.
tx_mode
 = 
TIMESTAMPED
;

563 
txpkt
.
tx_mode
 = 
IMMEDIATE
;

565 
txpkt
.
rf_chaö
 = 
TX_RF_CHAIN
;

566 
txpkt
.
rf_powî
 = 
pow
;

567 if–
	`°rcmp
–
mod
, "FSK" ) == 0 ) {

568 
txpkt
.
moduœti⁄
 = 
MOD_FSK
;

569 
txpkt
.
d©¨©e
 = 
br_kbps
 * 1e3;

570 
txpkt
.
f_dev
 = 
fdev_khz
;

572 
txpkt
.
moduœti⁄
 = 
MOD_LORA
;

573 
bw
) {

574 125: 
txpkt
.
b™dwidth
 = 
BW_125KHZ
; ;

575 250: 
txpkt
.
b™dwidth
 = 
BW_250KHZ
; ;

576 500: 
txpkt
.
b™dwidth
 = 
BW_500KHZ
; ;

578 
	`MSG
("ERROR: invalid 'bw' variable\n");

579  
EXIT_FAILURE
;

581 
sf
) {

582 7: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF7
; ;

583 8: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF8
; ;

584 9: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF9
; ;

585 10: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF10
; ;

586 11: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF11
; ;

587 12: 
txpkt
.
d©¨©e
 = 
DR_LORA_SF12
; ;

589 
	`MSG
("ERROR: invalid 'sf' variable\n");

590  
EXIT_FAILURE
;

592 
¸
) {

593 1: 
txpkt
.
codî©e
 = 
CR_LORA_4_5
; ;

594 2: 
txpkt
.
codî©e
 = 
CR_LORA_4_6
; ;

595 3: 
txpkt
.
codî©e
 = 
CR_LORA_4_7
; ;

596 4: 
txpkt
.
codî©e
 = 
CR_LORA_4_8
; ;

598 
	`MSG
("ERROR: invalid 'cr' variable\n");

599  
EXIT_FAILURE
;

602 
txpkt
.
övît_pﬁ
 = 
övît
;

603 
txpkt
.
¥ómbÀ
 = 
¥ómb
;

604 
txpkt
.
size
 = 
∂_size
;

605 
	`°r˝y
((*)
txpkt
.
∑ylﬂd
, "TEST**abcdefghijklmnopqrstuvwxyz#0123456789#ABCDEFGHIJKLMNOPQRSTUVWXYZ#0123456789#abcdefghijklmnopqrstuvwxyz#0123456789#ABCDEFGHIJKLMNOPQRSTUVWXYZ#0123456789#abcdefghijklmnopqrstuvwxyz#0123456789#ABCDEFGHIJKLMNOPQRSTUVWXYZ#0123456789#abcdefghijklmnopqrs#" );

608 
cy˛e_cou¡
 = 0;

609 (
ª≥©
 =-1Ë|| (
cy˛e_cou¡
 <Ñepeat)) {

610 ++
cy˛e_cou¡
;

613 
txpkt
.
∑ylﬂd
[4] = (
uöt8_t
)(
cy˛e_cou¡
 >> 8);

614 
txpkt
.
∑ylﬂd
[5] = (
uöt8_t
)(
cy˛e_cou¡
 & 0x00FF);

618 i‡(
lbt_íabÀ
 =
åue
) {

620 
	`lgw_ªg_w
(
LGW_GPS_EN
, 0);

621 
	`lgw_gë_åig˙t
(&
sx1301_cou¡_us
);

622 
	`lgw_ªg_w
(
LGW_GPS_EN
, 1);

625 
txpkt
.
cou¡_us
 = 
sx1301_cou¡_us
 + 50E3;

629 
	`¥ötf
("SídögÖackëÇumbî %u ...", 
cy˛e_cou¡
);

630 
i
 = 
	`lgw_£nd
(
txpkt
);

631 i‡(
i
 =
LGW_HAL_ERROR
) {

632 
	`¥ötf
("ERROR\n");

633  
EXIT_FAILURE
;

634 } i‡(
i
 =
LGW_LBT_ISSUE
 ) {

635 
	`¥ötf
("Failed: Notállowed (LBT)\n");

639 
	`waô_ms
(5);

640 
	`lgw_°©us
(
TX_STATUS
, &
°©us_v¨
);

641 } 
°©us_v¨
 !
TX_FREE
);

642 
	`¥ötf
("OK\n");

646 
	`waô_ms
(
dñay
);

649 i‡((
quô_sig
 =1Ë|| (
exô_sig
 == 1)) {

655 
	`lgw_°›
();

657 
	`¥ötf
("Exiting LoRa concentrator TXÅestÖrogram\n");

658  
EXIT_SUCCESS
;

659 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/linux/spi/spidev.h

22 #i‚de‡
SPIDEV_H


23 
	#SPIDEV_H


	)

25 
	~<löux/ty≥s.h
>

26 
	~<löux/io˘l.h
>

32 
	#SPI_CPHA
 0x01

	)

33 
	#SPI_CPOL
 0x02

	)

35 
	#SPI_MODE_0
 (0|0)

	)

36 
	#SPI_MODE_1
 (0|
SPI_CPHA
)

	)

37 
	#SPI_MODE_2
 (
SPI_CPOL
|0)

	)

38 
	#SPI_MODE_3
 (
SPI_CPOL
|
SPI_CPHA
)

	)

40 
	#SPI_CS_HIGH
 0x04

	)

41 
	#SPI_LSB_FIRST
 0x08

	)

42 
	#SPI_3WIRE
 0x10

	)

43 
	#SPI_LOOP
 0x20

	)

44 
	#SPI_NO_CS
 0x40

	)

45 
	#SPI_READY
 0x80

	)

46 
	#SPI_TX_DUAL
 0x100

	)

47 
	#SPI_TX_QUAD
 0x200

	)

48 
	#SPI_RX_DUAL
 0x400

	)

49 
	#SPI_RX_QUAD
 0x800

	)

55 
	#SPI_IOC_MAGIC
 'k'

	)

90 
	s•i_ioc_å™s„r
 {

91 
__u64
 
	mtx_buf
;

92 
__u64
 
	mrx_buf
;

94 
__u32
 
	mÀn
;

95 
__u32
 
	m•ìd_hz
;

97 
__u16
 
	mdñay_u£cs
;

98 
__u8
 
	mbôs_≥r_w‹d
;

99 
__u8
 
	mcs_ch™ge
;

100 
__u8
 
	mtx_nbôs
;

101 
__u8
 
	mrx_nbôs
;

102 
__u16
 
	m∑d
;

114 
	#SPI_MSGSIZE
(
N
) \

115 ((((
N
)*( (
•i_ioc_å™s„r
))Ë< (1 << 
_IOC_SIZEBITS
)) \

116 ? ((
N
)*( (
•i_ioc_å™s„r
))Ë: 0)

	)

117 
	#SPI_IOC_MESSAGE
(
N
Ë
	`_IOW
(
SPI_IOC_MAGIC
, 0, [
	`SPI_MSGSIZE
(N)])

	)

121 
	#SPI_IOC_RD_MODE
 
	`_IOR
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

122 
	#SPI_IOC_WR_MODE
 
	`_IOW
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

125 
	#SPI_IOC_RD_LSB_FIRST
 
	`_IOR
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

126 
	#SPI_IOC_WR_LSB_FIRST
 
	`_IOW
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

129 
	#SPI_IOC_RD_BITS_PER_WORD
 
	`_IOR
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

130 
	#SPI_IOC_WR_BITS_PER_WORD
 
	`_IOW
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

133 
	#SPI_IOC_RD_MAX_SPEED_HZ
 
	`_IOR
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

134 
	#SPI_IOC_WR_MAX_SPEED_HZ
 
	`_IOW
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

137 
	#SPI_IOC_RD_MODE32
 
	`_IOR
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

138 
	#SPI_IOC_WR_MODE32
 
	`_IOW
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/linux/stddef.h

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
85
2301
libloragw/inc/loragw_aux.h
libloragw/inc/loragw_fpga.h
libloragw/inc/loragw_gps.h
libloragw/inc/loragw_hal.h
libloragw/inc/loragw_lbt.h
libloragw/inc/loragw_radio.h
libloragw/inc/loragw_reg.h
libloragw/inc/loragw_spi.h
libloragw/inc/loragw_sx125x.h
libloragw/inc/loragw_sx1272_fsk.h
libloragw/inc/loragw_sx1272_lora.h
libloragw/inc/loragw_sx1276_fsk.h
libloragw/inc/loragw_sx1276_lora.h
libloragw/src/loragw_aux.c
libloragw/src/loragw_fpga.c
libloragw/src/loragw_gps.c
libloragw/src/loragw_hal.c
libloragw/src/loragw_lbt.c
libloragw/src/loragw_radio.c
libloragw/src/loragw_reg.c
libloragw/src/loragw_spi.native.c
libloragw/tst/test_loragw_cal.c
libloragw/tst/test_loragw_gps.c
libloragw/tst/test_loragw_hal.c
libloragw/tst/test_loragw_reg.c
libloragw/tst/test_loragw_spi.c
lora_pkt_fwd/inc/base64.h
lora_pkt_fwd/inc/jitqueue.h
lora_pkt_fwd/inc/parson.h
lora_pkt_fwd/inc/radio.h
lora_pkt_fwd/inc/timersync.h
lora_pkt_fwd/inc/trace.h
lora_pkt_fwd/src/base64.c
lora_pkt_fwd/src/jitqueue.c
lora_pkt_fwd/src/lora_pkt_fwd.c
lora_pkt_fwd/src/parson.c
lora_pkt_fwd/src/radio.c
lora_pkt_fwd/src/single_tx.c
lora_pkt_fwd/src/timersync.c
tmp/lora_pkt_fwd.c
util_ack/src/util_ack.c
util_lbt_test/src/util_lbt_test.c
util_pkt_logger/inc/parson.h
util_pkt_logger/src/parson.c
util_pkt_logger/src/util_pkt_logger.c
util_sink/src/util_sink.c
util_spectral_scan/src/util_spectral_scan.c
util_spi_stress/src/util_spi_stress.c
util_tx_continuous/src/util_tx_continuous.c
util_tx_test/src/util_tx_test.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/linux/spi/spidev.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/wctype.h
